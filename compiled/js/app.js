(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

module.exports = require('./lib/axios');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCQyxRQUFRLGFBQVIsQ0FBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7Il19
},{"./lib/axios":3}],2:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || require('./../helpers/btoa');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || request.readyState !== 4 && !xDomain) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("e/U+97"))
},{"../core/createError":9,"./../core/settle":12,"./../helpers/btoa":16,"./../helpers/buildURL":17,"./../helpers/cookies":19,"./../helpers/isURLSameOrigin":21,"./../helpers/parseHeaders":23,"./../utils":25,"e/U+97":29}],3:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF4aW9zLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImJpbmQiLCJBeGlvcyIsImRlZmF1bHRzIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwicmVxdWVzdCIsImV4dGVuZCIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJtZXJnZSIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsIlByb21pc2UiLCJzcHJlYWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxTQUFSLENBQVo7QUFDQSxJQUFJQyxPQUFPRCxRQUFRLGdCQUFSLENBQVg7QUFDQSxJQUFJRSxRQUFRRixRQUFRLGNBQVIsQ0FBWjtBQUNBLElBQUlHLFdBQVdILFFBQVEsWUFBUixDQUFmOztBQUVBOzs7Ozs7QUFNQSxTQUFTSSxjQUFULENBQXdCQyxhQUF4QixFQUF1QztBQUNyQyxNQUFJQyxVQUFVLElBQUlKLEtBQUosQ0FBVUcsYUFBVixDQUFkO0FBQ0EsTUFBSUUsV0FBV04sS0FBS0MsTUFBTU0sU0FBTixDQUFnQkMsT0FBckIsRUFBOEJILE9BQTlCLENBQWY7O0FBRUE7QUFDQVAsUUFBTVcsTUFBTixDQUFhSCxRQUFiLEVBQXVCTCxNQUFNTSxTQUE3QixFQUF3Q0YsT0FBeEM7O0FBRUE7QUFDQVAsUUFBTVcsTUFBTixDQUFhSCxRQUFiLEVBQXVCRCxPQUF2Qjs7QUFFQSxTQUFPQyxRQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxJQUFJSSxRQUFRUCxlQUFlRCxRQUFmLENBQVo7O0FBRUE7QUFDQVEsTUFBTVQsS0FBTixHQUFjQSxLQUFkOztBQUVBO0FBQ0FTLE1BQU1DLE1BQU4sR0FBZSxTQUFTQSxNQUFULENBQWdCQyxjQUFoQixFQUFnQztBQUM3QyxTQUFPVCxlQUFlTCxNQUFNZSxLQUFOLENBQVlYLFFBQVosRUFBc0JVLGNBQXRCLENBQWYsQ0FBUDtBQUNELENBRkQ7O0FBSUE7QUFDQUYsTUFBTUksTUFBTixHQUFlZixRQUFRLGlCQUFSLENBQWY7QUFDQVcsTUFBTUssV0FBTixHQUFvQmhCLFFBQVEsc0JBQVIsQ0FBcEI7QUFDQVcsTUFBTU0sUUFBTixHQUFpQmpCLFFBQVEsbUJBQVIsQ0FBakI7O0FBRUE7QUFDQVcsTUFBTU8sR0FBTixHQUFZLFNBQVNBLEdBQVQsQ0FBYUMsUUFBYixFQUF1QjtBQUNqQyxTQUFPQyxRQUFRRixHQUFSLENBQVlDLFFBQVosQ0FBUDtBQUNELENBRkQ7QUFHQVIsTUFBTVUsTUFBTixHQUFlckIsUUFBUSxrQkFBUixDQUFmOztBQUVBc0IsT0FBT0MsT0FBUCxHQUFpQlosS0FBakI7O0FBRUE7QUFDQVcsT0FBT0MsT0FBUCxDQUFlQyxPQUFmLEdBQXlCYixLQUF6QiIsImZpbGUiOiJheGlvcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iXX0=
},{"./cancel/Cancel":4,"./cancel/CancelToken":5,"./cancel/isCancel":6,"./core/Axios":7,"./defaults":14,"./helpers/bind":15,"./helpers/spread":24,"./utils":25}],4:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbmNlbC5qcyJdLCJuYW1lcyI6WyJDYW5jZWwiLCJtZXNzYWdlIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7Ozs7QUFNQSxTQUFTQSxNQUFULENBQWdCQyxPQUFoQixFQUF5QjtBQUN2QixPQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7QUFFREQsT0FBT0UsU0FBUCxDQUFpQkMsUUFBakIsR0FBNEIsU0FBU0EsUUFBVCxHQUFvQjtBQUM5QyxTQUFPLFlBQVksS0FBS0YsT0FBTCxHQUFlLE9BQU8sS0FBS0EsT0FBM0IsR0FBcUMsRUFBakQsQ0FBUDtBQUNELENBRkQ7O0FBSUFELE9BQU9FLFNBQVAsQ0FBaUJFLFVBQWpCLEdBQThCLElBQTlCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCTixNQUFqQiIsImZpbGUiOiJDYW5jZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdfQ==
},{}],5:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbmNlbFRva2VuLmpzIl0sIm5hbWVzIjpbIkNhbmNlbCIsInJlcXVpcmUiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwiUHJvbWlzZSIsInByb21pc2VFeGVjdXRvciIsInJlc29sdmUiLCJ0b2tlbiIsImNhbmNlbCIsIm1lc3NhZ2UiLCJyZWFzb24iLCJwcm90b3R5cGUiLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFNBQVNDLFFBQVEsVUFBUixDQUFiOztBQUVBOzs7Ozs7QUFNQSxTQUFTQyxXQUFULENBQXFCQyxRQUFyQixFQUErQjtBQUM3QixNQUFJLE9BQU9BLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsOEJBQWQsQ0FBTjtBQUNEOztBQUVELE1BQUlDLGNBQUo7QUFDQSxPQUFLQyxPQUFMLEdBQWUsSUFBSUMsT0FBSixDQUFZLFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQzNESixxQkFBaUJJLE9BQWpCO0FBQ0QsR0FGYyxDQUFmOztBQUlBLE1BQUlDLFFBQVEsSUFBWjtBQUNBUCxXQUFTLFNBQVNRLE1BQVQsQ0FBZ0JDLE9BQWhCLEVBQXlCO0FBQ2hDLFFBQUlGLE1BQU1HLE1BQVYsRUFBa0I7QUFDaEI7QUFDQTtBQUNEOztBQUVESCxVQUFNRyxNQUFOLEdBQWUsSUFBSWIsTUFBSixDQUFXWSxPQUFYLENBQWY7QUFDQVAsbUJBQWVLLE1BQU1HLE1BQXJCO0FBQ0QsR0FSRDtBQVNEOztBQUVEOzs7QUFHQVgsWUFBWVksU0FBWixDQUFzQkMsZ0JBQXRCLEdBQXlDLFNBQVNBLGdCQUFULEdBQTRCO0FBQ25FLE1BQUksS0FBS0YsTUFBVCxFQUFpQjtBQUNmLFVBQU0sS0FBS0EsTUFBWDtBQUNEO0FBQ0YsQ0FKRDs7QUFNQTs7OztBQUlBWCxZQUFZYyxNQUFaLEdBQXFCLFNBQVNBLE1BQVQsR0FBa0I7QUFDckMsTUFBSUwsTUFBSjtBQUNBLE1BQUlELFFBQVEsSUFBSVIsV0FBSixDQUFnQixTQUFTQyxRQUFULENBQWtCYyxDQUFsQixFQUFxQjtBQUMvQ04sYUFBU00sQ0FBVDtBQUNELEdBRlcsQ0FBWjtBQUdBLFNBQU87QUFDTFAsV0FBT0EsS0FERjtBQUVMQyxZQUFRQTtBQUZILEdBQVA7QUFJRCxDQVREOztBQVdBTyxPQUFPQyxPQUFQLEdBQWlCakIsV0FBakIiLCJmaWxlIjoiQ2FuY2VsVG9rZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIl19
},{"./Cancel":4}],6:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQ2FuY2VsLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc0NhbmNlbCIsInZhbHVlIiwiX19DQU5DRUxfXyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsS0FBbEIsRUFBeUI7QUFDeEMsU0FBTyxDQUFDLEVBQUVBLFNBQVNBLE1BQU1DLFVBQWpCLENBQVI7QUFDRCxDQUZEIiwiZmlsZSI6ImlzQ2FuY2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iXX0=
},{}],7:[function(require,module,exports){
'use strict';

var defaults = require('./../defaults');
var utils = require('./../utils');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF4aW9zLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwicmVxdWlyZSIsInV0aWxzIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJyZXNwb25zZSIsInByb3RvdHlwZSIsImNvbmZpZyIsIm1lcmdlIiwidXJsIiwiYXJndW1lbnRzIiwibWV0aG9kIiwidG9Mb3dlckNhc2UiLCJiYXNlVVJMIiwiY2hhaW4iLCJ1bmRlZmluZWQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmb3JFYWNoIiwidW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2hSZXNwb25zZUludGVyY2VwdG9ycyIsInB1c2giLCJsZW5ndGgiLCJ0aGVuIiwic2hpZnQiLCJmb3JFYWNoTWV0aG9kTm9EYXRhIiwiZm9yRWFjaE1ldGhvZFdpdGhEYXRhIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFdBQVdDLFFBQVEsZUFBUixDQUFmO0FBQ0EsSUFBSUMsUUFBUUQsUUFBUSxZQUFSLENBQVo7QUFDQSxJQUFJRSxxQkFBcUJGLFFBQVEsc0JBQVIsQ0FBekI7QUFDQSxJQUFJRyxrQkFBa0JILFFBQVEsbUJBQVIsQ0FBdEI7QUFDQSxJQUFJSSxnQkFBZ0JKLFFBQVEsNEJBQVIsQ0FBcEI7QUFDQSxJQUFJSyxjQUFjTCxRQUFRLDBCQUFSLENBQWxCOztBQUVBOzs7OztBQUtBLFNBQVNNLEtBQVQsQ0FBZUMsY0FBZixFQUErQjtBQUM3QixPQUFLUixRQUFMLEdBQWdCUSxjQUFoQjtBQUNBLE9BQUtDLFlBQUwsR0FBb0I7QUFDbEJDLGFBQVMsSUFBSVAsa0JBQUosRUFEUztBQUVsQlEsY0FBVSxJQUFJUixrQkFBSjtBQUZRLEdBQXBCO0FBSUQ7O0FBRUQ7Ozs7O0FBS0FJLE1BQU1LLFNBQU4sQ0FBZ0JGLE9BQWhCLEdBQTBCLFNBQVNBLE9BQVQsQ0FBaUJHLE1BQWpCLEVBQXlCO0FBQ2pEO0FBQ0E7QUFDQSxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUJBLGFBQVNYLE1BQU1ZLEtBQU4sQ0FBWTtBQUNuQkMsV0FBS0MsVUFBVSxDQUFWO0FBRGMsS0FBWixFQUVOQSxVQUFVLENBQVYsQ0FGTSxDQUFUO0FBR0Q7O0FBRURILFdBQVNYLE1BQU1ZLEtBQU4sQ0FBWWQsUUFBWixFQUFzQixLQUFLQSxRQUEzQixFQUFxQyxFQUFFaUIsUUFBUSxLQUFWLEVBQXJDLEVBQXdESixNQUF4RCxDQUFUO0FBQ0FBLFNBQU9JLE1BQVAsR0FBZ0JKLE9BQU9JLE1BQVAsQ0FBY0MsV0FBZCxFQUFoQjs7QUFFQTtBQUNBLE1BQUlMLE9BQU9NLE9BQVAsSUFBa0IsQ0FBQ2QsY0FBY1EsT0FBT0UsR0FBckIsQ0FBdkIsRUFBa0Q7QUFDaERGLFdBQU9FLEdBQVAsR0FBYVQsWUFBWU8sT0FBT00sT0FBbkIsRUFBNEJOLE9BQU9FLEdBQW5DLENBQWI7QUFDRDs7QUFFRDtBQUNBLE1BQUlLLFFBQVEsQ0FBQ2hCLGVBQUQsRUFBa0JpQixTQUFsQixDQUFaO0FBQ0EsTUFBSUMsVUFBVUMsUUFBUUMsT0FBUixDQUFnQlgsTUFBaEIsQ0FBZDs7QUFFQSxPQUFLSixZQUFMLENBQWtCQyxPQUFsQixDQUEwQmUsT0FBMUIsQ0FBa0MsU0FBU0MsMEJBQVQsQ0FBb0NDLFdBQXBDLEVBQWlEO0FBQ2pGUCxVQUFNUSxPQUFOLENBQWNELFlBQVlFLFNBQTFCLEVBQXFDRixZQUFZRyxRQUFqRDtBQUNELEdBRkQ7O0FBSUEsT0FBS3JCLFlBQUwsQ0FBa0JFLFFBQWxCLENBQTJCYyxPQUEzQixDQUFtQyxTQUFTTSx3QkFBVCxDQUFrQ0osV0FBbEMsRUFBK0M7QUFDaEZQLFVBQU1ZLElBQU4sQ0FBV0wsWUFBWUUsU0FBdkIsRUFBa0NGLFlBQVlHLFFBQTlDO0FBQ0QsR0FGRDs7QUFJQSxTQUFPVixNQUFNYSxNQUFiLEVBQXFCO0FBQ25CWCxjQUFVQSxRQUFRWSxJQUFSLENBQWFkLE1BQU1lLEtBQU4sRUFBYixFQUE0QmYsTUFBTWUsS0FBTixFQUE1QixDQUFWO0FBQ0Q7O0FBRUQsU0FBT2IsT0FBUDtBQUNELENBbENEOztBQW9DQTtBQUNBcEIsTUFBTXVCLE9BQU4sQ0FBYyxDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCLE1BQWxCLEVBQTBCLFNBQTFCLENBQWQsRUFBb0QsU0FBU1csbUJBQVQsQ0FBNkJuQixNQUE3QixFQUFxQztBQUN2RjtBQUNBVixRQUFNSyxTQUFOLENBQWdCSyxNQUFoQixJQUEwQixVQUFTRixHQUFULEVBQWNGLE1BQWQsRUFBc0I7QUFDOUMsV0FBTyxLQUFLSCxPQUFMLENBQWFSLE1BQU1ZLEtBQU4sQ0FBWUQsVUFBVSxFQUF0QixFQUEwQjtBQUM1Q0ksY0FBUUEsTUFEb0M7QUFFNUNGLFdBQUtBO0FBRnVDLEtBQTFCLENBQWIsQ0FBUDtBQUlELEdBTEQ7QUFNRCxDQVJEOztBQVVBYixNQUFNdUIsT0FBTixDQUFjLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsT0FBaEIsQ0FBZCxFQUF3QyxTQUFTWSxxQkFBVCxDQUErQnBCLE1BQS9CLEVBQXVDO0FBQzdFO0FBQ0FWLFFBQU1LLFNBQU4sQ0FBZ0JLLE1BQWhCLElBQTBCLFVBQVNGLEdBQVQsRUFBY3VCLElBQWQsRUFBb0J6QixNQUFwQixFQUE0QjtBQUNwRCxXQUFPLEtBQUtILE9BQUwsQ0FBYVIsTUFBTVksS0FBTixDQUFZRCxVQUFVLEVBQXRCLEVBQTBCO0FBQzVDSSxjQUFRQSxNQURvQztBQUU1Q0YsV0FBS0EsR0FGdUM7QUFHNUN1QixZQUFNQTtBQUhzQyxLQUExQixDQUFiLENBQVA7QUFLRCxHQU5EO0FBT0QsQ0FURDs7QUFXQUMsT0FBT0MsT0FBUCxHQUFpQmpDLEtBQWpCIiwiZmlsZSI6IkF4aW9zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywgdGhpcy5kZWZhdWx0cywgeyBtZXRob2Q6ICdnZXQnIH0sIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iXX0=
},{"./../defaults":14,"./../helpers/combineURLs":18,"./../helpers/isAbsoluteURL":20,"./../utils":25,"./InterceptorManager":8,"./dispatchRequest":10}],8:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkludGVyY2VwdG9yTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJoYW5kbGVycyIsInByb3RvdHlwZSIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaCIsImxlbmd0aCIsImVqZWN0IiwiaWQiLCJmb3JFYWNoIiwiZm4iLCJmb3JFYWNoSGFuZGxlciIsImgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRQyxRQUFRLFlBQVIsQ0FBWjs7QUFFQSxTQUFTQyxrQkFBVCxHQUE4QjtBQUM1QixPQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7O0FBUUFELG1CQUFtQkUsU0FBbkIsQ0FBNkJDLEdBQTdCLEdBQW1DLFNBQVNBLEdBQVQsQ0FBYUMsU0FBYixFQUF3QkMsUUFBeEIsRUFBa0M7QUFDbkUsT0FBS0osUUFBTCxDQUFjSyxJQUFkLENBQW1CO0FBQ2pCRixlQUFXQSxTQURNO0FBRWpCQyxjQUFVQTtBQUZPLEdBQW5CO0FBSUEsU0FBTyxLQUFLSixRQUFMLENBQWNNLE1BQWQsR0FBdUIsQ0FBOUI7QUFDRCxDQU5EOztBQVFBOzs7OztBQUtBUCxtQkFBbUJFLFNBQW5CLENBQTZCTSxLQUE3QixHQUFxQyxTQUFTQSxLQUFULENBQWVDLEVBQWYsRUFBbUI7QUFDdEQsTUFBSSxLQUFLUixRQUFMLENBQWNRLEVBQWQsQ0FBSixFQUF1QjtBQUNyQixTQUFLUixRQUFMLENBQWNRLEVBQWQsSUFBb0IsSUFBcEI7QUFDRDtBQUNGLENBSkQ7O0FBTUE7Ozs7Ozs7O0FBUUFULG1CQUFtQkUsU0FBbkIsQ0FBNkJRLE9BQTdCLEdBQXVDLFNBQVNBLE9BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCO0FBQzFEYixRQUFNWSxPQUFOLENBQWMsS0FBS1QsUUFBbkIsRUFBNkIsU0FBU1csY0FBVCxDQUF3QkMsQ0FBeEIsRUFBMkI7QUFDdEQsUUFBSUEsTUFBTSxJQUFWLEVBQWdCO0FBQ2RGLFNBQUdFLENBQUg7QUFDRDtBQUNGLEdBSkQ7QUFLRCxDQU5EOztBQVFBQyxPQUFPQyxPQUFQLEdBQWlCZixrQkFBakIiLCJmaWxlIjoiSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiJdfQ==
},{"./../utils":25}],9:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUVycm9yLmpzIl0sIm5hbWVzIjpbImVuaGFuY2VFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImVycm9yIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGVBQWVDLFFBQVEsZ0JBQVIsQ0FBbkI7O0FBRUE7Ozs7Ozs7Ozs7QUFVQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULENBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBc0NDLElBQXRDLEVBQTRDQyxPQUE1QyxFQUFxREMsUUFBckQsRUFBK0Q7QUFDOUUsTUFBSUMsUUFBUSxJQUFJQyxLQUFKLENBQVVOLE9BQVYsQ0FBWjtBQUNBLFNBQU9MLGFBQWFVLEtBQWIsRUFBb0JKLE1BQXBCLEVBQTRCQyxJQUE1QixFQUFrQ0MsT0FBbEMsRUFBMkNDLFFBQTNDLENBQVA7QUFDRCxDQUhEIiwiZmlsZSI6ImNyZWF0ZUVycm9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiJdfQ==
},{"./enhanceError":11}],10:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(config.data, config.headers, config.transformRequest);

  // Flatten headers
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});

  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(response.data, response.headers, config.transformResponse);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3BhdGNoUmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkZWZhdWx0cyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjb25maWciLCJjYW5jZWxUb2tlbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaGVhZGVycyIsImRhdGEiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJtZXRob2QiLCJmb3JFYWNoIiwiY2xlYW5IZWFkZXJDb25maWciLCJhZGFwdGVyIiwidGhlbiIsIm9uQWRhcHRlclJlc29sdXRpb24iLCJyZXNwb25zZSIsInRyYW5zZm9ybVJlc3BvbnNlIiwib25BZGFwdGVyUmVqZWN0aW9uIiwicmVhc29uIiwiUHJvbWlzZSIsInJlamVjdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7QUFDQSxJQUFJQyxnQkFBZ0JELFFBQVEsaUJBQVIsQ0FBcEI7QUFDQSxJQUFJRSxXQUFXRixRQUFRLG9CQUFSLENBQWY7QUFDQSxJQUFJRyxXQUFXSCxRQUFRLGFBQVIsQ0FBZjs7QUFFQTs7O0FBR0EsU0FBU0ksNEJBQVQsQ0FBc0NDLE1BQXRDLEVBQThDO0FBQzVDLE1BQUlBLE9BQU9DLFdBQVgsRUFBd0I7QUFDdEJELFdBQU9DLFdBQVAsQ0FBbUJDLGdCQUFuQjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7OztBQU1BQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLGVBQVQsQ0FBeUJMLE1BQXpCLEVBQWlDO0FBQ2hERCwrQkFBNkJDLE1BQTdCOztBQUVBO0FBQ0FBLFNBQU9NLE9BQVAsR0FBaUJOLE9BQU9NLE9BQVAsSUFBa0IsRUFBbkM7O0FBRUE7QUFDQU4sU0FBT08sSUFBUCxHQUFjWCxjQUNaSSxPQUFPTyxJQURLLEVBRVpQLE9BQU9NLE9BRkssRUFHWk4sT0FBT1EsZ0JBSEssQ0FBZDs7QUFNQTtBQUNBUixTQUFPTSxPQUFQLEdBQWlCWixNQUFNZSxLQUFOLENBQ2ZULE9BQU9NLE9BQVAsQ0FBZUksTUFBZixJQUF5QixFQURWLEVBRWZWLE9BQU9NLE9BQVAsQ0FBZU4sT0FBT1csTUFBdEIsS0FBaUMsRUFGbEIsRUFHZlgsT0FBT00sT0FBUCxJQUFrQixFQUhILENBQWpCOztBQU1BWixRQUFNa0IsT0FBTixDQUNFLENBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0IsTUFBbEIsRUFBMEIsTUFBMUIsRUFBa0MsS0FBbEMsRUFBeUMsT0FBekMsRUFBa0QsUUFBbEQsQ0FERixFQUVFLFNBQVNDLGlCQUFULENBQTJCRixNQUEzQixFQUFtQztBQUNqQyxXQUFPWCxPQUFPTSxPQUFQLENBQWVLLE1BQWYsQ0FBUDtBQUNELEdBSkg7O0FBT0EsTUFBSUcsVUFBVWQsT0FBT2MsT0FBUCxJQUFrQmhCLFNBQVNnQixPQUF6Qzs7QUFFQSxTQUFPQSxRQUFRZCxNQUFSLEVBQWdCZSxJQUFoQixDQUFxQixTQUFTQyxtQkFBVCxDQUE2QkMsUUFBN0IsRUFBdUM7QUFDakVsQixpQ0FBNkJDLE1BQTdCOztBQUVBO0FBQ0FpQixhQUFTVixJQUFULEdBQWdCWCxjQUNkcUIsU0FBU1YsSUFESyxFQUVkVSxTQUFTWCxPQUZLLEVBR2ROLE9BQU9rQixpQkFITyxDQUFoQjs7QUFNQSxXQUFPRCxRQUFQO0FBQ0QsR0FYTSxFQVdKLFNBQVNFLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQztBQUNyQyxRQUFJLENBQUN2QixTQUFTdUIsTUFBVCxDQUFMLEVBQXVCO0FBQ3JCckIsbUNBQTZCQyxNQUE3Qjs7QUFFQTtBQUNBLFVBQUlvQixVQUFVQSxPQUFPSCxRQUFyQixFQUErQjtBQUM3QkcsZUFBT0gsUUFBUCxDQUFnQlYsSUFBaEIsR0FBdUJYLGNBQ3JCd0IsT0FBT0gsUUFBUCxDQUFnQlYsSUFESyxFQUVyQmEsT0FBT0gsUUFBUCxDQUFnQlgsT0FGSyxFQUdyQk4sT0FBT2tCLGlCQUhjLENBQXZCO0FBS0Q7QUFDRjs7QUFFRCxXQUFPRyxRQUFRQyxNQUFSLENBQWVGLE1BQWYsQ0FBUDtBQUNELEdBMUJNLENBQVA7QUEyQkQsQ0F4REQiLCJmaWxlIjoiZGlzcGF0Y2hSZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIl19
},{"../cancel/isCancel":6,"../defaults":14,"./../utils":25,"./transformData":13}],11:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuaGFuY2VFcnJvci5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZW5oYW5jZUVycm9yIiwiZXJyb3IiLCJjb25maWciLCJjb2RlIiwicmVxdWVzdCIsInJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7Ozs7Ozs7QUFVQUEsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxZQUFULENBQXNCQyxLQUF0QixFQUE2QkMsTUFBN0IsRUFBcUNDLElBQXJDLEVBQTJDQyxPQUEzQyxFQUFvREMsUUFBcEQsRUFBOEQ7QUFDN0VKLFFBQU1DLE1BQU4sR0FBZUEsTUFBZjtBQUNBLE1BQUlDLElBQUosRUFBVTtBQUNSRixVQUFNRSxJQUFOLEdBQWFBLElBQWI7QUFDRDtBQUNERixRQUFNRyxPQUFOLEdBQWdCQSxPQUFoQjtBQUNBSCxRQUFNSSxRQUFOLEdBQWlCQSxRQUFqQjtBQUNBLFNBQU9KLEtBQVA7QUFDRCxDQVJEIiwiZmlsZSI6ImVuaGFuY2VFcnJvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXX0=
},{}],12:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHRsZS5qcyJdLCJuYW1lcyI6WyJjcmVhdGVFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0dGxlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3BvbnNlIiwidmFsaWRhdGVTdGF0dXMiLCJjb25maWciLCJzdGF0dXMiLCJyZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxjQUFjQyxRQUFRLGVBQVIsQ0FBbEI7O0FBRUE7Ozs7Ozs7QUFPQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxNQUFULENBQWdCQyxPQUFoQixFQUF5QkMsTUFBekIsRUFBaUNDLFFBQWpDLEVBQTJDO0FBQzFELE1BQUlDLGlCQUFpQkQsU0FBU0UsTUFBVCxDQUFnQkQsY0FBckM7QUFDQTtBQUNBLE1BQUksQ0FBQ0QsU0FBU0csTUFBVixJQUFvQixDQUFDRixjQUFyQixJQUF1Q0EsZUFBZUQsU0FBU0csTUFBeEIsQ0FBM0MsRUFBNEU7QUFDMUVMLFlBQVFFLFFBQVI7QUFDRCxHQUZELE1BRU87QUFDTEQsV0FBT04sWUFDTCxxQ0FBcUNPLFNBQVNHLE1BRHpDLEVBRUxILFNBQVNFLE1BRkosRUFHTCxJQUhLLEVBSUxGLFNBQVNJLE9BSkosRUFLTEosUUFMSyxDQUFQO0FBT0Q7QUFDRixDQWREIiwiZmlsZSI6InNldHRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiJdfQ==
},{"./createError":9}],13:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybURhdGEuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRyYW5zZm9ybURhdGEiLCJkYXRhIiwiaGVhZGVycyIsImZucyIsImZvckVhY2giLCJ0cmFuc2Zvcm0iLCJmbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7O0FBRUE7Ozs7Ozs7O0FBUUFDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLE9BQTdCLEVBQXNDQyxHQUF0QyxFQUEyQztBQUMxRDtBQUNBUCxRQUFNUSxPQUFOLENBQWNELEdBQWQsRUFBbUIsU0FBU0UsU0FBVCxDQUFtQkMsRUFBbkIsRUFBdUI7QUFDeENMLFdBQU9LLEdBQUdMLElBQUgsRUFBU0MsT0FBVCxDQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPRCxJQUFQO0FBQ0QsQ0FQRCIsImZpbGUiOiJ0cmFuc2Zvcm1EYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIl19
},{"./../utils":25}],14:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {/* Ignore */}
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHRzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJ2YWx1ZSIsImlzVW5kZWZpbmVkIiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9jZXNzIiwiZGVmYXVsdHMiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsImlzRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJ0b1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJmb3JFYWNoIiwiZm9yRWFjaE1ldGhvZE5vRGF0YSIsIm1ldGhvZCIsImZvckVhY2hNZXRob2RXaXRoRGF0YSIsIm1lcmdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxTQUFSLENBQVo7QUFDQSxJQUFJQyxzQkFBc0JELFFBQVEsK0JBQVIsQ0FBMUI7O0FBRUEsSUFBSUUsdUJBQXVCO0FBQ3pCLGtCQUFnQjtBQURTLENBQTNCOztBQUlBLFNBQVNDLHFCQUFULENBQStCQyxPQUEvQixFQUF3Q0MsS0FBeEMsRUFBK0M7QUFDN0MsTUFBSSxDQUFDTixNQUFNTyxXQUFOLENBQWtCRixPQUFsQixDQUFELElBQStCTCxNQUFNTyxXQUFOLENBQWtCRixRQUFRLGNB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QjtBQUNELENBRkQ7O0FBSUF3QyxPQUFPQyxPQUFQLEdBQWlCaEMsUUFBakIiLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiJdfQ==
}).call(this,require("e/U+97"))
},{"./adapters/http":2,"./adapters/xhr":2,"./helpers/normalizeHeaderName":22,"./utils":25,"e/U+97":29}],15:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJ3cmFwIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxJQUFULENBQWNDLEVBQWQsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzFDLFNBQU8sU0FBU0MsSUFBVCxHQUFnQjtBQUNyQixRQUFJQyxPQUFPLElBQUlDLEtBQUosQ0FBVUMsVUFBVUMsTUFBcEIsQ0FBWDtBQUNBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixLQUFLRyxNQUF6QixFQUFpQ0MsR0FBakMsRUFBc0M7QUFDcENKLFdBQUtJLENBQUwsSUFBVUYsVUFBVUUsQ0FBVixDQUFWO0FBQ0Q7QUFDRCxXQUFPUCxHQUFHUSxLQUFILENBQVNQLE9BQVQsRUFBa0JFLElBQWxCLENBQVA7QUFDRCxHQU5EO0FBT0QsQ0FSRCIsImZpbGUiOiJiaW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl19
},{}],16:[function(require,module,exports){
'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error();
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
  // initialize result and counter
  var block, charCode, idx = 0, map = chars;
  // if the next str index does not exist:
  //   change the mapping table to "="
  //   check if d has no fractional digits
  str.charAt(idx | 0) || (map = '=', idx % 1);
  // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ0b2EuanMiXSwibmFtZXMiOlsiY2hhcnMiLCJFIiwibWVzc2FnZSIsInByb3RvdHlwZSIsIkVycm9yIiwiY29kZSIsIm5hbWUiLCJidG9hIiwiaW5wdXQiLCJzdHIiLCJTdHJpbmciLCJvdXRwdXQiLCJibG9jayIsImNoYXJDb2RlIiwiaWR4IiwibWFwIiwiY2hhckF0IiwiY2hhckNvZGVBdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBLElBQUlBLFFBQVEsbUVBQVo7O0FBRUEsU0FBU0MsQ0FBVCxHQUFhO0FBQ1gsT0FBS0MsT0FBTCxHQUFlLHNDQUFmO0FBQ0Q7QUFDREQsRUFBRUUsU0FBRixHQUFjLElBQUlDLEtBQUosRUFBZDtBQUNBSCxFQUFFRSxTQUFGLENBQVlFLElBQVosR0FBbUIsQ0FBbkI7QUFDQUosRUFBRUUsU0FBRixDQUFZRyxJQUFaLEdBQW1CLHVCQUFuQjs7QUFFQSxTQUFTQyxJQUFULENBQWNDLEtBQWQsRUFBcUI7QUFDbkIsTUFBSUMsTUFBTUMsT0FBT0YsS0FBUCxDQUFWO0FBQ0EsTUFBSUcsU0FBUyxFQUFiO0FBQ0E7QUFDRTtBQUNBLE1BQUlDLEtBQUosRUFBV0MsUUFBWCxFQUFxQkMsTUFBTSxDQUEzQixFQUE4QkMsTUFBTWYsS0FGdEM7QUFHRTtBQUNBO0FBQ0E7QUFDQVMsTUFBSU8sTUFBSixDQUFXRixNQUFNLENBQWpCLE1BQXdCQyxNQUFNLEdBQU4sRUFBV0QsTUFBTSxDQUF6QyxDQU5GO0FBT0U7QUFDQUgsWUFBVUksSUFBSUMsTUFBSixDQUFXLEtBQUtKLFNBQVMsSUFBSUUsTUFBTSxDQUFOLEdBQVUsQ0FBdkMsQ0FSWixFQVNFO0FBQ0FELGVBQVdKLElBQUlRLFVBQUosQ0FBZUgsT0FBTyxJQUFJLENBQTFCLENBQVg7QUFDQSxRQUFJRCxXQUFXLElBQWYsRUFBcUI7QUFDbkIsWUFBTSxJQUFJWixDQUFKLEVBQU47QUFDRDtBQUNEVyxZQUFRQSxTQUFTLENBQVQsR0FBYUMsUUFBckI7QUFDRDtBQUNELFNBQU9GLE1BQVA7QUFDRDs7QUFFRE8sT0FBT0MsT0FBUCxHQUFpQlosSUFBakIiLCJmaWxlIjoiYnRvYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiJdfQ==
},{}],17:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkVVJMLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImVuY29kZSIsInZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsImlzVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJwYXJ0cyIsImZvckVhY2giLCJzZXJpYWxpemUiLCJrZXkiLCJpc0FycmF5IiwicGFyc2VWYWx1ZSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7O0FBRUEsU0FBU0MsTUFBVCxDQUFnQkMsR0FBaEIsRUFBcUI7QUFDbkIsU0FBT0MsbUJBQW1CRCxHQUFuQixFQUNMRSxPQURLLENBQ0csT0FESCxFQUNZLEdBRFosRUFFTEEsT0FGSyxDQUVHLE9BRkgsRUFFWSxHQUZaLEVBR0xBLE9BSEssQ0FHRyxNQUhILEVBR1csR0FIWCxFQUlMQSxPQUpLLENBSUcsT0FKSCxFQUlZLEdBSlosRUFLTEEsT0FMSyxDQUtHLE1BTEgsRUFLVyxHQUxYLEVBTUxBLE9BTkssQ0FNRyxPQU5ILEVBTVksR0FOWixFQU9MQSxPQVBLLENBT0csT0FQSCxFQU9ZLEdBUFosQ0FBUDtBQVFEOztBQUVEOzs7Ozs7O0FBT0FDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUJDLE1BQXZCLEVBQStCQyxnQkFBL0IsRUFBaUQ7QUFDaEU7QUFDQSxNQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYLFdBQU9ELEdBQVA7QUFDRDs7QUFFRCxNQUFJRyxnQkFBSjtBQUNBLE1BQUlELGdCQUFKLEVBQXNCO0FBQ3BCQyx1QkFBbUJELGlCQUFpQkQsTUFBakIsQ0FBbkI7QUFDRCxHQUZELE1BRU8sSUFBSVYsTUFBTWEsaUJBQU4sQ0FBd0JILE1BQXhCLENBQUosRUFBcUM7QUFDMUNFLHVCQUFtQkYsT0FBT0ksUUFBUCxFQUFuQjtBQUNELEdBRk0sTUFFQTtBQUNMLFFBQUlDLFFBQVEsRUFBWjs7QUFFQWYsVUFBTWdCLE9BQU4sQ0FBY04sTUFBZCxFQUFzQixTQUFTTyxTQUFULENBQW1CZCxHQUFuQixFQUF3QmUsR0FBeEIsRUFBNkI7QUFDakQsVUFBSWYsUUFBUSxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxXQUFuQyxFQUFnRDtBQUM5QztBQUNEOztBQUVELFVBQUlILE1BQU1tQixPQUFOLENBQWNoQixHQUFkLENBQUosRUFBd0I7QUFDdEJlLGNBQU1BLE1BQU0sSUFBWjtBQUNEOztBQUVELFVBQUksQ0FBQ2xCLE1BQU1tQixPQUFOLENBQWNoQixHQUFkLENBQUwsRUFBeUI7QUFDdkJBLGNBQU0sQ0FBQ0EsR0FBRCxDQUFOO0FBQ0Q7O0FBRURILFlBQU1nQixPQUFOLENBQWNiLEdBQWQsRUFBbUIsU0FBU2lCLFVBQVQsQ0FBb0JDLENBQXBCLEVBQXVCO0FBQ3hDLFlBQUlyQixNQUFNc0IsTUFBTixDQUFhRCxDQUFiLENBQUosRUFBcUI7QUFDbkJBLGNBQUlBLEVBQUVFLFdBQUYsRUFBSjtBQUNELFNBRkQsTUFFTyxJQUFJdkIsTUFBTXdCLFFBQU4sQ0FBZUgsQ0FBZixDQUFKLEVBQXVCO0FBQzVCQSxjQUFJSSxLQUFLQyxTQUFMLENBQWVMLENBQWYsQ0FBSjtBQUNEO0FBQ0ROLGNBQU1ZLElBQU4sQ0FBV3pCLE9BQU9nQixHQUFQLElBQWMsR0FBZCxHQUFvQmhCLE9BQU9tQixDQUFQLENBQS9CO0FBQ0QsT0FQRDtBQVFELEtBckJEOztBQXVCQVQsdUJBQW1CRyxNQUFNYSxJQUFOLENBQVcsR0FBWCxDQUFuQjtBQUNEOztBQUVELE1BQUloQixnQkFBSixFQUFzQjtBQUNwQkgsV0FBTyxDQUFDQSxJQUFJb0IsT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBQyxDQUF0QixHQUEwQixHQUExQixHQUFnQyxHQUFqQyxJQUF3Q2pCLGdCQUEvQztBQUNEOztBQUVELFNBQU9ILEdBQVA7QUFDRCxDQTdDRCIsImZpbGUiOiJidWlsZFVSTC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiJdfQ==
},{"./../utils":25}],18:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbWJpbmVVUkxzLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7Ozs7OztBQU9BQSxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCQyxXQUE5QixFQUEyQztBQUMxRCxTQUFPQSxjQUNIRCxRQUFRRSxPQUFSLENBQWdCLE1BQWhCLEVBQXdCLEVBQXhCLElBQThCLEdBQTlCLEdBQW9DRCxZQUFZQyxPQUFaLENBQW9CLE1BQXBCLEVBQTRCLEVBQTVCLENBRGpDLEdBRUhGLE9BRko7QUFHRCxDQUpEIiwiZmlsZSI6ImNvbWJpbmVVUkxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIl19
},{}],19:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },

    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },

    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :

// Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvb2tpZXMuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwic3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJuYW1lIiwidmFsdWUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJqb2luIiwicmVhZCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93Iiwibm9uU3RhbmRhcmRCcm93c2VyRW52Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRQyxRQUFRLFlBQVIsQ0FBWjs7QUFFQUMsT0FBT0MsT0FBUCxHQUNFSCxNQUFNSSxvQkFBTjs7QUFFQTtBQUNDLFNBQVNDLGtCQUFULEdBQThCO0FBQzdCLFNBQU87QUFDTEMsV0FBTyxTQUFTQSxLQUFULENBQWVDLElBQWYsRUFBcUJDLEtBQXJCLEVBQTRCQyxPQUE1QixFQUFxQ0MsSUFBckMsRUFBMkNDLE1BQTNDLEVBQW1EQyxNQUFuRCxFQUEyRDtBQUNoRSxVQUFJQyxTQUFTLEVBQWI7QUFDQUEsYUFBT0MsSUFBUCxDQUFZUCxPQUFPLEdBQVAsR0FBYVEsbUJBQW1CUCxLQUFuQixDQUF6Qjs7QUFFQSxVQUFJUixNQUFNZ0IsUUFBTixDQUFlUCxPQUFmLENBQUosRUFBNkI7QUFDM0JJLGVBQU9DLElBQVAsQ0FBWSxhQUFhLElBQUlHLElBQUosQ0FBU1IsT0FBVCxFQUFrQlMsV0FBbEIsRUFBekI7QUFDRDs7QUFFRCxVQUFJbEIsTUFBTW1CLFFBQU4sQ0FBZVQsSUFBZixDQUFKLEVBQTBCO0FBQ3hCRyxlQUFPQyxJQUFQLENBQVksVUFBVUosSUFBdEI7QUFDRDs7QUFFRCxVQUFJVixNQUFNbUIsUUFBTixDQUFlUixNQUFmLENBQUosRUFBNEI7QUFDMUJFLGVBQU9DLElBQVAsQ0FBWSxZQUFZSCxNQUF4QjtBQUNEOztBQUVELFVBQUlDLFdBQVcsSUFBZixFQUFxQjtBQUNuQkMsZUFBT0MsSUFBUCxDQUFZLFFBQVo7QUFDRDs7QUFFRE0sZUFBU1AsTUFBVCxHQUFrQkEsT0FBT1EsSUFBUCxDQUFZLElBQVosQ0FBbEI7QUFDRCxLQXRCSTs7QUF3QkxDLFVBQU0sU0FBU0EsSUFBVCxDQUFjZixJQUFkLEVBQW9CO0FBQ3hCLFVBQUlnQixRQUFRSCxTQUFTUCxNQUFULENBQWdCVSxLQUFoQixDQUFzQixJQUFJQyxNQUFKLENBQVcsZUFBZWpCLElBQWYsR0FBc0IsV0FBakMsQ0FBdEIsQ0FBWjtBQUNBLGFBQVFnQixRQUFRRSxtQkFBbUJGLE1BQU0sQ0FBTixDQUFuQixDQUFSLEdBQXVDLElBQS9DO0FBQ0QsS0EzQkk7O0FBNkJMRyxZQUFRLFNBQVNBLE1BQVQsQ0FBZ0JuQixJQUFoQixFQUFzQjtBQUM1QixXQUFLRCxLQUFMLENBQVdDLElBQVgsRUFBaUIsRUFBakIsRUFBcUJVLEtBQUtVLEdBQUwsS0FBYSxRQUFsQztBQUNEO0FBL0JJLEdBQVA7QUFpQ0QsQ0FsQ0QsRUFIQTs7QUF1Q0E7QUFDQyxTQUFTQyxxQkFBVCxHQUFpQztBQUNoQyxTQUFPO0FBQ0x0QixXQUFPLFNBQVNBLEtBQVQsR0FBaUIsQ0FBRSxDQURyQjtBQUVMZ0IsVUFBTSxTQUFTQSxJQUFULEdBQWdCO0FBQUUsYUFBTyxJQUFQO0FBQWMsS0FGakM7QUFHTEksWUFBUSxTQUFTQSxNQUFULEdBQWtCLENBQUU7QUFIdkIsR0FBUDtBQUtELENBTkQsRUF6Q0YiLCJmaWxlIjoiY29va2llcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iXX0=
},{"./../utils":25}],20:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return (/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url)
  );
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQWJzb2x1dGVVUkwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQWJzb2x1dGVVUkwiLCJ1cmwiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7OztBQU1BQSxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLGFBQVQsQ0FBdUJDLEdBQXZCLEVBQTRCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFNBQU8saUNBQWdDQyxJQUFoQyxDQUFxQ0QsR0FBckM7QUFBUDtBQUNELENBTEQiLCJmaWxlIjoiaXNBYnNvbHV0ZVVSTC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIl19
},{}],21:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;

  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */
  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);

  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */
  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() :

// Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzVVJMU2FtZU9yaWdpbi5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJtc2llIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInVybCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsInJlcGxhY2UiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJpc1VSTFNhbWVPcmlnaW4iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwiaXNTdHJpbmciLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFFBQVFDLFFBQVEsWUFBUixDQUFaOztBQUVBQyxPQUFPQyxPQUFQLEdBQ0VILE1BQU1JLG9CQUFOOztBQUVBO0FBQ0E7QUFDQyxTQUFTQyxrQkFBVCxHQUE4QjtBQUM3QixNQUFJQyxPQUFPLGtCQUFrQkMsSUFBbEIsQ0FBdUJDLFVBQVVDLFNBQWpDLENBQVg7QUFDQSxNQUFJQyxpQkFBaUJDLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBckI7QUFDQSxNQUFJQyxTQUFKOztBQUVBOzs7Ozs7QUFNQSxXQUFTQyxVQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUN2QixRQUFJQyxPQUFPRCxHQUFYOztBQUVBLFFBQUlULElBQUosRUFBVTtBQUNSO0FBQ0FJLHFCQUFlTyxZQUFmLENBQTRCLE1BQTVCLEVBQW9DRCxJQUFwQztBQUNBQSxhQUFPTixlQUFlTSxJQUF0QjtBQUNEOztBQUVETixtQkFBZU8sWUFBZixDQUE0QixNQUE1QixFQUFvQ0QsSUFBcEM7O0FBRUE7QUFDQSxXQUFPO0FBQ0xBLFlBQU1OLGVBQWVNLElBRGhCO0FBRUxFLGdCQUFVUixlQUFlUSxRQUFmLEdBQTBCUixlQUFlUSxRQUFmLENBQXdCQyxPQUF4QixDQUFnQyxJQUFoQyxFQUFzQyxFQUF0QyxDQUExQixHQUFzRSxFQUYzRTtBQUdMQyxZQUFNVixlQUFlVSxJQUhoQjtBQUlMQyxjQUFRWCxlQUFlVyxNQUFmLEdBQXdCWCxlQUFlVyxNQUFmLENBQXNCRixPQUF0QixDQUE4QixLQUE5QixFQUFxQyxFQUFyQyxDQUF4QixHQUFtRSxFQUp0RTtBQUtMRyxZQUFNWixlQUFlWSxJQUFmLEdBQXNCWixlQUFlWSxJQUFmLENBQW9CSCxPQUFwQixDQUE0QixJQUE1QixFQUFrQyxFQUFsQyxDQUF0QixHQUE4RCxFQUwvRDtBQU1MSSxnQkFBVWIsZUFBZWEsUUFOcEI7QUFPTEMsWUFBTWQsZUFBZWMsSUFQaEI7QUFRTEMsZ0JBQVdmLGVBQWVlLFFBQWYsQ0FBd0JDLE1BQXhCLENBQStCLENBQS9CLE1BQXNDLEdBQXZDLEdBQ0FoQixlQUFlZSxRQURmLEdBRUEsTUFBTWYsZUFBZWU7QUFWMUIsS0FBUDtBQVlEOztBQUVEWixjQUFZQyxXQUFXYSxPQUFPQyxRQUFQLENBQWdCWixJQUEzQixDQUFaOztBQUVBOzs7Ozs7QUFNQSxTQUFPLFNBQVNhLGVBQVQsQ0FBeUJDLFVBQXpCLEVBQXFDO0FBQzFDLFFBQUlDLFNBQVUvQixNQUFNZ0MsUUFBTixDQUFlRixVQUFmLENBQUQsR0FBK0JoQixXQUFXZ0IsVUFBWCxDQUEvQixHQUF3REEsVUFBckU7QUFDQSxXQUFRQyxPQUFPYixRQUFQLEtBQW9CTCxVQUFVSyxRQUE5QixJQUNGYSxPQUFPWCxJQUFQLEtBQWdCUCxVQUFVTyxJQURoQztBQUVELEdBSkQ7QUFLRCxDQWxERCxFQUpBOztBQXdEQTtBQUNDLFNBQVNhLHFCQUFULEdBQWlDO0FBQ2hDLFNBQU8sU0FBU0osZUFBVCxHQUEyQjtBQUNoQyxXQUFPLElBQVA7QUFDRCxHQUZEO0FBR0QsQ0FKRCxFQTFERiIsImZpbGUiOiJpc1VSTFNhbWVPcmlnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIl19
},{"./../utils":25}],22:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vcm1hbGl6ZUhlYWRlck5hbWUuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJoZWFkZXJzIiwibm9ybWFsaXplZE5hbWUiLCJmb3JFYWNoIiwicHJvY2Vzc0hlYWRlciIsInZhbHVlIiwibmFtZSIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRQyxRQUFRLFVBQVIsQ0FBWjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxtQkFBVCxDQUE2QkMsT0FBN0IsRUFBc0NDLGNBQXRDLEVBQXNEO0FBQ3JFTixRQUFNTyxPQUFOLENBQWNGLE9BQWQsRUFBdUIsU0FBU0csYUFBVCxDQUF1QkMsS0FBdkIsRUFBOEJDLElBQTlCLEVBQW9DO0FBQ3pELFFBQUlBLFNBQVNKLGNBQVQsSUFBMkJJLEtBQUtDLFdBQUwsT0FBdUJMLGVBQWVLLFdBQWYsRUFBdEQsRUFBb0Y7QUFDbEZOLGNBQVFDLGNBQVIsSUFBMEJHLEtBQTFCO0FBQ0EsYUFBT0osUUFBUUssSUFBUixDQUFQO0FBQ0Q7QUFDRixHQUxEO0FBTUQsQ0FQRCIsImZpbGUiOiJub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIl19
},{"../utils":25}],23:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlSGVhZGVycy5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VIZWFkZXJzIiwiaGVhZGVycyIsInBhcnNlZCIsImtleSIsInZhbCIsImkiLCJmb3JFYWNoIiwic3BsaXQiLCJwYXJzZXIiLCJsaW5lIiwiaW5kZXhPZiIsInRyaW0iLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUFhQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxZQUFULENBQXNCQyxPQUF0QixFQUErQjtBQUM5QyxNQUFJQyxTQUFTLEVBQWI7QUFDQSxNQUFJQyxHQUFKO0FBQ0EsTUFBSUMsR0FBSjtBQUNBLE1BQUlDLENBQUo7O0FBRUEsTUFBSSxDQUFDSixPQUFMLEVBQWM7QUFBRSxXQUFPQyxNQUFQO0FBQWdCOztBQUVoQ04sUUFBTVUsT0FBTixDQUFjTCxRQUFRTSxLQUFSLENBQWMsSUFBZCxDQUFkLEVBQW1DLFNBQVNDLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCO0FBQ3ZESixRQUFJSSxLQUFLQyxPQUFMLENBQWEsR0FBYixDQUFKO0FBQ0FQLFVBQU1QLE1BQU1lLElBQU4sQ0FBV0YsS0FBS0csTUFBTCxDQUFZLENBQVosRUFBZVAsQ0FBZixDQUFYLEVBQThCUSxXQUE5QixFQUFOO0FBQ0FULFVBQU1SLE1BQU1lLElBQU4sQ0FBV0YsS0FBS0csTUFBTCxDQUFZUCxJQUFJLENBQWhCLENBQVgsQ0FBTjs7QUFFQSxRQUFJRixHQUFKLEVBQVM7QUFDUEQsYUFBT0MsR0FBUCxJQUFjRCxPQUFPQyxHQUFQLElBQWNELE9BQU9DLEdBQVAsSUFBYyxJQUFkLEdBQXFCQyxHQUFuQyxHQUF5Q0EsR0FBdkQ7QUFDRDtBQUNGLEdBUkQ7O0FBVUEsU0FBT0YsTUFBUDtBQUNELENBbkJEIiwiZmlsZSI6InBhcnNlSGVhZGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiJdfQ==
},{"./../utils":25}],24:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwcmVhZC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3ByZWFkIiwiY2FsbGJhY2siLCJ3cmFwIiwiYXJyIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsTUFBVCxDQUFnQkMsUUFBaEIsRUFBMEI7QUFDekMsU0FBTyxTQUFTQyxJQUFULENBQWNDLEdBQWQsRUFBbUI7QUFDeEIsV0FBT0YsU0FBU0csS0FBVCxDQUFlLElBQWYsRUFBcUJELEdBQXJCLENBQVA7QUFDRCxHQUZEO0FBR0QsQ0FKRCIsImZpbGUiOiJzcHJlYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iXX0=
},{}],25:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var bind = require('./helpers/bind');
var isBuffer = require('is-buffer');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge() /* obj1, obj2, obj3, ... */{
  var result = {};
  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./helpers/bind":15,"is-buffer":28}],26:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Generated by CoffeeScript 1.7.1
(function () {
  var Color,
      DecomposedMatrix,
      DecomposedMatrix2D,
      InterpolableArray,
      InterpolableColor,
      InterpolableNumber,
      InterpolableObject,
      InterpolableString,
      Matrix,
      Matrix2D,
      Set,
      Vector,
      addTimeout,
      addUnitsToNumberInterpolables,
      animationTick,
      animations,
      animationsTimeouts,
      applyDefaults,
      applyFrame,
      applyProperties,
      baseSVG,
      cacheFn,
      cancelTimeout,
      clone,
      createInterpolable,
      defaultValueForKey,
      degProperties,
      dynamics,
      getCurrentProperties,
      interpolate,
      isDocumentVisible,
      isSVGElement,
      lastTime,
      leftDelayForTimeout,
      makeArrayFn,
      observeVisibilityChange,
      parseProperties,
      prefixFor,
      propertyWithPrefix,
      pxProperties,
      rAF,
      roundf,
      runLoopPaused,
      runLoopRunning,
      _runLoopTick,
      setRealTimeout,
      slow,
      slowRatio,
      startAnimation,
      startRunLoop,
      svgProperties,
      timeBeforeVisibilityChange,
      timeoutLastId,
      timeouts,
      toDashed,
      transformProperties,
      transformValueForProperty,
      unitForProperty,
      __bind = function __bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  };

  isDocumentVisible = function isDocumentVisible() {
    return document.visibilityState === "visible" || dynamics.tests != null;
  };

  observeVisibilityChange = function () {
    var fns;
    fns = [];
    if (typeof document !== "undefined" && document !== null) {
      document.addEventListener("visibilitychange", function () {
        var fn, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fns.length; _i < _len; _i++) {
          fn = fns[_i];
          _results.push(fn(isDocumentVisible()));
        }
        return _results;
      });
    }
    return function (fn) {
      return fns.push(fn);
    };
  }();

  clone = function clone(o) {
    var k, newO, v;
    newO = {};
    for (k in o) {
      v = o[k];
      newO[k] = v;
    }
    return newO;
  };

  cacheFn = function cacheFn(func) {
    var data;
    data = {};
    return function () {
      var k, key, result, _i, _len;
      key = "";
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        k = arguments[_i];
        key += k.toString() + ",";
      }
      result = data[key];
      if (!result) {
        data[key] = result = func.apply(this, arguments);
      }
      return result;
    };
  };

  makeArrayFn = function makeArrayFn(fn) {
    return function (el) {
      var args, i, res;
      if (el instanceof Array || el instanceof NodeList || el instanceof HTMLCollection) {
        res = function () {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = el.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            args = Array.prototype.slice.call(arguments, 1);
            args.splice(0, 0, el[i]);
            _results.push(fn.apply(this, args));
          }
          return _results;
        }.apply(this, arguments);
        return res;
      }
      return fn.apply(this, arguments);
    };
  };

  applyDefaults = function applyDefaults(options, defaults) {
    var k, v, _results;
    _results = [];
    for (k in defaults) {
      v = defaults[k];
      _results.push(options[k] != null ? options[k] : options[k] = v);
    }
    return _results;
  };

  applyFrame = function applyFrame(el, properties) {
    var k, v, _results;
    if (el.style != null) {
      return applyProperties(el, properties);
    } else {
      _results = [];
      for (k in properties) {
        v = properties[k];
        _results.push(el[k] = v.format());
      }
      return _results;
    }
  };

  applyProperties = function applyProperties(el, properties) {
    var isSVG, k, matrix, transforms, v;
    properties = parseProperties(properties);
    transforms = [];
    isSVG = isSVGElement(el);
    for (k in properties) {
      v = properties[k];
      if (transformProperties.contains(k)) {
        transforms.push([k, v]);
      } else {
        if (v.format != null) {
          v = v.format();
        }
        if (typeof v === 'number') {
          v = "" + v + unitForProperty(k, v);
        }
        if (el.hasAttribute != null && el.hasAttribute(k)) {
          el.setAttribute(k, v);
        } else if (el.style != null) {
          el.style[propertyWithPrefix(k)] = v;
        }
        if (k in el) {
          el[k] = v;
        }
      }
    }
    if (transforms.length > 0) {
      if (isSVG) {
        matrix = new Matrix2D();
        matrix.applyProperties(transforms);
        return el.setAttribute("transform", matrix.decompose().format());
      } else {
        v = transforms.map(function (transform) {
          return transformValueForProperty(transform[0], transform[1]);
        }).join(" ");
        return el.style[propertyWithPrefix("transform")] = v;
      }
    }
  };

  isSVGElement = function isSVGElement(el) {
    var _ref, _ref1;
    if (typeof SVGElement !== "undefined" && SVGElement !== null && typeof SVGSVGElement !== "undefined" && SVGSVGElement !== null) {
      return el instanceof SVGElement && !(el instanceof SVGSVGElement);
    } else {
      return (_ref = (_ref1 = dynamics.tests) != null ? typeof _ref1.isSVG === "function" ? _ref1.isSVG(el) : void 0 : void 0) != null ? _ref : false;
    }
  };

  roundf = function roundf(v, decimal) {
    var d;
    d = Math.pow(10, decimal);
    return Math.round(v * d) / d;
  };

  Set = function () {
    function Set(array) {
      var v, _i, _len;
      this.obj = {};
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        v = array[_i];
        this.obj[v] = 1;
      }
    }

    Set.prototype.contains = function (v) {
      return this.obj[v] === 1;
    };

    return Set;
  }();

  toDashed = function toDashed(str) {
    return str.replace(/([A-Z])/g, function ($1) {
      return "-" + $1.toLowerCase();
    });
  };

  pxProperties = new Set('marginTop,marginLeft,marginBottom,marginRight,paddingTop,paddingLeft,paddingBottom,paddingRight,top,left,bottom,right,translateX,translateY,translateZ,perspectiveX,perspectiveY,perspectiveZ,width,height,maxWidth,maxHeight,minWidth,minHeight,borderRadius'.split(','));

  degProperties = new Set('rotate,rotateX,rotateY,rotateZ,skew,skewX,skewY,skewZ'.split(','));

  transformProperties = new Set('translate,translateX,translateY,translateZ,scale,scaleX,scaleY,scaleZ,rotate,rotateX,rotateY,rotateZ,rotateC,rotateCX,rotateCY,skew,skewX,skewY,skewZ,perspective'.split(','));

  svgProperties = new Set('accent-height,ascent,azimuth,baseFrequency,baseline-shift,bias,cx,cy,d,diffuseConstant,divisor,dx,dy,elevation,filterRes,fx,fy,gradientTransform,height,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,letter-spacing,limitingConeAngle,markerHeight,markerWidth,numOctaves,order,overline-position,overline-thickness,pathLength,points,pointsAtX,pointsAtY,pointsAtZ,r,radius,rx,ry,seed,specularConstant,specularExponent,stdDeviation,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,surfaceScale,target,targetX,targetY,transform,underline-position,underline-thickness,viewBox,width,x,x1,x2,y,y1,y2,z'.split(','));

  unitForProperty = function unitForProperty(k, v) {
    if (typeof v !== 'number') {
      return '';
    }
    if (pxProperties.contains(k)) {
      return 'px';
    } else if (degProperties.contains(k)) {
      return 'deg';
    }
    return '';
  };

  transformValueForProperty = function transformValueForProperty(k, v) {
    var match, unit;
    match = ("" + v).match(/^([0-9.-]*)([^0-9]*)$/);
    if (match != null) {
      v = match[1];
      unit = match[2];
    } else {
      v = parseFloat(v);
    }
    v = roundf(parseFloat(v), 10);
    if (unit == null || unit === "") {
      unit = unitForProperty(k, v);
    }
    return "" + k + "(" + v + unit + ")";
  };

  parseProperties = function parseProperties(properties) {
    var axis, match, parsed, property, value, _i, _len, _ref;
    parsed = {};
    for (property in properties) {
      value = properties[property];
      if (transformProperties.contains(property)) {
        match = property.match(/(translate|rotateC|rotate|skew|scale|perspective)(X|Y|Z|)/);
        if (match && match[2].length > 0) {
          parsed[property] = value;
        } else {
          _ref = ['X', 'Y', 'Z'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            axis = _ref[_i];
            parsed[match[1] + axis] = value;
          }
        }
      } else {
        parsed[property] = value;
      }
    }
    return parsed;
  };

  defaultValueForKey = function defaultValueForKey(key) {
    var v;
    v = key === 'opacity' ? 1 : 0;
    return "" + v + unitForProperty(key, v);
  };

  getCurrentProperties = function getCurrentProperties(el, keys) {
    var isSVG, key, matrix, properties, style, v, _i, _j, _len, _len1, _ref;
    properties = {};
    isSVG = isSVGElement(el);
    if (el.style != null) {
      style = window.getComputedStyle(el, null);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (transformProperties.contains(key)) {
          if (properties['transform'] == null) {
            if (isSVG) {
              matrix = new Matrix2D((_ref = el.transform.baseVal.consolidate()) != null ? _ref.matrix : void 0);
            } else {
              matrix = Matrix.fromTransform(style[propertyWithPrefix('transform')]);
            }
            properties['transform'] = matrix.decompose();
          }
        } else {
          if (el.hasAttribute != null && el.hasAttribute(key)) {
            v = el.getAttribute(key);
          } else if (key in el) {
            v = el[key];
          } else {
            v = style[key];
          }
          if ((v == null || key === 'd') && svgProperties.contains(key)) {
            v = el.getAttribute(key);
          }
          if (v === "" || v == null) {
            v = defaultValueForKey(key);
          }
          properties[key] = createInterpolable(v);
        }
      }
    } else {
      for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
        key = keys[_j];
        properties[key] = createInterpolable(el[key]);
      }
    }
    addUnitsToNumberInterpolables(el, properties);
    return properties;
  };

  addUnitsToNumberInterpolables = function addUnitsToNumberInterpolables(el, properties) {
    var interpolable, k;
    for (k in properties) {
      interpolable = properties[k];
      if (interpolable instanceof InterpolableNumber && el.style != null && k in el.style) {
        interpolable = new InterpolableString([interpolable, unitForProperty(k, 0)]);
      }
      properties[k] = interpolable;
    }
    return properties;
  };

  createInterpolable = function createInterpolable(value) {
    var interpolable, klass, klasses, _i, _len;
    klasses = [InterpolableArray, InterpolableObject, InterpolableNumber, InterpolableString];
    for (_i = 0, _len = klasses.length; _i < _len; _i++) {
      klass = klasses[_i];
      interpolable = klass.create(value);
      if (interpolable != null) {
        return interpolable;
      }
    }
    return null;
  };

  InterpolableString = function () {
    function InterpolableString(parts) {
      this.parts = parts;
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
    }

    InterpolableString.prototype.interpolate = function (endInterpolable, t) {
      var end, i, newParts, start, _i, _ref;
      start = this.parts;
      end = endInterpolable.parts;
      newParts = [];
      for (i = _i = 0, _ref = Math.min(start.length, end.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (start[i].interpolate != null) {
          newParts.push(start[i].interpolate(end[i], t));
        } else {
          newParts.push(start[i]);
        }
      }
      return new InterpolableString(newParts);
    };

    InterpolableString.prototype.format = function () {
      var parts;
      parts = this.parts.map(function (val) {
        if (val.format != null) {
          return val.format();
        } else {
          return val;
        }
      });
      return parts.join('');
    };

    InterpolableString.create = function (value) {
      var index, match, matches, parts, re, type, types, _i, _j, _len, _len1;
      value = "" + value;
      matches = [];
      types = [{
        re: /(#[a-f\d]{3,6})/ig,
        klass: InterpolableColor,
        parse: function parse(v) {
          return v;
        }
      }, {
        re: /(rgba?\([0-9.]*, ?[0-9.]*, ?[0-9.]*(?:, ?[0-9.]*)?\))/ig,
        klass: InterpolableColor,
        parse: function parse(v) {
          return v;
        }
      }, {
        re: /([-+]?[\d.]+)/ig,
        klass: InterpolableNumber,
        parse: parseFloat
      }];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        re = type.re;
        while (match = re.exec(value)) {
          matches.push({
            index: match.index,
            length: match[1].length,
            interpolable: type.klass.create(type.parse(match[1]))
          });
        }
      }
      matches = matches.sort(function (a, b) {
        if (a.index > b.index) {
          return 1;
        } else {
          return -1;
        }
      });
      parts = [];
      index = 0;
      for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
        match = matches[_j];
        if (match.index < index) {
          continue;
        }
        if (match.index > index) {
          parts.push(value.substring(index, match.index));
        }
        parts.push(match.interpolable);
        index = match.index + match.length;
      }
      if (index < value.length) {
        parts.push(value.substring(index));
      }
      return new InterpolableString(parts);
    };

    return InterpolableString;
  }();

  InterpolableObject = function () {
    function InterpolableObject(obj) {
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
      this.obj = obj;
    }

    InterpolableObject.prototype.interpolate = function (endInterpolable, t) {
      var end, k, newObj, start, v;
      start = this.obj;
      end = endInterpolable.obj;
      newObj = {};
      for (k in start) {
        v = start[k];
        if (v.interpolate != null) {
          newObj[k] = v.interpolate(end[k], t);
        } else {
          newObj[k] = v;
        }
      }
      return new InterpolableObject(newObj);
    };

    InterpolableObject.prototype.format = function () {
      return this.obj;
    };

    InterpolableObject.create = function (value) {
      var k, obj, v;
      if (value instanceof Object) {
        obj = {};
        for (k in value) {
          v = value[k];
          obj[k] = createInterpolable(v);
        }
        return new InterpolableObject(obj);
      }
      return null;
    };

    return InterpolableObject;
  }();

  InterpolableNumber = function () {
    function InterpolableNumber(value) {
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
      this.value = parseFloat(value);
    }

    InterpolableNumber.prototype.interpolate = function (endInterpolable, t) {
      var end, start;
      start = this.value;
      end = endInterpolable.value;
      return new InterpolableNumber((end - start) * t + start);
    };

    InterpolableNumber.prototype.format = function () {
      return roundf(this.value, 5);
    };

    InterpolableNumber.create = function (value) {
      if (typeof value === 'number') {
        return new InterpolableNumber(value);
      }
      return null;
    };

    return InterpolableNumber;
  }();

  InterpolableArray = function () {
    function InterpolableArray(values) {
      this.values = values;
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
    }

    InterpolableArray.prototype.interpolate = function (endInterpolable, t) {
      var end, i, newValues, start, _i, _ref;
      start = this.values;
      end = endInterpolable.values;
      newValues = [];
      for (i = _i = 0, _ref = Math.min(start.length, end.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (start[i].interpolate != null) {
          newValues.push(start[i].interpolate(end[i], t));
        } else {
          newValues.push(start[i]);
        }
      }
      return new InterpolableArray(newValues);
    };

    InterpolableArray.prototype.format = function () {
      return this.values.map(function (val) {
        if (val.format != null) {
          return val.format();
        } else {
          return val;
        }
      });
    };

    InterpolableArray.createFromArray = function (arr) {
      var values;
      values = arr.map(function (val) {
        return createInterpolable(val) || val;
      });
      values = values.filter(function (val) {
        return val != null;
      });
      return new InterpolableArray(values);
    };

    InterpolableArray.create = function (value) {
      if (value instanceof Array) {
        return InterpolableArray.createFromArray(value);
      }
      return null;
    };

    return InterpolableArray;
  }();

  Color = function () {
    function Color(rgb, format) {
      this.rgb = rgb != null ? rgb : {};
      this.format = format;
      this.toRgba = __bind(this.toRgba, this);
      this.toRgb = __bind(this.toRgb, this);
      this.toHex = __bind(this.toHex, this);
    }

    Color.fromHex = function (hex) {
      var hex3, result;
      hex3 = hex.match(/^#([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i);
      if (hex3 != null) {
        hex = "#" + hex3[1] + hex3[1] + hex3[2] + hex3[2] + hex3[3] + hex3[3];
      }
      result = hex.match(/^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i);
      if (result != null) {
        return new Color({
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16),
          a: 1
        }, "hex");
      }
      return null;
    };

    Color.fromRgb = function (rgb) {
      var match, _ref;
      match = rgb.match(/^rgba?\(([0-9.]*), ?([0-9.]*), ?([0-9.]*)(?:, ?([0-9.]*))?\)$/);
      if (match != null) {
        return new Color({
          r: parseFloat(match[1]),
          g: parseFloat(match[2]),
          b: parseFloat(match[3]),
          a: parseFloat((_ref = match[4]) != null ? _ref : 1)
        }, match[4] != null ? "rgba" : "rgb");
      }
      return null;
    };

    Color.componentToHex = function (c) {
      var hex;
      hex = c.toString(16);
      if (hex.length === 1) {
        return "0" + hex;
      } else {
        return hex;
      }
    };

    Color.prototype.toHex = function () {
      return "#" + Color.componentToHex(this.rgb.r) + Color.componentToHex(this.rgb.g) + Color.componentToHex(this.rgb.b);
    };

    Color.prototype.toRgb = function () {
      return "rgb(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ")";
    };

    Color.prototype.toRgba = function () {
      return "rgba(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ", " + this.rgb.a + ")";
    };

    return Color;
  }();

  InterpolableColor = function () {
    function InterpolableColor(color) {
      this.color = color;
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
    }

    InterpolableColor.prototype.interpolate = function (endInterpolable, t) {
      var end, k, rgb, start, v, _i, _len, _ref;
      start = this.color;
      end = endInterpolable.color;
      rgb = {};
      _ref = ['r', 'g', 'b'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        v = Math.round((end.rgb[k] - start.rgb[k]) * t + start.rgb[k]);
        rgb[k] = Math.min(255, Math.max(0, v));
      }
      k = "a";
      v = roundf((end.rgb[k] - start.rgb[k]) * t + start.rgb[k], 5);
      rgb[k] = Math.min(1, Math.max(0, v));
      return new InterpolableColor(new Color(rgb, end.format));
    };

    InterpolableColor.prototype.format = function () {
      if (this.color.format === "hex") {
        return this.color.toHex();
      } else if (this.color.format === "rgb") {
        return this.color.toRgb();
      } else if (this.color.format === "rgba") {
        return this.color.toRgba();
      }
    };

    InterpolableColor.create = function (value) {
      var color;
      if (typeof value !== "string") {
        return;
      }
      color = Color.fromHex(value) || Color.fromRgb(value);
      if (color != null) {
        return new InterpolableColor(color);
      }
      return null;
    };

    return InterpolableColor;
  }();

  DecomposedMatrix2D = function () {
    function DecomposedMatrix2D(props) {
      this.props = props;
      this.applyRotateCenter = __bind(this.applyRotateCenter, this);
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
    }

    DecomposedMatrix2D.prototype.interpolate = function (endMatrix, t) {
      var i, k, newProps, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2;
      newProps = {};
      _ref = ['translate', 'scale', 'rotate'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        newProps[k] = [];
        for (i = _j = 0, _ref1 = this.props[k].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          newProps[k][i] = (endMatrix.props[k][i] - this.props[k][i]) * t + this.props[k][i];
        }
      }
      for (i = _k = 1; _k <= 2; i = ++_k) {
        newProps['rotate'][i] = endMatrix.props['rotate'][i];
      }
      _ref2 = ['skew'];
      for (_l = 0, _len1 = _ref2.length; _l < _len1; _l++) {
        k = _ref2[_l];
        newProps[k] = (endMatrix.props[k] - this.props[k]) * t + this.props[k];
      }
      return new DecomposedMatrix2D(newProps);
    };

    DecomposedMatrix2D.prototype.format = function () {
      return "translate(" + this.props.translate.join(',') + ") rotate(" + this.props.rotate.join(',') + ") skewX(" + this.props.skew + ") scale(" + this.props.scale.join(',') + ")";
    };

    DecomposedMatrix2D.prototype.applyRotateCenter = function (rotateC) {
      var i, m, m2d, negativeTranslate, _i, _results;
      m = baseSVG.createSVGMatrix();
      m = m.translate(rotateC[0], rotateC[1]);
      m = m.rotate(this.props.rotate[0]);
      m = m.translate(-rotateC[0], -rotateC[1]);
      m2d = new Matrix2D(m);
      negativeTranslate = m2d.decompose().props.translate;
      _results = [];
      for (i = _i = 0; _i <= 1; i = ++_i) {
        _results.push(this.props.translate[i] -= negativeTranslate[i]);
      }
      return _results;
    };

    return DecomposedMatrix2D;
  }();

  baseSVG = typeof document !== "undefined" && document !== null ? document.createElementNS("http://www.w3.org/2000/svg", "svg") : void 0;

  Matrix2D = function () {
    function Matrix2D(m) {
      this.m = m;
      this.applyProperties = __bind(this.applyProperties, this);
      this.decompose = __bind(this.decompose, this);
      if (!this.m) {
        this.m = baseSVG.createSVGMatrix();
      }
    }

    Matrix2D.prototype.decompose = function () {
      var kx, ky, kz, r0, r1;
      r0 = new Vector([this.m.a, this.m.b]);
      r1 = new Vector([this.m.c, this.m.d]);
      kx = r0.length();
      kz = r0.dot(r1);
      r0 = r0.normalize();
      ky = r1.combine(r0, 1, -kz).length();
      return new DecomposedMatrix2D({
        translate: [this.m.e, this.m.f],
        rotate: [Math.atan2(this.m.b, this.m.a) * 180 / Math.PI, this.rotateCX, this.rotateCY],
        scale: [kx, ky],
        skew: kz / ky * 180 / Math.PI
      });
    };

    Matrix2D.prototype.applyProperties = function (properties) {
      var hash, k, props, v, _i, _len, _ref, _ref1;
      hash = {};
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        props = properties[_i];
        hash[props[0]] = props[1];
      }
      for (k in hash) {
        v = hash[k];
        if (k === "translateX") {
          this.m = this.m.translate(v, 0);
        } else if (k === "translateY") {
          this.m = this.m.translate(0, v);
        } else if (k === "scaleX") {
          this.m = this.m.scaleNonUniform(v, 1);
        } else if (k === "scaleY") {
          this.m = this.m.scaleNonUniform(1, v);
        } else if (k === "rotateZ") {
          this.m = this.m.rotate(v);
        } else if (k === "skewX") {
          this.m = this.m.skewX(v);
        } else if (k === "skewY") {
          this.m = this.m.skewY(v);
        }
      }
      this.rotateCX = (_ref = hash.rotateCX) != null ? _ref : 0;
      return this.rotateCY = (_ref1 = hash.rotateCY) != null ? _ref1 : 0;
    };

    return Matrix2D;
  }();

  Vector = function () {
    function Vector(els) {
      this.els = els;
      this.combine = __bind(this.combine, this);
      this.normalize = __bind(this.normalize, this);
      this.length = __bind(this.length, this);
      this.cross = __bind(this.cross, this);
      this.dot = __bind(this.dot, this);
      this.e = __bind(this.e, this);
    }

    Vector.prototype.e = function (i) {
      if (i < 1 || i > this.els.length) {
        return null;
      } else {
        return this.els[i - 1];
      }
    };

    Vector.prototype.dot = function (vector) {
      var V, n, product;
      V = vector.els || vector;
      product = 0;
      n = this.els.length;
      if (n !== V.length) {
        return null;
      }
      n += 1;
      while (--n) {
        product += this.els[n - 1] * V[n - 1];
      }
      return product;
    };

    Vector.prototype.cross = function (vector) {
      var A, B;
      B = vector.els || vector;
      if (this.els.length !== 3 || B.length !== 3) {
        return null;
      }
      A = this.els;
      return new Vector([A[1] * B[2] - A[2] * B[1], A[2] * B[0] - A[0] * B[2], A[0] * B[1] - A[1] * B[0]]);
    };

    Vector.prototype.length = function () {
      var a, e, _i, _len, _ref;
      a = 0;
      _ref = this.els;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        a += Math.pow(e, 2);
      }
      return Math.sqrt(a);
    };

    Vector.prototype.normalize = function () {
      var e, i, length, newElements, _ref;
      length = this.length();
      newElements = [];
      _ref = this.els;
      for (i in _ref) {
        e = _ref[i];
        newElements[i] = e / length;
      }
      return new Vector(newElements);
    };

    Vector.prototype.combine = function (b, ascl, bscl) {
      var i, result, _i, _ref;
      result = [];
      for (i = _i = 0, _ref = this.els.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        result[i] = ascl * this.els[i] + bscl * b.els[i];
      }
      return new Vector(result);
    };

    return Vector;
  }();

  DecomposedMatrix = function () {
    function DecomposedMatrix() {
      this.toMatrix = __bind(this.toMatrix, this);
      this.format = __bind(this.format, this);
      this.interpolate = __bind(this.interpolate, this);
    }

    DecomposedMatrix.prototype.interpolate = function (decomposedB, t, only) {
      var angle, decomposed, decomposedA, i, invscale, invth, k, qa, qb, scale, th, _i, _j, _k, _l, _len, _ref, _ref1;
      if (only == null) {
        only = null;
      }
      decomposedA = this;
      decomposed = new DecomposedMatrix();
      _ref = ['translate', 'scale', 'skew', 'perspective'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        decomposed[k] = [];
        for (i = _j = 0, _ref1 = decomposedA[k].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (only == null || only.indexOf(k) > -1 || only.indexOf("" + k + ['x', 'y', 'z'][i]) > -1) {
            decomposed[k][i] = (decomposedB[k][i] - decomposedA[k][i]) * t + decomposedA[k][i];
          } else {
            decomposed[k][i] = decomposedA[k][i];
          }
        }
      }
      if (only == null || only.indexOf('rotate') !== -1) {
        qa = decomposedA.quaternion;
        qb = decomposedB.quaternion;
        angle = qa[0] * qb[0] + qa[1] * qb[1] + qa[2] * qb[2] + qa[3] * qb[3];
        if (angle < 0.0) {
          for (i = _k = 0; _k <= 3; i = ++_k) {
            qa[i] = -qa[i];
          }
          angle = -angle;
        }
        if (angle + 1.0 > .05) {
          if (1.0 - angle >= .05) {
            th = Math.acos(angle);
            invth = 1.0 / Math.sin(th);
            scale = Math.sin(th * (1.0 - t)) * invth;
            invscale = Math.sin(th * t) * invth;
          } else {
            scale = 1.0 - t;
            invscale = t;
          }
        } else {
          qb[0] = -qa[1];
          qb[1] = qa[0];
          qb[2] = -qa[3];
          qb[3] = qa[2];
          scale = Math.sin(piDouble * (.5 - t));
          invscale = Math.sin(piDouble * t);
        }
        decomposed.quaternion = [];
        for (i = _l = 0; _l <= 3; i = ++_l) {
          decomposed.quaternion[i] = qa[i] * scale + qb[i] * invscale;
        }
      } else {
        decomposed.quaternion = decomposedA.quaternion;
      }
      return decomposed;
    };

    DecomposedMatrix.prototype.format = function () {
      return this.toMatrix().toString();
    };

    DecomposedMatrix.prototype.toMatrix = function () {
      var decomposedMatrix, i, j, match, matrix, quaternion, skew, temp, w, x, y, z, _i, _j, _k, _l;
      decomposedMatrix = this;
      matrix = Matrix.I(4);
      for (i = _i = 0; _i <= 3; i = ++_i) {
        matrix.els[i][3] = decomposedMatrix.perspective[i];
      }
      quaternion = decomposedMatrix.quaternion;
      x = quaternion[0];
      y = quaternion[1];
      z = quaternion[2];
      w = quaternion[3];
      skew = decomposedMatrix.skew;
      match = [[1, 0], [2, 0], [2, 1]];
      for (i = _j = 2; _j >= 0; i = --_j) {
        if (skew[i]) {
          temp = Matrix.I(4);
          temp.els[match[i][0]][match[i][1]] = skew[i];
          matrix = matrix.multiply(temp);
        }
      }
      matrix = matrix.multiply(new Matrix([[1 - 2 * (y * y + z * z), 2 * (x * y - z * w), 2 * (x * z + y * w), 0], [2 * (x * y + z * w), 1 - 2 * (x * x + z * z), 2 * (y * z - x * w), 0], [2 * (x * z - y * w), 2 * (y * z + x * w), 1 - 2 * (x * x + y * y), 0], [0, 0, 0, 1]]));
      for (i = _k = 0; _k <= 2; i = ++_k) {
        for (j = _l = 0; _l <= 2; j = ++_l) {
          matrix.els[i][j] *= decomposedMatrix.scale[i];
        }
        matrix.els[3][i] = decomposedMatrix.translate[i];
      }
      return matrix;
    };

    return DecomposedMatrix;
  }();

  Matrix = function () {
    function Matrix(els) {
      this.els = els;
      this.toString = __bind(this.toString, this);
      this.decompose = __bind(this.decompose, this);
      this.inverse = __bind(this.inverse, this);
      this.augment = __bind(this.augment, this);
      this.toRightTriangular = __bind(this.toRightTriangular, this);
      this.transpose = __bind(this.transpose, this);
      this.multiply = __bind(this.multiply, this);
      this.dup = __bind(this.dup, this);
      this.e = __bind(this.e, this);
    }

    Matrix.prototype.e = function (i, j) {
      if (i < 1 || i > this.els.length || j < 1 || j > this.els[0].length) {
        return null;
      }
      return this.els[i - 1][j - 1];
    };

    Matrix.prototype.dup = function () {
      return new Matrix(this.els);
    };

    Matrix.prototype.multiply = function (matrix) {
      var M, c, cols, elements, i, j, ki, kj, nc, ni, nj, returnVector, sum;
      returnVector = matrix.modulus ? true : false;
      M = matrix.els || matrix;
      if (typeof M[0][0] === 'undefined') {
        M = new Matrix(M).els;
      }
      ni = this.els.length;
      ki = ni;
      kj = M[0].length;
      cols = this.els[0].length;
      elements = [];
      ni += 1;
      while (--ni) {
        i = ki - ni;
        elements[i] = [];
        nj = kj;
        nj += 1;
        while (--nj) {
          j = kj - nj;
          sum = 0;
          nc = cols;
          nc += 1;
          while (--nc) {
            c = cols - nc;
            sum += this.els[i][c] * M[c][j];
          }
          elements[i][j] = sum;
        }
      }
      M = new Matrix(elements);
      if (returnVector) {
        return M.col(1);
      } else {
        return M;
      }
    };

    Matrix.prototype.transpose = function () {
      var cols, elements, i, j, ni, nj, rows;
      rows = this.els.length;
      cols = this.els[0].length;
      elements = [];
      ni = cols;
      ni += 1;
      while (--ni) {
        i = cols - ni;
        elements[i] = [];
        nj = rows;
        nj += 1;
        while (--nj) {
          j = rows - nj;
          elements[i][j] = this.els[j][i];
        }
      }
      return new Matrix(elements);
    };

    Matrix.prototype.toRightTriangular = function () {
      var M, els, i, j, k, kp, multiplier, n, np, p, _i, _j, _ref, _ref1;
      M = this.dup();
      n = this.els.length;
      k = n;
      kp = this.els[0].length;
      while (--n) {
        i = k - n;
        if (M.els[i][i] === 0) {
          for (j = _i = _ref = i + 1; _ref <= k ? _i < k : _i > k; j = _ref <= k ? ++_i : --_i) {
            if (M.els[j][i] !== 0) {
              els = [];
              np = kp;
              np += 1;
              while (--np) {
                p = kp - np;
                els.push(M.els[i][p] + M.els[j][p]);
              }
              M.els[i] = els;
              break;
            }
          }
        }
        if (M.els[i][i] !== 0) {
          for (j = _j = _ref1 = i + 1; _ref1 <= k ? _j < k : _j > k; j = _ref1 <= k ? ++_j : --_j) {
            multiplier = M.els[j][i] / M.els[i][i];
            els = [];
            np = kp;
            np += 1;
            while (--np) {
              p = kp - np;
              els.push(p <= i ? 0 : M.els[j][p] - M.els[i][p] * multiplier);
            }
            M.els[j] = els;
          }
        }
      }
      return M;
    };

    Matrix.prototype.augment = function (matrix) {
      var M, T, cols, i, j, ki, kj, ni, nj;
      M = matrix.els || matrix;
      if (typeof M[0][0] === 'undefined') {
        M = new Matrix(M).els;
      }
      T = this.dup();
      cols = T.els[0].length;
      ni = T.els.length;
      ki = ni;
      kj = M[0].length;
      if (ni !== M.length) {
        return null;
      }
      ni += 1;
      while (--ni) {
        i = ki - ni;
        nj = kj;
        nj += 1;
        while (--nj) {
          j = kj - nj;
          T.els[i][cols + j] = M[i][j];
        }
      }
      return T;
    };

    Matrix.prototype.inverse = function () {
      var M, divisor, els, i, inverse_elements, j, ki, kp, new_element, ni, np, p, _i;
      ni = this.els.length;
      ki = ni;
      M = this.augment(Matrix.I(ni)).toRightTriangular();
      kp = M.els[0].length;
      inverse_elements = [];
      ni += 1;
      while (--ni) {
        i = ni - 1;
        els = [];
        np = kp;
        inverse_elements[i] = [];
        divisor = M.els[i][i];
        np += 1;
        while (--np) {
          p = kp - np;
          new_element = M.els[i][p] / divisor;
          els.push(new_element);
          if (p >= ki) {
            inverse_elements[i].push(new_element);
          }
        }
        M.els[i] = els;
        for (j = _i = 0; 0 <= i ? _i < i : _i > i; j = 0 <= i ? ++_i : --_i) {
          els = [];
          np = kp;
          np += 1;
          while (--np) {
            p = kp - np;
            els.push(M.els[j][p] - M.els[i][p] * M.els[j][i]);
          }
          M.els[j] = els;
        }
      }
      return new Matrix(inverse_elements);
    };

    Matrix.I = function (n) {
      var els, i, j, k, nj;
      els = [];
      k = n;
      n += 1;
      while (--n) {
        i = k - n;
        els[i] = [];
        nj = k;
        nj += 1;
        while (--nj) {
          j = k - nj;
          els[i][j] = i === j ? 1 : 0;
        }
      }
      return new Matrix(els);
    };

    Matrix.prototype.decompose = function () {
      var els, i, inversePerspectiveMatrix, j, k, matrix, pdum3, perspective, perspectiveMatrix, quaternion, result, rightHandSide, rotate, row, rowElement, s, scale, skew, t, translate, transposedInversePerspectiveMatrix, type, typeKey, v, w, x, y, z, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
      matrix = this;
      translate = [];
      scale = [];
      skew = [];
      quaternion = [];
      perspective = [];
      els = [];
      for (i = _i = 0; _i <= 3; i = ++_i) {
        els[i] = [];
        for (j = _j = 0; _j <= 3; j = ++_j) {
          els[i][j] = matrix.els[i][j];
        }
      }
      if (els[3][3] === 0) {
        return false;
      }
      for (i = _k = 0; _k <= 3; i = ++_k) {
        for (j = _l = 0; _l <= 3; j = ++_l) {
          els[i][j] /= els[3][3];
        }
      }
      perspectiveMatrix = matrix.dup();
      for (i = _m = 0; _m <= 2; i = ++_m) {
        perspectiveMatrix.els[i][3] = 0;
      }
      perspectiveMatrix.els[3][3] = 1;
      if (els[0][3] !== 0 || els[1][3] !== 0 || els[2][3] !== 0) {
        rightHandSide = new Vector(els.slice(0, 4)[3]);
        inversePerspectiveMatrix = perspectiveMatrix.inverse();
        transposedInversePerspectiveMatrix = inversePerspectiveMatrix.transpose();
        perspective = transposedInversePerspectiveMatrix.multiply(rightHandSide).els;
        for (i = _n = 0; _n <= 2; i = ++_n) {
          els[i][3] = 0;
        }
        els[3][3] = 1;
      } else {
        perspective = [0, 0, 0, 1];
      }
      for (i = _o = 0; _o <= 2; i = ++_o) {
        translate[i] = els[3][i];
        els[3][i] = 0;
      }
      row = [];
      for (i = _p = 0; _p <= 2; i = ++_p) {
        row[i] = new Vector(els[i].slice(0, 3));
      }
      scale[0] = row[0].length();
      row[0] = row[0].normalize();
      skew[0] = row[0].dot(row[1]);
      row[1] = row[1].combine(row[0], 1.0, -skew[0]);
      scale[1] = row[1].length();
      row[1] = row[1].normalize();
      skew[0] /= scale[1];
      skew[1] = row[0].dot(row[2]);
      row[2] = row[2].combine(row[0], 1.0, -skew[1]);
      skew[2] = row[1].dot(row[2]);
      row[2] = row[2].combine(row[1], 1.0, -skew[2]);
      scale[2] = row[2].length();
      row[2] = row[2].normalize();
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      pdum3 = row[1].cross(row[2]);
      if (row[0].dot(pdum3) < 0) {
        for (i = _q = 0; _q <= 2; i = ++_q) {
          scale[i] *= -1;
          for (j = _r = 0; _r <= 2; j = ++_r) {
            row[i].els[j] *= -1;
          }
        }
      }
      rowElement = function rowElement(index, elementIndex) {
        return row[index].els[elementIndex];
      };
      rotate = [];
      rotate[1] = Math.asin(-rowElement(0, 2));
      if (Math.cos(rotate[1]) !== 0) {
        rotate[0] = Math.atan2(rowElement(1, 2), rowElement(2, 2));
        rotate[2] = Math.atan2(rowElement(0, 1), rowElement(0, 0));
      } else {
        rotate[0] = Math.atan2(-rowElement(2, 0), rowElement(1, 1));
        rotate[1] = 0;
      }
      t = rowElement(0, 0) + rowElement(1, 1) + rowElement(2, 2) + 1.0;
      if (t > 1e-4) {
        s = 0.5 / Math.sqrt(t);
        w = 0.25 / s;
        x = (rowElement(2, 1) - rowElement(1, 2)) * s;
        y = (rowElement(0, 2) - rowElement(2, 0)) * s;
        z = (rowElement(1, 0) - rowElement(0, 1)) * s;
      } else if (rowElement(0, 0) > rowElement(1, 1) && rowElement(0, 0) > rowElement(2, 2)) {
        s = Math.sqrt(1.0 + rowElement(0, 0) - rowElement(1, 1) - rowElement(2, 2)) * 2.0;
        x = 0.25 * s;
        y = (rowElement(0, 1) + rowElement(1, 0)) / s;
        z = (rowElement(0, 2) + rowElement(2, 0)) / s;
        w = (rowElement(2, 1) - rowElement(1, 2)) / s;
      } else if (rowElement(1, 1) > rowElement(2, 2)) {
        s = Math.sqrt(1.0 + rowElement(1, 1) - rowElement(0, 0) - rowElement(2, 2)) * 2.0;
        x = (rowElement(0, 1) + rowElement(1, 0)) / s;
        y = 0.25 * s;
        z = (rowElement(1, 2) + rowElement(2, 1)) / s;
        w = (rowElement(0, 2) - rowElement(2, 0)) / s;
      } else {
        s = Math.sqrt(1.0 + rowElement(2, 2) - rowElement(0, 0) - rowElement(1, 1)) * 2.0;
        x = (rowElement(0, 2) + rowElement(2, 0)) / s;
        y = (rowElement(1, 2) + rowElement(2, 1)) / s;
        z = 0.25 * s;
        w = (rowElement(1, 0) - rowElement(0, 1)) / s;
      }
      quaternion = [x, y, z, w];
      result = new DecomposedMatrix();
      result.translate = translate;
      result.scale = scale;
      result.skew = skew;
      result.quaternion = quaternion;
      result.perspective = perspective;
      result.rotate = rotate;
      for (typeKey in result) {
        type = result[typeKey];
        for (k in type) {
          v = type[k];
          if (isNaN(v)) {
            type[k] = 0;
          }
        }
      }
      return result;
    };

    Matrix.prototype.toString = function () {
      var i, j, str, _i, _j;
      str = 'matrix3d(';
      for (i = _i = 0; _i <= 3; i = ++_i) {
        for (j = _j = 0; _j <= 3; j = ++_j) {
          str += roundf(this.els[i][j], 10);
          if (!(i === 3 && j === 3)) {
            str += ',';
          }
        }
      }
      str += ')';
      return str;
    };

    Matrix.matrixForTransform = cacheFn(function (transform) {
      var matrixEl, result, style, _ref, _ref1, _ref2;
      matrixEl = document.createElement('div');
      matrixEl.style.position = 'absolute';
      matrixEl.style.visibility = 'hidden';
      matrixEl.style[propertyWithPrefix("transform")] = transform;
      document.body.appendChild(matrixEl);
      style = window.getComputedStyle(matrixEl, null);
      result = (_ref = (_ref1 = style.transform) != null ? _ref1 : style[propertyWithPrefix("transform")]) != null ? _ref : (_ref2 = dynamics.tests) != null ? _ref2.matrixForTransform(transform) : void 0;
      document.body.removeChild(matrixEl);
      return result;
    });

    Matrix.fromTransform = function (transform) {
      var digits, elements, i, match, matrixElements, _i;
      match = transform != null ? transform.match(/matrix3?d?\(([-0-9,e \.]*)\)/) : void 0;
      if (match) {
        digits = match[1].split(',');
        digits = digits.map(parseFloat);
        if (digits.length === 6) {
          elements = [digits[0], digits[1], 0, 0, digits[2], digits[3], 0, 0, 0, 0, 1, 0, digits[4], digits[5], 0, 1];
        } else {
          elements = digits;
        }
      } else {
        elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
      }
      matrixElements = [];
      for (i = _i = 0; _i <= 3; i = ++_i) {
        matrixElements.push(elements.slice(i * 4, i * 4 + 4));
      }
      return new Matrix(matrixElements);
    };

    return Matrix;
  }();

  prefixFor = cacheFn(function (property) {
    var k, prefix, prop, propArray, propertyName, _i, _j, _len, _len1, _ref;
    if (document.body.style[property] !== void 0) {
      return '';
    }
    propArray = property.split('-');
    propertyName = "";
    for (_i = 0, _len = propArray.length; _i < _len; _i++) {
      prop = propArray[_i];
      propertyName += prop.substring(0, 1).toUpperCase() + prop.substring(1);
    }
    _ref = ["Webkit", "Moz", "ms"];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      prefix = _ref[_j];
      k = prefix + propertyName;
      if (document.body.style[k] !== void 0) {
        return prefix;
      }
    }
    return '';
  });

  propertyWithPrefix = cacheFn(function (property) {
    var prefix;
    prefix = prefixFor(property);
    if (prefix === 'Moz') {
      return "" + prefix + (property.substring(0, 1).toUpperCase() + property.substring(1));
    }
    if (prefix !== '') {
      return "-" + prefix.toLowerCase() + "-" + toDashed(property);
    }
    return toDashed(property);
  });

  rAF = typeof window !== "undefined" && window !== null ? window.requestAnimationFrame : void 0;

  animations = [];

  animationsTimeouts = [];

  slow = false;

  slowRatio = 1;

  if (typeof window !== "undefined" && window !== null) {
    window.addEventListener('keyup', function (e) {
      if (e.keyCode === 68 && e.shiftKey && e.ctrlKey) {
        return dynamics.toggleSlow();
      }
    });
  }

  if (rAF == null) {
    lastTime = 0;
    rAF = function rAF(callback) {
      var currTime, id, timeToCall;
      currTime = Date.now();
      timeToCall = Math.max(0, 16 - (currTime - lastTime));
      id = window.setTimeout(function () {
        return callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  runLoopRunning = false;

  runLoopPaused = false;

  startRunLoop = function startRunLoop() {
    if (!runLoopRunning) {
      runLoopRunning = true;
      return rAF(_runLoopTick);
    }
  };

  _runLoopTick = function runLoopTick(t) {
    var animation, toRemoveAnimations, _i, _len;
    if (runLoopPaused) {
      rAF(_runLoopTick);
      return;
    }
    toRemoveAnimations = [];
    for (_i = 0, _len = animations.length; _i < _len; _i++) {
      animation = animations[_i];
      if (!animationTick(t, animation)) {
        toRemoveAnimations.push(animation);
      }
    }
    animations = animations.filter(function (animation) {
      return toRemoveAnimations.indexOf(animation) === -1;
    });
    if (animations.length === 0) {
      return runLoopRunning = false;
    } else {
      return rAF(_runLoopTick);
    }
  };

  animationTick = function animationTick(t, animation) {
    var key, properties, property, tt, y, _base, _base1, _ref;
    if (animation.tStart == null) {
      animation.tStart = t;
    }
    tt = (t - animation.tStart) / animation.options.duration;
    y = animation.curve(tt);
    properties = {};
    if (tt >= 1) {
      if (animation.curve.returnsToSelf) {
        properties = animation.properties.start;
      } else {
        properties = animation.properties.end;
      }
    } else {
      _ref = animation.properties.start;
      for (key in _ref) {
        property = _ref[key];
        properties[key] = interpolate(property, animation.properties.end[key], y);
      }
    }
    applyFrame(animation.el, properties);
    if (typeof (_base = animation.options).change === "function") {
      _base.change(animation.el, Math.min(1, tt));
    }
    if (tt >= 1) {
      if (typeof (_base1 = animation.options).complete === "function") {
        _base1.complete(animation.el);
      }
    }
    return tt < 1;
  };

  interpolate = function interpolate(start, end, y) {
    if (start != null && start.interpolate != null) {
      return start.interpolate(end, y);
    }
    return null;
  };

  startAnimation = function startAnimation(el, properties, options, timeoutId) {
    var endProperties, isSVG, k, matrix, startProperties, transforms, v;
    if (timeoutId != null) {
      animationsTimeouts = animationsTimeouts.filter(function (timeout) {
        return timeout.id !== timeoutId;
      });
    }
    dynamics.stop(el, {
      timeout: false
    });
    if (!options.animated) {
      dynamics.css(el, properties);
      if (typeof options.complete === "function") {
        options.complete(this);
      }
      return;
    }
    startProperties = getCurrentProperties(el, Object.keys(properties));
    properties = parseProperties(properties);
    endProperties = {};
    transforms = [];
    for (k in properties) {
      v = properties[k];
      if (el.style != null && transformProperties.contains(k)) {
        transforms.push([k, v]);
      } else {
        endProperties[k] = createInterpolable(v);
      }
    }
    if (transforms.length > 0) {
      isSVG = isSVGElement(el);
      if (isSVG) {
        matrix = new Matrix2D();
        matrix.applyProperties(transforms);
      } else {
        v = transforms.map(function (transform) {
          return transformValueForProperty(transform[0], transform[1]);
        }).join(" ");
        matrix = Matrix.fromTransform(Matrix.matrixForTransform(v));
      }
      endProperties['transform'] = matrix.decompose();
      if (isSVG) {
        startProperties.transform.applyRotateCenter([endProperties.transform.props.rotate[1], endProperties.transform.props.rotate[2]]);
      }
    }
    addUnitsToNumberInterpolables(el, endProperties);
    animations.push({
      el: el,
      properties: {
        start: startProperties,
        end: endProperties
      },
      options: options,
      curve: options.type.call(options.type, options)
    });
    return startRunLoop();
  };

  timeouts = [];

  timeoutLastId = 0;

  setRealTimeout = function setRealTimeout(timeout) {
    if (!isDocumentVisible()) {
      return;
    }
    return rAF(function () {
      if (timeouts.indexOf(timeout) === -1) {
        return;
      }
      return timeout.realTimeoutId = setTimeout(function () {
        timeout.fn();
        return cancelTimeout(timeout.id);
      }, timeout.delay);
    });
  };

  addTimeout = function addTimeout(fn, delay) {
    var timeout;
    timeoutLastId += 1;
    timeout = {
      id: timeoutLastId,
      tStart: Date.now(),
      fn: fn,
      delay: delay,
      originalDelay: delay
    };
    setRealTimeout(timeout);
    timeouts.push(timeout);
    return timeoutLastId;
  };

  cancelTimeout = function cancelTimeout(id) {
    return timeouts = timeouts.filter(function (timeout) {
      if (timeout.id === id && timeout.realTimeoutId) {
        clearTimeout(timeout.realTimeoutId);
      }
      return timeout.id !== id;
    });
  };

  leftDelayForTimeout = function leftDelayForTimeout(time, timeout) {
    var consumedDelay;
    if (time != null) {
      consumedDelay = time - timeout.tStart;
      return timeout.originalDelay - consumedDelay;
    } else {
      return timeout.originalDelay;
    }
  };

  if (typeof window !== "undefined" && window !== null) {
    window.addEventListener('unload', function () {});
  }

  timeBeforeVisibilityChange = null;

  observeVisibilityChange(function (visible) {
    var animation, difference, timeout, _i, _j, _k, _len, _len1, _len2, _results;
    runLoopPaused = !visible;
    if (!visible) {
      timeBeforeVisibilityChange = Date.now();
      _results = [];
      for (_i = 0, _len = timeouts.length; _i < _len; _i++) {
        timeout = timeouts[_i];
        _results.push(clearTimeout(timeout.realTimeoutId));
      }
      return _results;
    } else {
      if (runLoopRunning) {
        difference = Date.now() - timeBeforeVisibilityChange;
        for (_j = 0, _len1 = animations.length; _j < _len1; _j++) {
          animation = animations[_j];
          if (animation.tStart != null) {
            animation.tStart += difference;
          }
        }
      }
      for (_k = 0, _len2 = timeouts.length; _k < _len2; _k++) {
        timeout = timeouts[_k];
        timeout.delay = leftDelayForTimeout(timeBeforeVisibilityChange, timeout);
        setRealTimeout(timeout);
      }
      return timeBeforeVisibilityChange = null;
    }
  });

  dynamics = {};

  dynamics.linear = function () {
    return function (t) {
      return t;
    };
  };

  dynamics.spring = function (options) {
    var A1, A2, decal, frequency, friction, s;
    if (options == null) {
      options = {};
    }
    applyDefaults(options, dynamics.spring.defaults);
    frequency = Math.max(1, options.frequency / 20);
    friction = Math.pow(20, options.friction / 100);
    s = options.anticipationSize / 1000;
    decal = Math.max(0, s);
    A1 = function A1(t) {
      var M, a, b, x0, x1;
      M = 0.8;
      x0 = s / (1 - s);
      x1 = 0;
      b = (x0 - M * x1) / (x0 - x1);
      a = (M - b) / x0;
      return a * t * options.anticipationStrength / 100 + b;
    };
    A2 = function A2(t) {
      return Math.pow(friction / 10, -t) * (1 - t);
    };
    return function (t) {
      var A, At, a, angle, b, frictionT, y0, yS;
      frictionT = t / (1 - s) - s / (1 - s);
      if (t < s) {
        yS = s / (1 - s) - s / (1 - s);
        y0 = 0 / (1 - s) - s / (1 - s);
        b = Math.acos(1 / A1(yS));
        a = (Math.acos(1 / A1(y0)) - b) / (frequency * -s);
        A = A1;
      } else {
        A = A2;
        b = 0;
        a = 1;
      }
      At = A(frictionT);
      angle = frequency * (t - s) * a + b;
      return 1 - At * Math.cos(angle);
    };
  };

  dynamics.bounce = function (options) {
    var A, fn, frequency, friction;
    if (options == null) {
      options = {};
    }
    applyDefaults(options, dynamics.bounce.defaults);
    frequency = Math.max(1, options.frequency / 20);
    friction = Math.pow(20, options.friction / 100);
    A = function A(t) {
      return Math.pow(friction / 10, -t) * (1 - t);
    };
    fn = function fn(t) {
      var At, a, angle, b;
      b = -3.14 / 2;
      a = 1;
      At = A(t);
      angle = frequency * t * a + b;
      return At * Math.cos(angle);
    };
    fn.returnsToSelf = true;
    return fn;
  };

  dynamics.gravity = function (options) {
    var L, bounciness, curves, elasticity, fn, getPointInCurve, gravity;
    if (options == null) {
      options = {};
    }
    applyDefaults(options, dynamics.gravity.defaults);
    bounciness = Math.min(options.bounciness / 1250, 0.8);
    elasticity = options.elasticity / 1000;
    gravity = 100;
    curves = [];
    L = function () {
      var b, curve;
      b = Math.sqrt(2 / gravity);
      curve = {
        a: -b,
        b: b,
        H: 1
      };
      if (options.returnsToSelf) {
        curve.a = 0;
        curve.b = curve.b * 2;
      }
      while (curve.H > 0.001) {
        L = curve.b - curve.a;
        curve = {
          a: curve.b,
          b: curve.b + L * bounciness,
          H: curve.H * bounciness * bounciness
        };
      }
      return curve.b;
    }();
    getPointInCurve = function getPointInCurve(a, b, H, t) {
      var c, t2;
      L = b - a;
      t2 = 2 / L * t - 1 - a * 2 / L;
      c = t2 * t2 * H - H + 1;
      if (options.returnsToSelf) {
        c = 1 - c;
      }
      return c;
    };
    (function () {
      var L2, b, curve, _results;
      b = Math.sqrt(2 / (gravity * L * L));
      curve = {
        a: -b,
        b: b,
        H: 1
      };
      if (options.returnsToSelf) {
        curve.a = 0;
        curve.b = curve.b * 2;
      }
      curves.push(curve);
      L2 = L;
      _results = [];
      while (curve.b < 1 && curve.H > 0.001) {
        L2 = curve.b - curve.a;
        curve = {
          a: curve.b,
          b: curve.b + L2 * bounciness,
          H: curve.H * elasticity
        };
        _results.push(curves.push(curve));
      }
      return _results;
    })();
    fn = function fn(t) {
      var curve, i, v;
      i = 0;
      curve = curves[i];
      while (!(t >= curve.a && t <= curve.b)) {
        i += 1;
        curve = curves[i];
        if (!curve) {
          break;
        }
      }
      if (!curve) {
        v = options.returnsToSelf ? 0 : 1;
      } else {
        v = getPointInCurve(curve.a, curve.b, curve.H, t);
      }
      return v;
    };
    fn.returnsToSelf = options.returnsToSelf;
    return fn;
  };

  dynamics.forceWithGravity = function (options) {
    if (options == null) {
      options = {};
    }
    applyDefaults(options, dynamics.forceWithGravity.defaults);
    options.returnsToSelf = true;
    return dynamics.gravity(options);
  };

  dynamics.bezier = function () {
    var Bezier, Bezier_, yForX;
    Bezier_ = function Bezier_(t, p0, p1, p2, p3) {
      return Math.pow(1 - t, 3) * p0 + 3 * Math.pow(1 - t, 2) * t * p1 + 3 * (1 - t) * Math.pow(t, 2) * p2 + Math.pow(t, 3) * p3;
    };
    Bezier = function Bezier(t, p0, p1, p2, p3) {
      return {
        x: Bezier_(t, p0.x, p1.x, p2.x, p3.x),
        y: Bezier_(t, p0.y, p1.y, p2.y, p3.y)
      };
    };
    yForX = function yForX(xTarget, Bs, returnsToSelf) {
      var B, aB, i, lower, percent, upper, x, xTolerance, _i, _len;
      B = null;
      for (_i = 0, _len = Bs.length; _i < _len; _i++) {
        aB = Bs[_i];
        if (xTarget >= aB(0).x && xTarget <= aB(1).x) {
          B = aB;
        }
        if (B !== null) {
          break;
        }
      }
      if (!B) {
        if (returnsToSelf) {
          return 0;
        } else {
          return 1;
        }
      }
      xTolerance = 0.0001;
      lower = 0;
      upper = 1;
      percent = (upper + lower) / 2;
      x = B(percent).x;
      i = 0;
      while (Math.abs(xTarget - x) > xTolerance && i < 100) {
        if (xTarget > x) {
          lower = percent;
        } else {
          upper = percent;
        }
        percent = (upper + lower) / 2;
        x = B(percent).x;
        i += 1;
      }
      return B(percent).y;
    };
    return function (options) {
      var Bs, fn, points;
      if (options == null) {
        options = {};
      }
      points = options.points;
      Bs = function () {
        var i, k, _fn;
        Bs = [];
        _fn = function _fn(pointA, pointB) {
          var B2;
          B2 = function B2(t) {
            return Bezier(t, pointA, pointA.cp[pointA.cp.length - 1], pointB.cp[0], pointB);
          };
          return Bs.push(B2);
        };
        for (i in points) {
          k = parseInt(i);
          if (k >= points.length - 1) {
            break;
          }
          _fn(points[k], points[k + 1]);
        }
        return Bs;
      }();
      fn = function fn(t) {
        if (t === 0) {
          return 0;
        } else if (t === 1) {
          return 1;
        } else {
          return yForX(t, Bs, this.returnsToSelf);
        }
      };
      fn.returnsToSelf = points[points.length - 1].y === 0;
      return fn;
    };
  }();

  dynamics.easeInOut = function (options) {
    var friction, _ref;
    if (options == null) {
      options = {};
    }
    friction = (_ref = options.friction) != null ? _ref : dynamics.easeInOut.defaults.friction;
    return dynamics.bezier({
      points: [{
        x: 0,
        y: 0,
        cp: [{
          x: 0.92 - friction / 1000,
          y: 0
        }]
      }, {
        x: 1,
        y: 1,
        cp: [{
          x: 0.08 + friction / 1000,
          y: 1
        }]
      }]
    });
  };

  dynamics.easeIn = function (options) {
    var friction, _ref;
    if (options == null) {
      options = {};
    }
    friction = (_ref = options.friction) != null ? _ref : dynamics.easeIn.defaults.friction;
    return dynamics.bezier({
      points: [{
        x: 0,
        y: 0,
        cp: [{
          x: 0.92 - friction / 1000,
          y: 0
        }]
      }, {
        x: 1,
        y: 1,
        cp: [{
          x: 1,
          y: 1
        }]
      }]
    });
  };

  dynamics.easeOut = function (options) {
    var friction, _ref;
    if (options == null) {
      options = {};
    }
    friction = (_ref = options.friction) != null ? _ref : dynamics.easeOut.defaults.friction;
    return dynamics.bezier({
      points: [{
        x: 0,
        y: 0,
        cp: [{
          x: 0,
          y: 0
        }]
      }, {
        x: 1,
        y: 1,
        cp: [{
          x: 0.08 + friction / 1000,
          y: 1
        }]
      }]
    });
  };

  dynamics.spring.defaults = {
    frequency: 300,
    friction: 200,
    anticipationSize: 0,
    anticipationStrength: 0
  };

  dynamics.bounce.defaults = {
    frequency: 300,
    friction: 200
  };

  dynamics.forceWithGravity.defaults = dynamics.gravity.defaults = {
    bounciness: 400,
    elasticity: 200
  };

  dynamics.easeInOut.defaults = dynamics.easeIn.defaults = dynamics.easeOut.defaults = {
    friction: 500
  };

  dynamics.css = makeArrayFn(function (el, properties) {
    return applyProperties(el, properties, true);
  });

  dynamics.animate = makeArrayFn(function (el, properties, options) {
    var id;
    if (options == null) {
      options = {};
    }
    options = clone(options);
    applyDefaults(options, {
      type: dynamics.easeInOut,
      duration: 1000,
      delay: 0,
      animated: true
    });
    options.duration = Math.max(0, options.duration * slowRatio);
    options.delay = Math.max(0, options.delay);
    if (options.delay === 0) {
      return startAnimation(el, properties, options);
    } else {
      id = dynamics.setTimeout(function () {
        return startAnimation(el, properties, options, id);
      }, options.delay);
      return animationsTimeouts.push({
        id: id,
        el: el
      });
    }
  });

  dynamics.stop = makeArrayFn(function (el, options) {
    if (options == null) {
      options = {};
    }
    if (options.timeout == null) {
      options.timeout = true;
    }
    if (options.timeout) {
      animationsTimeouts = animationsTimeouts.filter(function (timeout) {
        if (timeout.el === el && (options.filter == null || options.filter(timeout))) {
          dynamics.clearTimeout(timeout.id);
          return false;
        }
        return true;
      });
    }
    return animations = animations.filter(function (animation) {
      return animation.el !== el;
    });
  });

  dynamics.setTimeout = function (fn, delay) {
    return addTimeout(fn, delay * slowRatio);
  };

  dynamics.clearTimeout = function (id) {
    return cancelTimeout(id);
  };

  dynamics.toggleSlow = function () {
    slow = !slow;
    if (slow) {
      slowRatio = 3;
    } else {
      slowRatio = 1;
    }
    return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log("dynamics.js: slow animations " + (slow ? "enabled" : "disabled")) : void 0 : void 0;
  };

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    module.exports = dynamics;
  } else if (typeof define === "function") {
    define('dynamics', function () {
      return dynamics;
    });
  } else {
    window.dynamics = dynamics;
  }
}).call(undefined);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],27:[function(require,module,exports){
"use strict";

!function (e, t, i) {
  "use strict";
  "function" == typeof define && define.amd ? define(i) : "undefined" != typeof module && module.exports ? module.exports = i() : t.exports ? t.exports = i() : t[e] = i();
}("Fingerprint2", undefined, function () {
  "use strict";
  var e = function e(t) {
    if (!(this instanceof e)) return new e(t);var i = { swfContainerId: "fingerprintjs2", swfPath: "flash/compiled/FontList.swf", detectScreenOrientation: !0, sortPluginsFor: [/palemoon/i], userDefinedFonts: [] };this.options = this.extend(t, i), this.nativeForEach = Array.prototype.forEach, this.nativeMap = Array.prototype.map;
  };return e.prototype = { extend: function extend(e, t) {
      if (null == e) return t;for (var i in e) {
        null != e[i] && t[i] !== e[i] && (t[i] = e[i]);
      }return t;
    }, get: function get(e) {
      var t = [];t = this.userAgentKey(t), t = this.languageKey(t), t = this.colorDepthKey(t), t = this.pixelRatioKey(t), t = this.hardwareConcurrencyKey(t), t = this.screenResolutionKey(t), t = this.availableScreenResolutionKey(t), t = this.timezoneOffsetKey(t), t = this.sessionStorageKey(t), t = this.localStorageKey(t), t = this.indexedDbKey(t), t = this.addBehaviorKey(t), t = this.openDatabaseKey(t), t = this.cpuClassKey(t), t = this.platformKey(t), t = this.doNotTrackKey(t), t = this.pluginsKey(t), t = this.canvasKey(t), t = this.webglKey(t), t = this.adBlockKey(t), t = this.hasLiedLanguagesKey(t), t = this.hasLiedResolutionKey(t), t = this.hasLiedOsKey(t), t = this.hasLiedBrowserKey(t), t = this.touchSupportKey(t), t = this.customEntropyFunction(t);var i = this;this.fontsKey(t, function (t) {
        var a = [];i.each(t, function (e) {
          var t = e.value;"undefined" != typeof e.value.join && (t = e.value.join(";")), a.push(t);
        });var r = i.x64hash128(a.join("~~~"), 31);return e(r, t);
      });
    }, customEntropyFunction: function customEntropyFunction(e) {
      return "function" == typeof this.options.customFunction && e.push({ key: "custom", value: this.options.customFunction() }), e;
    }, userAgentKey: function userAgentKey(e) {
      return this.options.excludeUserAgent || e.push({ key: "user_agent", value: this.getUserAgent() }), e;
    }, getUserAgent: function getUserAgent() {
      return navigator.userAgent;
    }, languageKey: function languageKey(e) {
      return this.options.excludeLanguage || e.push({ key: "language", value: navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || "" }), e;
    }, colorDepthKey: function colorDepthKey(e) {
      return this.options.excludeColorDepth || e.push({ key: "color_depth", value: screen.colorDepth || -1 }), e;
    }, pixelRatioKey: function pixelRatioKey(e) {
      return this.options.excludePixelRatio || e.push({ key: "pixel_ratio", value: this.getPixelRatio() }), e;
    }, getPixelRatio: function getPixelRatio() {
      return window.devicePixelRatio || "";
    }, screenResolutionKey: function screenResolutionKey(e) {
      return this.options.excludeScreenResolution ? e : this.getScreenResolution(e);
    }, getScreenResolution: function getScreenResolution(e) {
      var t;return t = this.options.detectScreenOrientation && screen.height > screen.width ? [screen.height, screen.width] : [screen.width, screen.height], "undefined" != typeof t && e.push({ key: "resolution", value: t }), e;
    }, availableScreenResolutionKey: function availableScreenResolutionKey(e) {
      return this.options.excludeAvailableScreenResolution ? e : this.getAvailableScreenResolution(e);
    }, getAvailableScreenResolution: function getAvailableScreenResolution(e) {
      var t;return screen.availWidth && screen.availHeight && (t = this.options.detectScreenOrientation ? screen.availHeight > screen.availWidth ? [screen.availHeight, screen.availWidth] : [screen.availWidth, screen.availHeight] : [screen.availHeight, screen.availWidth]), "undefined" != typeof t && e.push({ key: "available_resolution", value: t }), e;
    }, timezoneOffsetKey: function timezoneOffsetKey(e) {
      return this.options.excludeTimezoneOffset || e.push({ key: "timezone_offset", value: new Date().getTimezoneOffset() }), e;
    }, sessionStorageKey: function sessionStorageKey(e) {
      return !this.options.excludeSessionStorage && this.hasSessionStorage() && e.push({ key: "session_storage", value: 1 }), e;
    }, localStorageKey: function localStorageKey(e) {
      return !this.options.excludeSessionStorage && this.hasLocalStorage() && e.push({ key: "local_storage", value: 1 }), e;
    }, indexedDbKey: function indexedDbKey(e) {
      return !this.options.excludeIndexedDB && this.hasIndexedDB() && e.push({ key: "indexed_db", value: 1 }), e;
    }, addBehaviorKey: function addBehaviorKey(e) {
      return document.body && !this.options.excludeAddBehavior && document.body.addBehavior && e.push({ key: "add_behavior", value: 1 }), e;
    }, openDatabaseKey: function openDatabaseKey(e) {
      return !this.options.excludeOpenDatabase && window.openDatabase && e.push({ key: "open_database", value: 1 }), e;
    }, cpuClassKey: function cpuClassKey(e) {
      return this.options.excludeCpuClass || e.push({ key: "cpu_class", value: this.getNavigatorCpuClass() }), e;
    }, platformKey: function platformKey(e) {
      return this.options.excludePlatform || e.push({ key: "navigator_platform", value: this.getNavigatorPlatform() }), e;
    }, doNotTrackKey: function doNotTrackKey(e) {
      return this.options.excludeDoNotTrack || e.push({ key: "do_not_track", value: this.getDoNotTrack() }), e;
    }, canvasKey: function canvasKey(e) {
      return !this.options.excludeCanvas && this.isCanvasSupported() && e.push({ key: "canvas", value: this.getCanvasFp() }), e;
    }, webglKey: function webglKey(e) {
      return this.options.excludeWebGL ? e : this.isWebGlSupported() ? (e.push({ key: "webgl", value: this.getWebglFp() }), e) : e;
    }, adBlockKey: function adBlockKey(e) {
      return this.options.excludeAdBlock || e.push({ key: "adblock", value: this.getAdBlock() }), e;
    }, hasLiedLanguagesKey: function hasLiedLanguagesKey(e) {
      return this.options.excludeHasLiedLanguages || e.push({ key: "has_lied_languages", value: this.getHasLiedLanguages() }), e;
    }, hasLiedResolutionKey: function hasLiedResolutionKey(e) {
      return this.options.excludeHasLiedResolution || e.push({ key: "has_lied_resolution", value: this.getHasLiedResolution() }), e;
    }, hasLiedOsKey: function hasLiedOsKey(e) {
      return this.options.excludeHasLiedOs || e.push({ key: "has_lied_os", value: this.getHasLiedOs() }), e;
    }, hasLiedBrowserKey: function hasLiedBrowserKey(e) {
      return this.options.excludeHasLiedBrowser || e.push({ key: "has_lied_browser", value: this.getHasLiedBrowser() }), e;
    }, fontsKey: function fontsKey(e, t) {
      return this.options.excludeJsFonts ? this.flashFontsKey(e, t) : this.jsFontsKey(e, t);
    }, flashFontsKey: function flashFontsKey(e, t) {
      return this.options.excludeFlashFonts ? t(e) : this.hasSwfObjectLoaded() && this.hasMinFlashInstalled() ? "undefined" == typeof this.options.swfPath ? t(e) : void this.loadSwfAndDetectFonts(function (i) {
        e.push({ key: "swf_fonts", value: i.join(";") }), t(e);
      }) : t(e);
    }, jsFontsKey: function jsFontsKey(e, t) {
      var i = this;return setTimeout(function () {
        var a = ["monospace", "sans-serif", "serif"],
            r = ["Andale Mono", "Arial", "Arial Black", "Arial Hebrew", "Arial MT", "Arial Narrow", "Arial Rounded MT Bold", "Arial Unicode MS", "Bitstream Vera Sans Mono", "Book Antiqua", "Bookman Old Style", "Calibri", "Cambria", "Cambria Math", "Century", "Century Gothic", "Century Schoolbook", "Comic Sans", "Comic Sans MS", "Consolas", "Courier", "Courier New", "Garamond", "Geneva", "Georgia", "Helvetica", "Helvetica Neue", "Impact", "Lucida Bright", "Lucida Calligraphy", "Lucida Console", "Lucida Fax", "LUCIDA GRANDE", "Lucida Handwriting", "Lucida Sans", "Lucida Sans Typewriter", "Lucida Sans Unicode", "Microsoft Sans Serif", "Monaco", "Monotype Corsiva", "MS Gothic", "MS Outlook", "MS PGothic", "MS Reference Sans Serif", "MS Sans Serif", "MS Serif", "MYRIAD", "MYRIAD PRO", "Palatino", "Palatino Linotype", "Segoe Print", "Segoe Script", "Segoe UI", "Segoe UI Light", "Segoe UI Semibold", "Segoe UI Symbol", "Tahoma", "Times", "Times New Roman", "Times New Roman PS", "Trebuchet MS", "Verdana", "Wingdings", "Wingdings 2", "Wingdings 3"],
            n = ["Abadi MT Condensed Light", "Academy Engraved LET", "ADOBE CASLON PRO", "Adobe Garamond", "ADOBE GARAMOND PRO", "Agency FB", "Aharoni", "Albertus Extra Bold", "Albertus Medium", "Algerian", "Amazone BT", "American Typewriter", "American Typewriter Condensed", "AmerType Md BT", "Andalus", "Angsana New", "AngsanaUPC", "Antique Olive", "Aparajita", "Apple Chancery", "Apple Color Emoji", "Apple SD Gothic Neo", "Arabic Typesetting", "ARCHER", "ARNO PRO", "Arrus BT", "Aurora Cn BT", "AvantGarde Bk BT", "AvantGarde Md BT", "AVENIR", "Ayuthaya", "Bandy", "Bangla Sangam MN", "Bank Gothic", "BankGothic Md BT", "Baskerville", "Baskerville Old Face", "Batang", "BatangChe", "Bauer Bodoni", "Bauhaus 93", "Bazooka", "Bell MT", "Bembo", "Benguiat Bk BT", "Berlin Sans FB", "Berlin Sans FB Demi", "Bernard MT Condensed", "BernhardFashion BT", "BernhardMod BT", "Big Caslon", "BinnerD", "Blackadder ITC", "BlairMdITC TT", "Bodoni 72", "Bodoni 72 Oldstyle", "Bodoni 72 Smallcaps", "Bodoni MT", "Bodoni MT Black", "Bodoni MT Condensed", "Bodoni MT Poster Compressed", "Bookshelf Symbol 7", "Boulder", "Bradley Hand", "Bradley Hand ITC", "Bremen Bd BT", "Britannic Bold", "Broadway", "Browallia New", "BrowalliaUPC", "Brush Script MT", "Californian FB", "Calisto MT", "Calligrapher", "Candara", "CaslonOpnface BT", "Castellar", "Centaur", "Cezanne", "CG Omega", "CG Times", "Chalkboard", "Chalkboard SE", "Chalkduster", "Charlesworth", "Charter Bd BT", "Charter BT", "Chaucer", "ChelthmITC Bk BT", "Chiller", "Clarendon", "Clarendon Condensed", "CloisterBlack BT", "Cochin", "Colonna MT", "Constantia", "Cooper Black", "Copperplate", "Copperplate Gothic", "Copperplate Gothic Bold", "Copperplate Gothic Light", "CopperplGoth Bd BT", "Corbel", "Cordia New", "CordiaUPC", "Cornerstone", "Coronet", "Cuckoo", "Curlz MT", "DaunPenh", "Dauphin", "David", "DB LCD Temp", "DELICIOUS", "Denmark", "DFKai-SB", "Didot", "DilleniaUPC", "DIN", "DokChampa", "Dotum", "DotumChe", "Ebrima", "Edwardian Script ITC", "Elephant", "English 111 Vivace BT", "Engravers MT", "EngraversGothic BT", "Eras Bold ITC", "Eras Demi ITC", "Eras Light ITC", "Eras Medium ITC", "EucrosiaUPC", "Euphemia", "Euphemia UCAS", "EUROSTILE", "Exotc350 Bd BT", "FangSong", "Felix Titling", "Fixedsys", "FONTIN", "Footlight MT Light", "Forte", "FrankRuehl", "Fransiscan", "Freefrm721 Blk BT", "FreesiaUPC", "Freestyle Script", "French Script MT", "FrnkGothITC Bk BT", "Fruitger", "FRUTIGER", "Futura", "Futura Bk BT", "Futura Lt BT", "Futura Md BT", "Futura ZBlk BT", "FuturaBlack BT", "Gabriola", "Galliard BT", "Gautami", "Geeza Pro", "Geometr231 BT", "Geometr231 Hv BT", "Geometr231 Lt BT", "GeoSlab 703 Lt BT", "GeoSlab 703 XBd BT", "Gigi", "Gill Sans", "Gill Sans MT", "Gill Sans MT Condensed", "Gill Sans MT Ext Condensed Bold", "Gill Sans Ultra Bold", "Gill Sans Ultra Bold Condensed", "Gisha", "Gloucester MT Extra Condensed", "GOTHAM", "GOTHAM BOLD", "Goudy Old Style", "Goudy Stout", "GoudyHandtooled BT", "GoudyOLSt BT", "Gujarati Sangam MN", "Gulim", "GulimChe", "Gungsuh", "GungsuhChe", "Gurmukhi MN", "Haettenschweiler", "Harlow Solid Italic", "Harrington", "Heather", "Heiti SC", "Heiti TC", "HELV", "Herald", "High Tower Text", "Hiragino Kaku Gothic ProN", "Hiragino Mincho ProN", "Hoefler Text", "Humanst 521 Cn BT", "Humanst521 BT", "Humanst521 Lt BT", "Imprint MT Shadow", "Incised901 Bd BT", "Incised901 BT", "Incised901 Lt BT", "INCONSOLATA", "Informal Roman", "Informal011 BT", "INTERSTATE", "IrisUPC", "Iskoola Pota", "JasmineUPC", "Jazz LET", "Jenson", "Jester", "Jokerman", "Juice ITC", "Kabel Bk BT", "Kabel Ult BT", "Kailasa", "KaiTi", "Kalinga", "Kannada Sangam MN", "Kartika", "Kaufmann Bd BT", "Kaufmann BT", "Khmer UI", "KodchiangUPC", "Kokila", "Korinna BT", "Kristen ITC", "Krungthep", "Kunstler Script", "Lao UI", "Latha", "Leelawadee", "Letter Gothic", "Levenim MT", "LilyUPC", "Lithograph", "Lithograph Light", "Long Island", "Lydian BT", "Magneto", "Maiandra GD", "Malayalam Sangam MN", "Malgun Gothic", "Mangal", "Marigold", "Marion", "Marker Felt", "Market", "Marlett", "Matisse ITC", "Matura MT Script Capitals", "Meiryo", "Meiryo UI", "Microsoft Himalaya", "Microsoft JhengHei", "Microsoft New Tai Lue", "Microsoft PhagsPa", "Microsoft Tai Le", "Microsoft Uighur", "Microsoft YaHei", "Microsoft Yi Baiti", "MingLiU", "MingLiU_HKSCS", "MingLiU_HKSCS-ExtB", "MingLiU-ExtB", "Minion", "Minion Pro", "Miriam", "Miriam Fixed", "Mistral", "Modern", "Modern No. 20", "Mona Lisa Solid ITC TT", "Mongolian Baiti", "MONO", "MoolBoran", "Mrs Eaves", "MS LineDraw", "MS Mincho", "MS PMincho", "MS Reference Specialty", "MS UI Gothic", "MT Extra", "MUSEO", "MV Boli", "Nadeem", "Narkisim", "NEVIS", "News Gothic", "News GothicMT", "NewsGoth BT", "Niagara Engraved", "Niagara Solid", "Noteworthy", "NSimSun", "Nyala", "OCR A Extended", "Old Century", "Old English Text MT", "Onyx", "Onyx BT", "OPTIMA", "Oriya Sangam MN", "OSAKA", "OzHandicraft BT", "Palace Script MT", "Papyrus", "Parchment", "Party LET", "Pegasus", "Perpetua", "Perpetua Titling MT", "PetitaBold", "Pickwick", "Plantagenet Cherokee", "Playbill", "PMingLiU", "PMingLiU-ExtB", "Poor Richard", "Poster", "PosterBodoni BT", "PRINCETOWN LET", "Pristina", "PTBarnum BT", "Pythagoras", "Raavi", "Rage Italic", "Ravie", "Ribbon131 Bd BT", "Rockwell", "Rockwell Condensed", "Rockwell Extra Bold", "Rod", "Roman", "Sakkal Majalla", "Santa Fe LET", "Savoye LET", "Sceptre", "Script", "Script MT Bold", "SCRIPTINA", "Serifa", "Serifa BT", "Serifa Th BT", "ShelleyVolante BT", "Sherwood", "Shonar Bangla", "Showcard Gothic", "Shruti", "Signboard", "SILKSCREEN", "SimHei", "Simplified Arabic", "Simplified Arabic Fixed", "SimSun", "SimSun-ExtB", "Sinhala Sangam MN", "Sketch Rockwell", "Skia", "Small Fonts", "Snap ITC", "Snell Roundhand", "Socket", "Souvenir Lt BT", "Staccato222 BT", "Steamer", "Stencil", "Storybook", "Styllo", "Subway", "Swis721 BlkEx BT", "Swiss911 XCm BT", "Sylfaen", "Synchro LET", "System", "Tamil Sangam MN", "Technical", "Teletype", "Telugu Sangam MN", "Tempus Sans ITC", "Terminal", "Thonburi", "Traditional Arabic", "Trajan", "TRAJAN PRO", "Tristan", "Tubular", "Tunga", "Tw Cen MT", "Tw Cen MT Condensed", "Tw Cen MT Condensed Extra Bold", "TypoUpright BT", "Unicorn", "Univers", "Univers CE 55 Medium", "Univers Condensed", "Utsaah", "Vagabond", "Vani", "Vijaya", "Viner Hand ITC", "VisualUI", "Vivaldi", "Vladimir Script", "Vrinda", "Westminster", "WHITNEY", "Wide Latin", "ZapfEllipt BT", "ZapfHumnst BT", "ZapfHumnst Dm BT", "Zapfino", "Zurich BlkEx BT", "Zurich Ex BT", "ZWAdobeF"];i.options.extendedJsFonts && (r = r.concat(n)), r = r.concat(i.options.userDefinedFonts);var o = "mmmmmmmmmmlli",
            s = "72px",
            l = document.getElementsByTagName("body")[0],
            h = document.createElement("div"),
            u = document.createElement("div"),
            c = {},
            d = {},
            g = function g() {
          var e = document.createElement("span");return e.style.position = "absolute", e.style.left = "-9999px", e.style.fontSize = s, e.style.lineHeight = "normal", e.innerHTML = o, e;
        },
            p = function p(e, t) {
          var i = g();return i.style.fontFamily = "'" + e + "'," + t, i;
        },
            f = function f() {
          for (var e = [], t = 0, i = a.length; t < i; t++) {
            var r = g();r.style.fontFamily = a[t], h.appendChild(r), e.push(r);
          }return e;
        },
            m = function m() {
          for (var e = {}, t = 0, i = r.length; t < i; t++) {
            for (var n = [], o = 0, s = a.length; o < s; o++) {
              var l = p(r[t], a[o]);u.appendChild(l), n.push(l);
            }e[r[t]] = n;
          }return e;
        },
            T = function T(e) {
          for (var t = !1, i = 0; i < a.length; i++) {
            if (t = e[i].offsetWidth !== c[a[i]] || e[i].offsetHeight !== d[a[i]]) return t;
          }return t;
        },
            S = f();l.appendChild(h);for (var x = 0, v = a.length; x < v; x++) {
          c[a[x]] = S[x].offsetWidth, d[a[x]] = S[x].offsetHeight;
        }var E = m();l.appendChild(u);for (var M = [], A = 0, y = r.length; A < y; A++) {
          T(E[r[A]]) && M.push(r[A]);
        }l.removeChild(u), l.removeChild(h), e.push({ key: "js_fonts", value: M }), t(e);
      }, 1);
    }, pluginsKey: function pluginsKey(e) {
      return this.options.excludePlugins || (this.isIE() ? this.options.excludeIEPlugins || e.push({ key: "ie_plugins", value: this.getIEPlugins() }) : e.push({ key: "regular_plugins", value: this.getRegularPlugins() })), e;
    }, getRegularPlugins: function getRegularPlugins() {
      for (var e = [], t = 0, i = navigator.plugins.length; t < i; t++) {
        e.push(navigator.plugins[t]);
      }return this.pluginsShouldBeSorted() && (e = e.sort(function (e, t) {
        return e.name > t.name ? 1 : e.name < t.name ? -1 : 0;
      })), this.map(e, function (e) {
        var t = this.map(e, function (e) {
          return [e.type, e.suffixes].join("~");
        }).join(",");return [e.name, e.description, t].join("::");
      }, this);
    }, getIEPlugins: function getIEPlugins() {
      var e = [];if (Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(window, "ActiveXObject") || "ActiveXObject" in window) {
        var t = ["AcroPDF.PDF", "Adodb.Stream", "AgControl.AgControl", "DevalVRXCtrl.DevalVRXCtrl.1", "MacromediaFlashPaper.MacromediaFlashPaper", "Msxml2.DOMDocument", "Msxml2.XMLHTTP", "PDF.PdfCtrl", "QuickTime.QuickTime", "QuickTimeCheckObject.QuickTimeCheck.1", "RealPlayer", "RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)", "RealVideo.RealVideo(tm) ActiveX Control (32-bit)", "Scripting.Dictionary", "SWCtl.SWCtl", "Shell.UIHelper", "ShockwaveFlash.ShockwaveFlash", "Skype.Detection", "TDCCtl.TDCCtl", "WMPlayer.OCX", "rmocx.RealPlayer G2 Control", "rmocx.RealPlayer G2 Control.1"];e = this.map(t, function (e) {
          try {
            return new ActiveXObject(e), e;
          } catch (t) {
            return null;
          }
        });
      }return navigator.plugins && (e = e.concat(this.getRegularPlugins())), e;
    }, pluginsShouldBeSorted: function pluginsShouldBeSorted() {
      for (var e = !1, t = 0, i = this.options.sortPluginsFor.length; t < i; t++) {
        var a = this.options.sortPluginsFor[t];if (navigator.userAgent.match(a)) {
          e = !0;break;
        }
      }return e;
    }, touchSupportKey: function touchSupportKey(e) {
      return this.options.excludeTouchSupport || e.push({ key: "touch_support", value: this.getTouchSupport() }), e;
    }, hardwareConcurrencyKey: function hardwareConcurrencyKey(e) {
      return this.options.excludeHardwareConcurrency || e.push({ key: "hardware_concurrency", value: this.getHardwareConcurrency() }), e;
    }, hasSessionStorage: function hasSessionStorage() {
      try {
        return !!window.sessionStorage;
      } catch (e) {
        return !0;
      }
    }, hasLocalStorage: function hasLocalStorage() {
      try {
        return !!window.localStorage;
      } catch (e) {
        return !0;
      }
    }, hasIndexedDB: function hasIndexedDB() {
      try {
        return !!window.indexedDB;
      } catch (e) {
        return !0;
      }
    }, getHardwareConcurrency: function getHardwareConcurrency() {
      return navigator.hardwareConcurrency ? navigator.hardwareConcurrency : "unknown";
    }, getNavigatorCpuClass: function getNavigatorCpuClass() {
      return navigator.cpuClass ? navigator.cpuClass : "unknown";
    }, getNavigatorPlatform: function getNavigatorPlatform() {
      return navigator.platform ? navigator.platform : "unknown";
    }, getDoNotTrack: function getDoNotTrack() {
      return navigator.doNotTrack ? navigator.doNotTrack : navigator.msDoNotTrack ? navigator.msDoNotTrack : window.doNotTrack ? window.doNotTrack : "unknown";
    }, getTouchSupport: function getTouchSupport() {
      var e = 0,
          t = !1;"undefined" != typeof navigator.maxTouchPoints ? e = navigator.maxTouchPoints : "undefined" != typeof navigator.msMaxTouchPoints && (e = navigator.msMaxTouchPoints);try {
        document.createEvent("TouchEvent"), t = !0;
      } catch (i) {}var a = "ontouchstart" in window;return [e, t, a];
    }, getCanvasFp: function getCanvasFp() {
      var e = [],
          t = document.createElement("canvas");t.width = 2e3, t.height = 200, t.style.display = "inline";var i = t.getContext("2d");return i.rect(0, 0, 10, 10), i.rect(2, 2, 6, 6), e.push("canvas winding:" + (i.isPointInPath(5, 5, "evenodd") === !1 ? "yes" : "no")), i.textBaseline = "alphabetic", i.fillStyle = "#f60", i.fillRect(125, 1, 62, 20), i.fillStyle = "#069", this.options.dontUseFakeFontInCanvas ? i.font = "11pt Arial" : i.font = "11pt no-real-font-123", i.fillText("Cwm fjordbank glyphs vext quiz, \uD83D\uDE03", 2, 15), i.fillStyle = "rgba(102, 204, 0, 0.2)", i.font = "18pt Arial", i.fillText("Cwm fjordbank glyphs vext quiz, \uD83D\uDE03", 4, 45), i.globalCompositeOperation = "multiply", i.fillStyle = "rgb(255,0,255)", i.beginPath(), i.arc(50, 50, 50, 0, 2 * Math.PI, !0), i.closePath(), i.fill(), i.fillStyle = "rgb(0,255,255)", i.beginPath(), i.arc(100, 50, 50, 0, 2 * Math.PI, !0), i.closePath(), i.fill(), i.fillStyle = "rgb(255,255,0)", i.beginPath(), i.arc(75, 100, 50, 0, 2 * Math.PI, !0), i.closePath(), i.fill(), i.fillStyle = "rgb(255,0,255)", i.arc(75, 75, 75, 0, 2 * Math.PI, !0), i.arc(75, 75, 25, 0, 2 * Math.PI, !0), i.fill("evenodd"), e.push("canvas fp:" + t.toDataURL()), e.join("~");
    }, getWebglFp: function getWebglFp() {
      var e,
          t = function t(_t) {
        return e.clearColor(0, 0, 0, 1), e.enable(e.DEPTH_TEST), e.depthFunc(e.LEQUAL), e.clear(e.COLOR_BUFFER_BIT | e.DEPTH_BUFFER_BIT), "[" + _t[0] + ", " + _t[1] + "]";
      },
          i = function i(e) {
        var t,
            i = e.getExtension("EXT_texture_filter_anisotropic") || e.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || e.getExtension("MOZ_EXT_texture_filter_anisotropic");return i ? (t = e.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT), 0 === t && (t = 2), t) : null;
      };if (e = this.getWebglCanvas(), !e) return null;var a = [],
          r = "attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}",
          n = "precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}",
          o = e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER, o);var s = new Float32Array([-.2, -.9, 0, .4, -.26, 0, 0, .732134444, 0]);e.bufferData(e.ARRAY_BUFFER, s, e.STATIC_DRAW), o.itemSize = 3, o.numItems = 3;var l = e.createProgram(),
          h = e.createShader(e.VERTEX_SHADER);e.shaderSource(h, r), e.compileShader(h);var u = e.createShader(e.FRAGMENT_SHADER);e.shaderSource(u, n), e.compileShader(u), e.attachShader(l, h), e.attachShader(l, u), e.linkProgram(l), e.useProgram(l), l.vertexPosAttrib = e.getAttribLocation(l, "attrVertex"), l.offsetUniform = e.getUniformLocation(l, "uniformOffset"), e.enableVertexAttribArray(l.vertexPosArray), e.vertexAttribPointer(l.vertexPosAttrib, o.itemSize, e.FLOAT, !1, 0, 0), e.uniform2f(l.offsetUniform, 1, 1), e.drawArrays(e.TRIANGLE_STRIP, 0, o.numItems), null != e.canvas && a.push(e.canvas.toDataURL()), a.push("extensions:" + e.getSupportedExtensions().join(";")), a.push("webgl aliased line width range:" + t(e.getParameter(e.ALIASED_LINE_WIDTH_RANGE))), a.push("webgl aliased point size range:" + t(e.getParameter(e.ALIASED_POINT_SIZE_RANGE))), a.push("webgl alpha bits:" + e.getParameter(e.ALPHA_BITS)), a.push("webgl antialiasing:" + (e.getContextAttributes().antialias ? "yes" : "no")), a.push("webgl blue bits:" + e.getParameter(e.BLUE_BITS)), a.push("webgl depth bits:" + e.getParameter(e.DEPTH_BITS)), a.push("webgl green bits:" + e.getParameter(e.GREEN_BITS)), a.push("webgl max anisotropy:" + i(e)), a.push("webgl max combined texture image units:" + e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)), a.push("webgl max cube map texture size:" + e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE)), a.push("webgl max fragment uniform vectors:" + e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS)), a.push("webgl max render buffer size:" + e.getParameter(e.MAX_RENDERBUFFER_SIZE)), a.push("webgl max texture image units:" + e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)), a.push("webgl max texture size:" + e.getParameter(e.MAX_TEXTURE_SIZE)), a.push("webgl max varying vectors:" + e.getParameter(e.MAX_VARYING_VECTORS)), a.push("webgl max vertex attribs:" + e.getParameter(e.MAX_VERTEX_ATTRIBS)), a.push("webgl max vertex texture image units:" + e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS)), a.push("webgl max vertex uniform vectors:" + e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS)), a.push("webgl max viewport dims:" + t(e.getParameter(e.MAX_VIEWPORT_DIMS))), a.push("webgl red bits:" + e.getParameter(e.RED_BITS)), a.push("webgl renderer:" + e.getParameter(e.RENDERER)), a.push("webgl shading language version:" + e.getParameter(e.SHADING_LANGUAGE_VERSION)), a.push("webgl stencil bits:" + e.getParameter(e.STENCIL_BITS)), a.push("webgl vendor:" + e.getParameter(e.VENDOR)), a.push("webgl version:" + e.getParameter(e.VERSION));try {
        var c = e.getExtension("WEBGL_debug_renderer_info");c && (a.push("webgl unmasked vendor:" + e.getParameter(c.UNMASKED_VENDOR_WEBGL)), a.push("webgl unmasked renderer:" + e.getParameter(c.UNMASKED_RENDERER_WEBGL)));
      } catch (d) {}return e.getShaderPrecisionFormat ? (a.push("webgl vertex shader high float precision:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_FLOAT).precision), a.push("webgl vertex shader high float precision rangeMin:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_FLOAT).rangeMin), a.push("webgl vertex shader high float precision rangeMax:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_FLOAT).rangeMax), a.push("webgl vertex shader medium float precision:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_FLOAT).precision), a.push("webgl vertex shader medium float precision rangeMin:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_FLOAT).rangeMin), a.push("webgl vertex shader medium float precision rangeMax:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_FLOAT).rangeMax), a.push("webgl vertex shader low float precision:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.LOW_FLOAT).precision), a.push("webgl vertex shader low float precision rangeMin:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.LOW_FLOAT).rangeMin), a.push("webgl vertex shader low float precision rangeMax:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.LOW_FLOAT).rangeMax), a.push("webgl fragment shader high float precision:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_FLOAT).precision), a.push("webgl fragment shader high float precision rangeMin:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_FLOAT).rangeMin), a.push("webgl fragment shader high float precision rangeMax:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_FLOAT).rangeMax), a.push("webgl fragment shader medium float precision:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_FLOAT).precision), a.push("webgl fragment shader medium float precision rangeMin:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_FLOAT).rangeMin), a.push("webgl fragment shader medium float precision rangeMax:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_FLOAT).rangeMax), a.push("webgl fragment shader low float precision:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.LOW_FLOAT).precision), a.push("webgl fragment shader low float precision rangeMin:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.LOW_FLOAT).rangeMin), a.push("webgl fragment shader low float precision rangeMax:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.LOW_FLOAT).rangeMax), a.push("webgl vertex shader high int precision:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_INT).precision), a.push("webgl vertex shader high int precision rangeMin:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_INT).rangeMin), a.push("webgl vertex shader high int precision rangeMax:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_INT).rangeMax), a.push("webgl vertex shader medium int precision:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_INT).precision), a.push("webgl vertex shader medium int precision rangeMin:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_INT).rangeMin), a.push("webgl vertex shader medium int precision rangeMax:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_INT).rangeMax), a.push("webgl vertex shader low int precision:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.LOW_INT).precision), a.push("webgl vertex shader low int precision rangeMin:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.LOW_INT).rangeMin), a.push("webgl vertex shader low int precision rangeMax:" + e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.LOW_INT).rangeMax), a.push("webgl fragment shader high int precision:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_INT).precision), a.push("webgl fragment shader high int precision rangeMin:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_INT).rangeMin), a.push("webgl fragment shader high int precision rangeMax:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_INT).rangeMax), a.push("webgl fragment shader medium int precision:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_INT).precision), a.push("webgl fragment shader medium int precision rangeMin:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_INT).rangeMin), a.push("webgl fragment shader medium int precision rangeMax:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_INT).rangeMax), a.push("webgl fragment shader low int precision:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.LOW_INT).precision), a.push("webgl fragment shader low int precision rangeMin:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.LOW_INT).rangeMin), a.push("webgl fragment shader low int precision rangeMax:" + e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.LOW_INT).rangeMax), a.join("~")) : a.join("~");
    }, getAdBlock: function getAdBlock() {
      var e = document.createElement("div");e.innerHTML = "&nbsp;", e.className = "adsbox";var t = !1;try {
        document.body.appendChild(e), t = 0 === document.getElementsByClassName("adsbox")[0].offsetHeight, document.body.removeChild(e);
      } catch (i) {
        t = !1;
      }return t;
    }, getHasLiedLanguages: function getHasLiedLanguages() {
      if ("undefined" != typeof navigator.languages) try {
        var e = navigator.languages[0].substr(0, 2);if (e !== navigator.language.substr(0, 2)) return !0;
      } catch (t) {
        return !0;
      }return !1;
    }, getHasLiedResolution: function getHasLiedResolution() {
      return screen.width < screen.availWidth || screen.height < screen.availHeight;
    }, getHasLiedOs: function getHasLiedOs() {
      var e,
          t = navigator.userAgent.toLowerCase(),
          i = navigator.oscpu,
          a = navigator.platform.toLowerCase();e = t.indexOf("windows phone") >= 0 ? "Windows Phone" : t.indexOf("win") >= 0 ? "Windows" : t.indexOf("android") >= 0 ? "Android" : t.indexOf("linux") >= 0 ? "Linux" : t.indexOf("iphone") >= 0 || t.indexOf("ipad") >= 0 ? "iOS" : t.indexOf("mac") >= 0 ? "Mac" : "Other";var r;if (r = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0, r && "Windows Phone" !== e && "Android" !== e && "iOS" !== e && "Other" !== e) return !0;if ("undefined" != typeof i) {
        if (i = i.toLowerCase(), i.indexOf("win") >= 0 && "Windows" !== e && "Windows Phone" !== e) return !0;if (i.indexOf("linux") >= 0 && "Linux" !== e && "Android" !== e) return !0;if (i.indexOf("mac") >= 0 && "Mac" !== e && "iOS" !== e) return !0;if (0 === i.indexOf("win") && 0 === i.indexOf("linux") && i.indexOf("mac") >= 0 && "other" !== e) return !0;
      }return a.indexOf("win") >= 0 && "Windows" !== e && "Windows Phone" !== e || (a.indexOf("linux") >= 0 || a.indexOf("android") >= 0 || a.indexOf("pike") >= 0) && "Linux" !== e && "Android" !== e || (a.indexOf("mac") >= 0 || a.indexOf("ipad") >= 0 || a.indexOf("ipod") >= 0 || a.indexOf("iphone") >= 0) && "Mac" !== e && "iOS" !== e || 0 === a.indexOf("win") && 0 === a.indexOf("linux") && a.indexOf("mac") >= 0 && "other" !== e || "undefined" == typeof navigator.plugins && "Windows" !== e && "Windows Phone" !== e;
    }, getHasLiedBrowser: function getHasLiedBrowser() {
      var e,
          t = navigator.userAgent.toLowerCase(),
          i = navigator.productSub;if (e = t.indexOf("firefox") >= 0 ? "Firefox" : t.indexOf("opera") >= 0 || t.indexOf("opr") >= 0 ? "Opera" : t.indexOf("chrome") >= 0 ? "Chrome" : t.indexOf("safari") >= 0 ? "Safari" : t.indexOf("trident") >= 0 ? "Internet Explorer" : "Other", ("Chrome" === e || "Safari" === e || "Opera" === e) && "20030107" !== i) return !0;var a = eval.toString().length;if (37 === a && "Safari" !== e && "Firefox" !== e && "Other" !== e) return !0;if (39 === a && "Internet Explorer" !== e && "Other" !== e) return !0;if (33 === a && "Chrome" !== e && "Opera" !== e && "Other" !== e) return !0;var r;try {
        throw "a";
      } catch (n) {
        try {
          n.toSource(), r = !0;
        } catch (o) {
          r = !1;
        }
      }return !(!r || "Firefox" === e || "Other" === e);
    }, isCanvasSupported: function isCanvasSupported() {
      var e = document.createElement("canvas");return !(!e.getContext || !e.getContext("2d"));
    }, isWebGlSupported: function isWebGlSupported() {
      if (!this.isCanvasSupported()) return !1;var e,
          t = document.createElement("canvas");try {
        e = t.getContext && (t.getContext("webgl") || t.getContext("experimental-webgl"));
      } catch (i) {
        e = !1;
      }return !!window.WebGLRenderingContext && !!e;
    }, isIE: function isIE() {
      return "Microsoft Internet Explorer" === navigator.appName || !("Netscape" !== navigator.appName || !/Trident/.test(navigator.userAgent));
    }, hasSwfObjectLoaded: function hasSwfObjectLoaded() {
      return "undefined" != typeof window.swfobject;
    }, hasMinFlashInstalled: function hasMinFlashInstalled() {
      return swfobject.hasFlashPlayerVersion("9.0.0");
    }, addFlashDivNode: function addFlashDivNode() {
      var e = document.createElement("div");e.setAttribute("id", this.options.swfContainerId), document.body.appendChild(e);
    }, loadSwfAndDetectFonts: function loadSwfAndDetectFonts(e) {
      var t = "___fp_swf_loaded";window[t] = function (t) {
        e(t);
      };var i = this.options.swfContainerId;this.addFlashDivNode();var a = { onReady: t },
          r = { allowScriptAccess: "always", menu: "false" };swfobject.embedSWF(this.options.swfPath, i, "1", "1", "9.0.0", !1, a, r, {});
    }, getWebglCanvas: function getWebglCanvas() {
      var e = document.createElement("canvas"),
          t = null;try {
        t = e.getContext("webgl") || e.getContext("experimental-webgl");
      } catch (i) {}return t || (t = null), t;
    }, each: function each(e, t, i) {
      if (null !== e) if (this.nativeForEach && e.forEach === this.nativeForEach) e.forEach(t, i);else if (e.length === +e.length) {
        for (var a = 0, r = e.length; a < r; a++) {
          if (t.call(i, e[a], a, e) === {}) return;
        }
      } else for (var n in e) {
        if (e.hasOwnProperty(n) && t.call(i, e[n], n, e) === {}) return;
      }
    }, map: function map(e, t, i) {
      var a = [];return null == e ? a : this.nativeMap && e.map === this.nativeMap ? e.map(t, i) : (this.each(e, function (e, r, n) {
        a[a.length] = t.call(i, e, r, n);
      }), a);
    }, x64Add: function x64Add(e, t) {
      e = [e[0] >>> 16, 65535 & e[0], e[1] >>> 16, 65535 & e[1]], t = [t[0] >>> 16, 65535 & t[0], t[1] >>> 16, 65535 & t[1]];var i = [0, 0, 0, 0];return i[3] += e[3] + t[3], i[2] += i[3] >>> 16, i[3] &= 65535, i[2] += e[2] + t[2], i[1] += i[2] >>> 16, i[2] &= 65535, i[1] += e[1] + t[1], i[0] += i[1] >>> 16, i[1] &= 65535, i[0] += e[0] + t[0], i[0] &= 65535, [i[0] << 16 | i[1], i[2] << 16 | i[3]];
    }, x64Multiply: function x64Multiply(e, t) {
      e = [e[0] >>> 16, 65535 & e[0], e[1] >>> 16, 65535 & e[1]], t = [t[0] >>> 16, 65535 & t[0], t[1] >>> 16, 65535 & t[1]];var i = [0, 0, 0, 0];return i[3] += e[3] * t[3], i[2] += i[3] >>> 16, i[3] &= 65535, i[2] += e[2] * t[3], i[1] += i[2] >>> 16, i[2] &= 65535, i[2] += e[3] * t[2], i[1] += i[2] >>> 16, i[2] &= 65535, i[1] += e[1] * t[3], i[0] += i[1] >>> 16, i[1] &= 65535, i[1] += e[2] * t[2], i[0] += i[1] >>> 16, i[1] &= 65535, i[1] += e[3] * t[1], i[0] += i[1] >>> 16, i[1] &= 65535, i[0] += e[0] * t[3] + e[1] * t[2] + e[2] * t[1] + e[3] * t[0], i[0] &= 65535, [i[0] << 16 | i[1], i[2] << 16 | i[3]];
    }, x64Rotl: function x64Rotl(e, t) {
      return t %= 64, 32 === t ? [e[1], e[0]] : t < 32 ? [e[0] << t | e[1] >>> 32 - t, e[1] << t | e[0] >>> 32 - t] : (t -= 32, [e[1] << t | e[0] >>> 32 - t, e[0] << t | e[1] >>> 32 - t]);
    }, x64LeftShift: function x64LeftShift(e, t) {
      return t %= 64, 0 === t ? e : t < 32 ? [e[0] << t | e[1] >>> 32 - t, e[1] << t] : [e[1] << t - 32, 0];
    }, x64Xor: function x64Xor(e, t) {
      return [e[0] ^ t[0], e[1] ^ t[1]];
    }, x64Fmix: function x64Fmix(e) {
      return e = this.x64Xor(e, [0, e[0] >>> 1]), e = this.x64Multiply(e, [4283543511, 3981806797]), e = this.x64Xor(e, [0, e[0] >>> 1]), e = this.x64Multiply(e, [3301882366, 444984403]), e = this.x64Xor(e, [0, e[0] >>> 1]);
    }, x64hash128: function x64hash128(e, t) {
      e = e || "", t = t || 0;for (var i = e.length % 16, a = e.length - i, r = [0, t], n = [0, t], o = [0, 0], s = [0, 0], l = [2277735313, 289559509], h = [1291169091, 658871167], u = 0; u < a; u += 16) {
        o = [255 & e.charCodeAt(u + 4) | (255 & e.charCodeAt(u + 5)) << 8 | (255 & e.charCodeAt(u + 6)) << 16 | (255 & e.charCodeAt(u + 7)) << 24, 255 & e.charCodeAt(u) | (255 & e.charCodeAt(u + 1)) << 8 | (255 & e.charCodeAt(u + 2)) << 16 | (255 & e.charCodeAt(u + 3)) << 24], s = [255 & e.charCodeAt(u + 12) | (255 & e.charCodeAt(u + 13)) << 8 | (255 & e.charCodeAt(u + 14)) << 16 | (255 & e.charCodeAt(u + 15)) << 24, 255 & e.charCodeAt(u + 8) | (255 & e.charCodeAt(u + 9)) << 8 | (255 & e.charCodeAt(u + 10)) << 16 | (255 & e.charCodeAt(u + 11)) << 24], o = this.x64Multiply(o, l), o = this.x64Rotl(o, 31), o = this.x64Multiply(o, h), r = this.x64Xor(r, o), r = this.x64Rotl(r, 27), r = this.x64Add(r, n), r = this.x64Add(this.x64Multiply(r, [0, 5]), [0, 1390208809]), s = this.x64Multiply(s, h), s = this.x64Rotl(s, 33), s = this.x64Multiply(s, l), n = this.x64Xor(n, s), n = this.x64Rotl(n, 31), n = this.x64Add(n, r), n = this.x64Add(this.x64Multiply(n, [0, 5]), [0, 944331445]);
      }switch (o = [0, 0], s = [0, 0], i) {case 15:
          s = this.x64Xor(s, this.x64LeftShift([0, e.charCodeAt(u + 14)], 48));case 14:
          s = this.x64Xor(s, this.x64LeftShift([0, e.charCodeAt(u + 13)], 40));case 13:
          s = this.x64Xor(s, this.x64LeftShift([0, e.charCodeAt(u + 12)], 32));case 12:
          s = this.x64Xor(s, this.x64LeftShift([0, e.charCodeAt(u + 11)], 24));case 11:
          s = this.x64Xor(s, this.x64LeftShift([0, e.charCodeAt(u + 10)], 16));case 10:
          s = this.x64Xor(s, this.x64LeftShift([0, e.charCodeAt(u + 9)], 8));case 9:
          s = this.x64Xor(s, [0, e.charCodeAt(u + 8)]), s = this.x64Multiply(s, h), s = this.x64Rotl(s, 33), s = this.x64Multiply(s, l), n = this.x64Xor(n, s);case 8:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 7)], 56));case 7:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 6)], 48));case 6:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 5)], 40));case 5:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 4)], 32));case 4:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 3)], 24));case 3:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 2)], 16));case 2:
          o = this.x64Xor(o, this.x64LeftShift([0, e.charCodeAt(u + 1)], 8));case 1:
          o = this.x64Xor(o, [0, e.charCodeAt(u)]), o = this.x64Multiply(o, l), o = this.x64Rotl(o, 31), o = this.x64Multiply(o, h), r = this.x64Xor(r, o);}return r = this.x64Xor(r, [0, e.length]), n = this.x64Xor(n, [0, e.length]), r = this.x64Add(r, n), n = this.x64Add(n, r), r = this.x64Fmix(r), n = this.x64Fmix(n), r = this.x64Add(r, n), n = this.x64Add(n, r), ("00000000" + (r[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (r[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (n[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (n[1] >>> 0).toString(16)).slice(-8);
    } }, e.VERSION = "1.5.1", e;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],28:[function(require,module,exports){
'use strict';

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJpc0J1ZmZlciIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwicmVhZEZsb2F0TEUiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDOUIsU0FBT0EsT0FBTyxJQUFQLEtBQWdCQyxTQUFTRCxHQUFULEtBQWlCRSxhQUFhRixHQUFiLENBQWpCLElBQXNDLENBQUMsQ0FBQ0EsSUFBSUcsU0FBNUQsQ0FBUDtBQUNELENBRkQ7O0FBSUEsU0FBU0YsUUFBVCxDQUFtQkQsR0FBbkIsRUFBd0I7QUFDdEIsU0FBTyxDQUFDLENBQUNBLElBQUlJLFdBQU4sSUFBcUIsT0FBT0osSUFBSUksV0FBSixDQUFnQkgsUUFBdkIsS0FBb0MsVUFBekQsSUFBdUVELElBQUlJLFdBQUosQ0FBZ0JILFFBQWhCLENBQXlCRCxHQUF6QixDQUE5RTtBQUNEOztBQUVEO0FBQ0EsU0FBU0UsWUFBVCxDQUF1QkYsR0FBdkIsRUFBNEI7QUFDMUIsU0FBTyxPQUFPQSxJQUFJSyxXQUFYLEtBQTJCLFVBQTNCLElBQXlDLE9BQU9MLElBQUlNLEtBQVgsS0FBcUIsVUFBOUQsSUFBNEVMLFNBQVNELElBQUlNLEtBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFULENBQW5GO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iXX0=
},{}],29:[function(require,module,exports){
'use strict';

// shim for using process in browser

var process = module.exports = {};

process.nextTick = function () {
    var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
    var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

    if (canSetImmediate) {
        return function (f) {
            return window.setImmediate(f);
        };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQUlBLFVBQVVDLE9BQU9DLE9BQVAsR0FBaUIsRUFBL0I7O0FBRUFGLFFBQVFHLFFBQVIsR0FBb0IsWUFBWTtBQUM1QixRQUFJQyxrQkFBa0IsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUNuQkEsT0FBT0MsWUFEVjtBQUVBLFFBQUlDLFVBQVUsT0FBT0YsTUFBUCxLQUFrQixXQUFsQixJQUNYQSxPQUFPRyxXQURJLElBQ1dILE9BQU9JLGdCQURoQzs7QUFJQSxRQUFJTCxlQUFKLEVBQXFCO0FBQ2pCLGVBQU8sVUFBVU0sQ0FBVixFQUFhO0FBQUUsbUJBQU9MLE9BQU9DLFlBQVAsQ0FBb0JJLENBQXBCLENBQVA7QUFBK0IsU0FBckQ7QUFDSDs7QUFFRCxRQUFJSCxPQUFKLEVBQWE7QUFDVCxZQUFJSSxRQUFRLEVBQVo7QUFDQU4sZUFBT0ksZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsVUFBVUcsRUFBVixFQUFjO0FBQzdDLGdCQUFJQyxTQUFTRCxHQUFHQyxNQUFoQjtBQUNBLGdCQUFJLENBQUNBLFdBQVdSLE1BQVgsSUFBcUJRLFdBQVcsSUFBakMsS0FBMENELEdBQUdFLElBQUgsS0FBWSxjQUExRCxFQUEwRTtBQUN0RUYsbUJBQUdHLGVBQUg7QUFDQSxvQkFBSUosTUFBTUssTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ2xCLHdCQUFJQyxLQUFLTixNQUFNTyxLQUFOLEVBQVQ7QUFDQUQ7QUFDSDtBQUNKO0FBQ0osU0FURCxFQVNHLElBVEg7O0FBV0EsZUFBTyxTQUFTZCxRQUFULENBQWtCYyxFQUFsQixFQUFzQjtBQUN6Qk4sa0JBQU1RLElBQU4sQ0FBV0YsRUFBWDtBQUNBWixtQkFBT0csV0FBUCxDQUFtQixjQUFuQixFQUFtQyxHQUFuQztBQUNILFNBSEQ7QUFJSDs7QUFFRCxXQUFPLFNBQVNMLFFBQVQsQ0FBa0JjLEVBQWxCLEVBQXNCO0FBQ3pCRyxtQkFBV0gsRUFBWCxFQUFlLENBQWY7QUFDSCxLQUZEO0FBR0gsQ0FqQ2tCLEVBQW5COztBQW1DQWpCLFFBQVFxQixLQUFSLEdBQWdCLFNBQWhCO0FBQ0FyQixRQUFRc0IsT0FBUixHQUFrQixJQUFsQjtBQUNBdEIsUUFBUXVCLEdBQVIsR0FBYyxFQUFkO0FBQ0F2QixRQUFRd0IsSUFBUixHQUFlLEVBQWY7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQixDQUFFOztBQUVsQnpCLFFBQVEwQixFQUFSLEdBQWFELElBQWI7QUFDQXpCLFFBQVEyQixXQUFSLEdBQXNCRixJQUF0QjtBQUNBekIsUUFBUTRCLElBQVIsR0FBZUgsSUFBZjtBQUNBekIsUUFBUTZCLEdBQVIsR0FBY0osSUFBZDtBQUNBekIsUUFBUThCLGNBQVIsR0FBeUJMLElBQXpCO0FBQ0F6QixRQUFRK0Isa0JBQVIsR0FBNkJOLElBQTdCO0FBQ0F6QixRQUFRZ0MsSUFBUixHQUFlUCxJQUFmOztBQUVBekIsUUFBUWlDLE9BQVIsR0FBa0IsVUFBVUMsSUFBVixFQUFnQjtBQUM5QixVQUFNLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0gsQ0FGRDs7QUFJQTtBQUNBbkMsUUFBUW9DLEdBQVIsR0FBYyxZQUFZO0FBQUUsV0FBTyxHQUFQO0FBQVksQ0FBeEM7QUFDQXBDLFFBQVFxQyxLQUFSLEdBQWdCLFVBQVVDLEdBQVYsRUFBZTtBQUMzQixVQUFNLElBQUlILEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0gsQ0FGRCIsImZpbGUiOiJicm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG4iXX0=
},{}],30:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 *
 *
 * @author Jerry Bendy <jerry@icewingcc.com>
 * @licence MIT
 *
 */

(function (self) {
    'use strict';

    var nativeURLSearchParams = self.URLSearchParams ? self.URLSearchParams : null,
        isSupportObjectConstructor = nativeURLSearchParams && new nativeURLSearchParams({ a: 1 }).toString() === 'a=1',
        __URLSearchParams__ = "__URLSearchParams__",
        prototype = URLSearchParamsPolyfill.prototype,
        iterable = !!(self.Symbol && self.Symbol.iterator);

    if (nativeURLSearchParams && isSupportObjectConstructor) {
        return;
    }

    /**
     * Make a URLSearchParams instance
     *
     * @param {object|string|URLSearchParams} search
     * @constructor
     */
    function URLSearchParamsPolyfill(search) {
        search = search || "";

        // support construct object with another URLSearchParams instance
        if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {
            search = search.toString();
        }

        this[__URLSearchParams__] = parseToDict(search);
    }

    /**
     * Appends a specified key/value pair as a new search parameter.
     *
     * @param {string} name
     * @param {string} value
     */
    prototype.append = function (name, value) {
        appendTo(this[__URLSearchParams__], name, value);
    };

    /**
     * Deletes the given search parameter, and its associated value,
     * from the list of all search parameters.
     *
     * @param {string} name
     */
    prototype.delete = function (name) {
        delete this[__URLSearchParams__][name];
    };

    /**
     * Returns the first value associated to the given search parameter.
     *
     * @param {string} name
     * @returns {string|null}
     */
    prototype.get = function (name) {
        var dict = this[__URLSearchParams__];
        return name in dict ? dict[name][0] : null;
    };

    /**
     * Returns all the values association with a given search parameter.
     *
     * @param {string} name
     * @returns {Array}
     */
    prototype.getAll = function (name) {
        var dict = this[__URLSearchParams__];
        return name in dict ? dict[name].slice(0) : [];
    };

    /**
     * Returns a Boolean indicating if such a search parameter exists.
     *
     * @param {string} name
     * @returns {boolean}
     */
    prototype.has = function (name) {
        return name in this[__URLSearchParams__];
    };

    /**
     * Sets the value associated to a given search parameter to
     * the given value. If there were several values, delete the
     * others.
     *
     * @param {string} name
     * @param {string} value
     */
    prototype.set = function set(name, value) {
        this[__URLSearchParams__][name] = ['' + value];
    };

    /**
     * Returns a string containg a query string suitable for use in a URL.
     *
     * @returns {string}
     */
    prototype.toString = function () {
        var dict = this[__URLSearchParams__],
            query = [],
            i,
            key,
            name,
            value;
        for (key in dict) {
            name = encode(key);
            for (i = 0, value = dict[key]; i < value.length; i++) {
                query.push(name + '=' + encode(value[i]));
            }
        }
        return query.join('&');
    };

    /*
     * Apply polifill to global object and append other prototype into it
     */
    self.URLSearchParams = nativeURLSearchParams && !isSupportObjectConstructor ? new Proxy(nativeURLSearchParams, {
        construct: function construct(target, args) {
            return new target(new URLSearchParamsPolyfill(args[0]).toString());
        }
    }) : URLSearchParamsPolyfill;

    var USPProto = self.URLSearchParams.prototype;

    USPProto.polyfill = true;

    /**
     *
     * @param {function} callback
     * @param {object} thisArg
     */
    USPProto.forEach = USPProto.forEach || function (callback, thisArg) {
        var dict = parseToDict(this.toString());
        Object.getOwnPropertyNames(dict).forEach(function (name) {
            dict[name].forEach(function (value) {
                callback.call(thisArg, value, name, this);
            }, this);
        }, this);
    };

    /**
     * Sort all name-value pairs
     */
    USPProto.sort = USPProto.sort || function () {
        var dict = parseToDict(this.toString()),
            keys = [],
            k,
            i,
            j;
        for (k in dict) {
            keys.push(k);
        }
        keys.sort();

        for (i = 0; i < keys.length; i++) {
            this.delete(keys[i]);
        }
        for (i = 0; i < keys.length; i++) {
            var key = keys[i],
                values = dict[key];
            for (j = 0; j < values.length; j++) {
                this.append(key, values[j]);
            }
        }
    };

    /**
     * Returns an iterator allowing to go through all keys of
     * the key/value pairs contained in this object.
     *
     * @returns {function}
     */
    USPProto.keys = USPProto.keys || function () {
        var items = [];
        this.forEach(function (item, name) {
            items.push([name]);
        });
        return makeIterator(items);
    };

    /**
     * Returns an iterator allowing to go through all values of
     * the key/value pairs contained in this object.
     *
     * @returns {function}
     */
    USPProto.values = USPProto.values || function () {
        var items = [];
        this.forEach(function (item) {
            items.push([item]);
        });
        return makeIterator(items);
    };

    /**
     * Returns an iterator allowing to go through all key/value
     * pairs contained in this object.
     *
     * @returns {function}
     */
    USPProto.entries = USPProto.entries || function () {
        var items = [];
        this.forEach(function (item, name) {
            items.push([name, item]);
        });
        return makeIterator(items);
    };

    if (iterable) {
        USPProto[self.Symbol.iterator] = USPProto[self.Symbol.iterator] || USPProto.entries;
    }

    function encode(str) {
        var replace = {
            '!': '%21',
            "'": '%27',
            '(': '%28',
            ')': '%29',
            '~': '%7E',
            '%20': '+',
            '%00': '\x00'
        };
        return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function (match) {
            return replace[match];
        });
    }

    function decode(str) {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    }

    function makeIterator(arr) {
        var iterator = {
            next: function next() {
                var value = arr.shift();
                return { done: value === undefined, value: value };
            }
        };

        if (iterable) {
            iterator[self.Symbol.iterator] = function () {
                return iterator;
            };
        }

        return iterator;
    }

    function parseToDict(search) {
        var dict = {};

        if ((typeof search === 'undefined' ? 'undefined' : _typeof(search)) === "object") {
            for (var i in search) {
                if (search.hasOwnProperty(i)) {
                    var str = typeof search[i] === 'string' ? search[i] : JSON.stringify(search[i]);
                    appendTo(dict, i, str);
                }
            }
        } else {
            // remove first '?'
            if (search.indexOf("?") === 0) {
                search = search.slice(1);
            }

            var pairs = search.split("&");
            for (var j = 0; j < pairs.length; j++) {
                var value = pairs[j],
                    index = value.indexOf('=');

                if (-1 < index) {
                    appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));
                }
            }
        }

        return dict;
    }

    function appendTo(dict, name, value) {
        if (name in dict) {
            dict[name].push('' + value);
        } else {
            dict[name] = ['' + value];
        }
    }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],31:[function(require,module,exports){
(function (process){
/**
  * vue-router v2.7.0
  * (c) 2017 Evan You
  * @license MIT
  */
'use strict';

/*  */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if (process.env.NODE_ENV !== 'production' && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

var View = {
  name: 'router-view',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }
      if (parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      return h(cache[name], data, children);
    }

    var matched = route.matched[depth];
    // render empty node if no matched route
    if (!matched) {
      cache[name] = null;
      return h();
    }

    var component = cache[name] = matched.components[name];

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    }

    // also regiseter instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // resolve props
    data.props = resolveProps(route, matched.props && matched.props[name]);

    return h(component, data, children);
  }
};

function resolveProps(route, config) {
  switch (typeof config === 'undefined' ? 'undefined' : _typeof(config)) {
    case 'undefined':
      return;
    case 'object':
      return config;
    case 'function':
      return config(route);
    case 'boolean':
      return config ? route.params : undefined;
    default:
      if (process.env.NODE_ENV !== 'production') {
        warn(false, "props in \"" + route.path + "\" is a " + (typeof config === 'undefined' ? 'undefined' : _typeof(config)) + ", " + "expecting an object, function or boolean.");
      }
  }
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function encodeReserveReplacer(c) {
  return '%' + c.charCodeAt(0).toString(16);
};
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function encode(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

var decode = decodeURIComponent;

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
    process.env.NODE_ENV !== 'production' && warn(false, e.message);
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    var val = extraQuery[key];
    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;
  }
  return parsedQuery;
}

function parseQuery(query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}

/*  */

var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;
  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: location.query || {},
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route);
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;if (query === void 0) query = {};
  var hash = ref.hash;if (hash === void 0) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {};

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false;
  }
  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key];
    // check nested equality
    if ((typeof aVal === 'undefined' ? 'undefined' : _typeof(aVal)) === 'object' && (typeof bVal === 'undefined' ? 'undefined' : _typeof(bVal)) === 'object') {
      return isObjectEqual(aVal, bVal);
    }
    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }
  return true;
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var Link = {
  name: 'router-link',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = location.path ? createRoute(null, location, null, router) : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);

    var handler = function handler(e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var extend = _Vue.util.extend;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) {
    return;
  }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) {
    return;
  }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) {
      return;
    }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true;
}

function findAnchor(children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child;
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed) {
    return;
  }
  install.installed = true;

  _Vue = Vue;

  var isDef = function isDef(v) {
    return v !== undefined;
  };

  var registerInstance = function registerInstance(vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });

  Vue.component('router-view', View);
  Vue.component('router-link', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var index$1 = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var index = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)',
// Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens;
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile(str, options) {
  return tokensToFunction(parse(str, options));
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (index$1(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags(options) {
  return options.sensitive ? '' : 'i';
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys);
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp(tokens, keys, options) {
  if (!index$1(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp(path, keys, options) {
  if (!index$1(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */keys);
  }

  if (index$1(path)) {
    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);
  }

  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);
}

index.parse = parse_1;
index.compile = compile_1;
index.tokensToFunction = tokensToFunction_1;
index.tokensToRegExp = tokensToRegExp_1;

/*  */

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = index.compile(path));
    return filler(params || {}, { pretty: true });
  } catch (e) {
    if (process.env.NODE_ENV !== 'production') {
      warn(false, "missing param for " + routeMsg + ": " + e.message);
    }
    return '';
  }
}

/*  */

function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  var pathMap = oldPathMap || Object.create(null);
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;
  if (process.env.NODE_ENV !== 'production') {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
  }

  var normalizedPath = normalizePath(path, parent);
  var pathToRegexpOptions = route.pathToRegexpOptions || {};

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (process.env.NODE_ENV !== 'production') {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return (/^\/?$/.test(child.path)
        );
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }
    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];

    aliases.forEach(function (alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = index(path, [], pathToRegexpOptions);
  if (process.env.NODE_ENV !== 'production') {
    var keys = {};
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }
  return regex;
}

function normalizePath(path, parent) {
  path = path.replace(/\/$/, '');
  if (path[0] === '/') {
    return path;
  }
  if (parent == null) {
    return path;
  }
  return cleanPath(parent.path + "/" + path);
}

/*  */

function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next.name || next._normalized) {
    return next;
  }

  // relative params
  if (!next.path && next.params && current) {
    next = assign({}, next);
    next._normalized = true;
    var params = assign(assign({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, "path " + current.path);
    } else if (process.env.NODE_ENV !== 'production') {
      warn(false, "relative params navigation requires a current route.");
    }
    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;

  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}

function assign(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a;
}

/*  */

function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (process.env.NODE_ENV !== 'production') {
        warn(record, "Route with name '" + name + "' does not exist");
      }
      if (!record) {
        return _createRoute(null, location);
      }
      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (_typeof(location.params) !== 'object') {
        location.params = {};
      }

      if (currentRoute && _typeof(currentRoute.params) === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
        return _createRoute(record, location, redirectedFrom);
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    }
    // no match
    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || (typeof redirect === 'undefined' ? 'undefined' : _typeof(redirect)) !== 'object') {
      if (process.env.NODE_ENV !== 'production') {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }
      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (process.env.NODE_ENV !== 'production') {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\"");
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (process.env.NODE_ENV !== 'production') {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }
      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }
    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }
    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      params[key.name] = val;
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}

/*  */

var positionStore = Object.create(null);

function setupScroll() {
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return;
  }

  if (process.env.NODE_ENV !== 'production') {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  }

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior(to, from, isPop ? position : null);
    if (!shouldScroll) {
      return;
    }
    var isObject = (typeof shouldScroll === 'undefined' ? 'undefined' : _typeof(shouldScroll)) === 'object';
    if (isObject && typeof shouldScroll.selector === 'string') {
      var el = document.querySelector(shouldScroll.selector);
      if (el) {
        var offset = shouldScroll.offset && _typeof(shouldScroll.offset) === 'object' ? shouldScroll.offset : {};
        offset = normalizeOffset(offset);
        position = getElementPosition(el, offset);
      } else if (isValidPosition(shouldScroll)) {
        position = normalizePosition(shouldScroll);
      }
    } else if (isObject && isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }

    if (position) {
      window.scrollTo(position.x, position.y);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition() {
  var key = getStateKey();
  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

/*  */

var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && 'pushState' in window.history;
}();

// use User Timing api (if present) for more accurate key precision
var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

var _key = genKey();

function genKey() {
  return Time.now().toFixed(3);
}

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  _key = key;
}

function pushState(url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      history.replaceState({ key: _key }, '', url);
    } else {
      _key = genKey();
      history.pushState({ key: _key }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}

/*  */

function runQueue(queue, fn, cb) {
  var step = function step(index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (resolvedDef.__esModule && resolvedDef.default) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
          process.env.NODE_ENV !== 'production' && warn(false, msg);
          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;
    while (len--) {
      args[len] = arguments[len];
    }if (called) {
      return;
    }
    called = true;
    return fn.apply(this, args);
  };
}

/*  */

var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;

  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();

    // fire ready cbs once
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) {
        cb(err);
      });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;

  var current = this.current;
  var abort = function abort(err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (isSameRoute(route, current) &&
  // in the case the route map has been dynamically appended to
  route.matched.length === current.matched.length) {
    this.ensureURL();
    return abort();
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;

  var queue = [].concat(
  // in-component leave guards
  extractLeaveGuards(deactivated),
  // global before hooks
  this.router.beforeHooks,
  // in-component update hooks
  extractUpdateHooks(updated),
  // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }),
  // async components
  resolveAsyncComponents(activated));

  this.pending = route;
  var iterator = function iterator(hook, next) {
    if (this$1.pending !== route) {
      return abort();
    }
    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();
          if ((typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];
    var isValid = function isValid() {
      return this$1.current === route;
    };
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort();
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) {
            cb();
          });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated, cbs, isValid) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid);
  });
}

function bindEnterGuard(guard, match, key, cbs, isValid) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    });
  };
}

function poll(cb, // somehow flow cannot infer this is a function
instances, key, isValid) {
  if (instances[key]) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}

/*  */

var HTML5History = function (History$$1) {
  function HTML5History(router, base) {
    var this$1 = this;

    History$$1.call(this, router, base);

    var expectScroll = router.options.scrollBehavior;

    if (expectScroll) {
      setupScroll();
    }

    window.addEventListener('popstate', function (e) {
      var current = this$1.current;
      this$1.transitionTo(getLocation(this$1.base), function (route) {
        if (expectScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if (History$$1) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create(History$$1 && History$$1.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = window.location.pathname;
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash;
}

/*  */

var HashHistory = function (History$$1) {
  function HashHistory(router, base, fallback) {
    History$$1.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return;
    }
    ensureSlash();
  }

  if (History$$1) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create(History$$1 && History$$1.prototype);
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;

    window.addEventListener('hashchange', function () {
      if (!ensureSlash()) {
        return;
      }
      this$1.transitionTo(getHash(), function (route) {
        replaceHash(route.fullPath);
      });
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true;
  }
  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  return index === -1 ? '' : href.slice(index + 1);
}

function pushHash(path) {
  window.location.hash = path;
}

function replaceHash(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  window.location.replace(base + "#" + path);
}

/*  */

var AbstractHistory = function (History$$1) {
  function AbstractHistory(router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History$$1) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create(History$$1 && History$$1.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {
    // noop
  };

  return AbstractHistory;
}(History);

/*  */

var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};

  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;
    default:
      if (process.env.NODE_ENV !== 'production') {
        assert(false, "invalid mode: " + mode);
      }
  }
};

var prototypeAccessors = { currentRoute: {} };

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app /* Vue component instance */) {
  var this$1 = this;

  process.env.NODE_ENV !== 'production' && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");

  this.apps.push(app);

  // main app already initialized.
  if (this.app) {
    return;
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function setupHashListener() {
      history.setupListeners();
    };
    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;
  if (!route) {
    return [];
  }
  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  var location = normalizeLocation(to, current || this.history.current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '2.7.0';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

module.exports = VueRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("e/U+97"))
},{"e/U+97":29}],32:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Vue.js v2.4.2
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
(function (global, factory) {
  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Vue = factory();
})(undefined, function () {
  'use strict';

  /*  */

  // these helpers produces better vm code in JS engines due to their
  // explicitness and function inlining

  function isUndef(v) {
    return v === undefined || v === null;
  }

  function isDef(v) {
    return v !== undefined && v !== null;
  }

  function isTrue(v) {
    return v === true;
  }

  function isFalse(v) {
    return v === false;
  }

  /**
   * Check if value is primitive
   */
  function isPrimitive(value) {
    return typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */
  function isObject(obj) {
    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
  }

  var _toString = Object.prototype.toString;

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */
  function isPlainObject(obj) {
    return _toString.call(obj) === '[object Object]';
  }

  function isRegExp(v) {
    return _toString.call(v) === '[object RegExp]';
  }

  /**
   * Check if val is a valid array index.
   */
  function isValidArrayIndex(val) {
    var n = parseFloat(val);
    return n >= 0 && Math.floor(n) === n && isFinite(val);
  }

  /**
   * Convert a value to a string that is actually rendered.
   */
  function toString(val) {
    return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);
  }

  /**
   * Convert a input value to a number for persistence.
   * If the conversion fails, return original string.
   */
  function toNumber(val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n;
  }

  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */
  function makeMap(str, expectsLowerCase) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? function (val) {
      return map[val.toLowerCase()];
    } : function (val) {
      return map[val];
    };
  }

  /**
   * Check if a tag is a built-in tag.
   */
  var isBuiltInTag = makeMap('slot,component', true);

  /**
   * Check if a attribute is a reserved attribute.
   */
  var isReservedAttribute = makeMap('key,ref,slot,is');

  /**
   * Remove an item from an array
   */
  function remove(arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);
      if (index > -1) {
        return arr.splice(index, 1);
      }
    }
  }

  /**
   * Check whether the object has the property.
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }

  /**
   * Create a cached version of a pure function.
   */
  function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  }

  /**
   * Camelize a hyphen-delimited string.
   */
  var camelizeRE = /-(\w)/g;
  var camelize = cached(function (str) {
    return str.replace(camelizeRE, function (_, c) {
      return c ? c.toUpperCase() : '';
    });
  });

  /**
   * Capitalize a string.
   */
  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });

  /**
   * Hyphenate a camelCase string.
   */
  var hyphenateRE = /([^-])([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
  });

  /**
   * Simple bind, faster than native
   */
  function bind(fn, ctx) {
    function boundFn(a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    }
    // record original fn length
    boundFn._length = fn.length;
    return boundFn;
  }

  /**
   * Convert an Array-like object to a real Array.
   */
  function toArray(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret;
  }

  /**
   * Mix properties into target object.
   */
  function extend(to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to;
  }

  /**
   * Merge an Array of Objects into a single Object.
   */
  function toObject(arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend(res, arr[i]);
      }
    }
    return res;
  }

  /**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
   */
  function noop(a, b, c) {}

  /**
   * Always return false.
   */
  var no = function no(a, b, c) {
    return false;
  };

  /**
   * Return same value
   */
  var identity = function identity(_) {
    return _;
  };

  /**
   * Generate a static keys string from compiler modules.
   */
  function genStaticKeys(modules) {
    return modules.reduce(function (keys, m) {
      return keys.concat(m.staticKeys || []);
    }, []).join(',');
  }

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */
  function looseEqual(a, b) {
    if (a === b) {
      return true;
    }
    var isObjectA = isObject(a);
    var isObjectB = isObject(b);
    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);
        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function (e, i) {
            return looseEqual(e, b[i]);
          });
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function (key) {
            return looseEqual(a[key], b[key]);
          });
        } else {
          /* istanbul ignore next */
          return false;
        }
      } catch (e) {
        /* istanbul ignore next */
        return false;
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b);
    } else {
      return false;
    }
  }

  function looseIndexOf(arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) {
        return i;
      }
    }
    return -1;
  }

  /**
   * Ensure a function is called only once.
   */
  function once(fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    };
  }

  var SSR_ATTR = 'data-server-rendered';

  var ASSET_TYPES = ['component', 'directive', 'filter'];

  var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'];

  /*  */

  var config = {
    /**
     * Option merge strategies (used in core/util/options)
     */
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: "development" !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: "development" !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  };

  /*  */

  var emptyObject = Object.freeze({});

  /**
   * Check if a string starts with $ or _
   */
  function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
  }

  /**
   * Define a property.
   */
  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Parse simple path.
   */
  var bailRE = /[^\w.$]/;
  function parsePath(path) {
    if (bailRE.test(path)) {
      return;
    }
    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) {
          return;
        }
        obj = obj[segments[i]];
      }
      return obj;
    };
  }

  /*  */

  var warn = noop;
  var tip = noop;
  var formatComponentName = null; // work around flow check

  {
    var hasConsole = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;
    var classify = function classify(str) {
      return str.replace(classifyRE, function (c) {
        return c.toUpperCase();
      }).replace(/[-_]/g, '');
    };

    warn = function warn(msg, vm) {
      var trace = vm ? generateComponentTrace(vm) : '';

      if (config.warnHandler) {
        config.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole && !config.silent) {
        console.error("[Vue warn]: " + msg + trace);
      }
    };

    tip = function tip(msg, vm) {
      if (hasConsole && !config.silent) {
        console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
      }
    };

    formatComponentName = function formatComponentName(vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>';
      }
      var name = typeof vm === 'string' ? vm : typeof vm === 'function' && vm.options ? vm.options.name : vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;

      var file = vm._isVue && vm.$options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
    };

    var repeat = function repeat(str, n) {
      var res = '';
      while (n) {
        if (n % 2 === 1) {
          res += str;
        }
        if (n > 1) {
          str += str;
        }
        n >>= 1;
      }
      return res;
    };

    var generateComponentTrace = function generateComponentTrace(vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];
            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue;
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return '\n\nfound in\n\n' + tree.map(function (vm, i) {
          return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
        }).join('\n');
      } else {
        return "\n\n(found in " + formatComponentName(vm) + ")";
      }
    };
  }

  /*  */

  function handleError(err, vm, info) {
    if (config.errorHandler) {
      config.errorHandler.call(null, err, vm, info);
    } else {
      {
        warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
      }
      /* istanbul ignore else */
      if (inBrowser && typeof console !== 'undefined') {
        console.error(err);
      } else {
        throw err;
      }
    }
  }

  /*  */
  /* globals MutationObserver */

  // can we use __proto__?
  var hasProto = '__proto__' in {};

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined';
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = UA && UA.indexOf('android') > 0;
  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

  // Firefix has a "watch" function on Object.prototype...
  var nativeWatch = {}.watch;

  var supportsPassive = false;
  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', {
        get: function get() {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      }); // https://github.com/facebook/flow/issues/285
      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  }

  // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV
  var _isServer;
  var isServerRendering = function isServerRendering() {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }
    return _isServer;
  };

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  /* istanbul ignore next */
  function isNative(Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
  }

  var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  /**
   * Defer a task to execute it asynchronously.
   */
  var nextTick = function () {
    var callbacks = [];
    var pending = false;
    var timerFunc;

    function nextTickHandler() {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks.length = 0;
      for (var i = 0; i < copies.length; i++) {
        copies[i]();
      }
    }

    // the nextTick behavior leverages the microtask queue, which can be accessed
    // via either native Promise.then or MutationObserver.
    // MutationObserver has wider support, however it is seriously bugged in
    // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
    // completely stops working after triggering a few times... so, if native
    // Promise is available, we will use it:
    /* istanbul ignore if */
    if (typeof Promise !== 'undefined' && isNative(Promise)) {
      var p = Promise.resolve();
      var logError = function logError(err) {
        console.error(err);
      };
      timerFunc = function timerFunc() {
        p.then(nextTickHandler).catch(logError);
        // in problematic UIWebViews, Promise.then doesn't completely break, but
        // it can get stuck in a weird state where callbacks are pushed into the
        // microtask queue but the queue isn't being flushed, until the browser
        // needs to do some other work, e.g. handle a timer. Therefore we can
        // "force" the microtask queue to be flushed by adding an empty timer.
        if (isIOS) {
          setTimeout(noop);
        }
      };
    } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]')) {
      // use MutationObserver where native Promise is not available,
      // e.g. PhantomJS IE11, iOS7, Android 4.4
      var counter = 1;
      var observer = new MutationObserver(nextTickHandler);
      var textNode = document.createTextNode(String(counter));
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function timerFunc() {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
      };
    } else {
      // fallback to setTimeout
      /* istanbul ignore next */
      timerFunc = function timerFunc() {
        setTimeout(nextTickHandler, 0);
      };
    }

    return function queueNextTick(cb, ctx) {
      var _resolve;
      callbacks.push(function () {
        if (cb) {
          try {
            cb.call(ctx);
          } catch (e) {
            handleError(e, ctx, 'nextTick');
          }
        } else if (_resolve) {
          _resolve(ctx);
        }
      });
      if (!pending) {
        pending = true;
        timerFunc();
      }
      if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve, reject) {
          _resolve = resolve;
        });
      }
    };
  }();

  var _Set;
  /* istanbul ignore if */
  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = function () {
      function Set() {
        this.set = Object.create(null);
      }
      Set.prototype.has = function has(key) {
        return this.set[key] === true;
      };
      Set.prototype.add = function add(key) {
        this.set[key] = true;
      };
      Set.prototype.clear = function clear() {
        this.set = Object.create(null);
      };

      return Set;
    }();
  }

  /*  */

  var uid = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */
  var Dep = function Dep() {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub(sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub(sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend() {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify() {
    // stabilize the subscriber list first
    var subs = this.subs.slice();
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  // the current target watcher being evaluated.
  // this is globally unique because there could be only one
  // watcher being evaluated at any time.
  Dep.target = null;
  var targetStack = [];

  function pushTarget(_target) {
    if (Dep.target) {
      targetStack.push(Dep.target);
    }
    Dep.target = _target;
  }

  function popTarget() {
    Dep.target = targetStack.pop();
  }

  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      var args = [],
          len = arguments.length;
      while (len--) {
        args[len] = arguments[len];
      }var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
        case 'unshift':
          inserted = args;
          break;
        case 'splice':
          inserted = args.slice(2);
          break;
      }
      if (inserted) {
        ob.observeArray(inserted);
      }
      // notify change
      ob.dep.notify();
      return result;
    });
  });

  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * By default, when a reactive property is set, the new value is
   * also converted to become reactive. However when passing down props,
   * we don't want to force conversion because the value may be a nested value
   * under a frozen data structure. Converting it would defeat the optimization.
   */
  var observerState = {
    shouldConvert: true
  };

  /**
   * Observer class that are attached to each observed
   * object. Once attached, the observer converts target
   * object's property keys into getter/setters that
   * collect dependencies and dispatches updates.
   */
  var Observer = function Observer(value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, '__ob__', this);
    if (Array.isArray(value)) {
      var augment = hasProto ? protoAugment : copyAugment;
      augment(value, arrayMethods, arrayKeys);
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  Observer.prototype.walk = function walk(obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i], obj[keys[i]]);
    }
  };

  /**
   * Observe a list of Array items.
   */
  Observer.prototype.observeArray = function observeArray(items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  // helpers

  /**
   * Augment an target Object or Array by intercepting
   * the prototype chain using __proto__
   */
  function protoAugment(target, src, keys) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment an target Object or Array by defining
   * hidden properties.
   */
  /* istanbul ignore next */
  function copyAugment(target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */
  function observe(value, asRootData) {
    if (!isObject(value)) {
      return;
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
      ob = new Observer(value);
    }
    if (asRootData && ob) {
      ob.vmCount++;
    }
    return ob;
  }

  /**
   * Define a reactive property on an Object.
   */
  function defineReactive$$1(obj, key, val, customSetter, shallow) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;

    var childOb = !shallow && observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
          }
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
        return value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */
        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        /* eslint-enable no-self-compare */
        if ("development" !== 'production' && customSetter) {
          customSetter();
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = !shallow && observe(newVal);
        dep.notify();
      }
    });
  }

  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */
  function set(target, key, val) {
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val;
    }
    if (hasOwn(target, key)) {
      target[key] = val;
      return val;
    }
    var ob = target.__ob__;
    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
      return val;
    }
    if (!ob) {
      target[key] = val;
      return val;
    }
    defineReactive$$1(ob.value, key, val);
    ob.dep.notify();
    return val;
  }

  /**
   * Delete a property and trigger change if necessary.
   */
  function del(target, key) {
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.splice(key, 1);
      return;
    }
    var ob = target.__ob__;
    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
      return;
    }
    if (!hasOwn(target, key)) {
      return;
    }
    delete target[key];
    if (!ob) {
      return;
    }
    ob.dep.notify();
  }

  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */
  function dependArray(value) {
    for (var e = void 0, i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();
      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }

  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */
  var strats = config.optionMergeStrategies;

  /**
   * Options with restrictions
   */
  {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
      }
      return defaultStrat(parent, child);
    };
  }

  /**
   * Helper that recursively merges two data objects together.
   */
  function mergeData(to, from) {
    if (!from) {
      return to;
    }
    var key, toVal, fromVal;
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to;
  }

  /**
   * Data
   */
  function mergeDataOrFn(parentVal, childVal, vm) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal;
      }
      if (!parentVal) {
        return childVal;
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn() {
        return mergeData(typeof childVal === 'function' ? childVal.call(this) : childVal, typeof parentVal === 'function' ? parentVal.call(this) : parentVal);
      };
    } else if (parentVal || childVal) {
      return function mergedInstanceDataFn() {
        // instance merge
        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  }

  strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
      if (childVal && typeof childVal !== 'function') {
        "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);

        return parentVal;
      }
      return mergeDataOrFn.call(this, parentVal, childVal);
    }

    return mergeDataOrFn(parentVal, childVal, vm);
  };

  /**
   * Hooks and props are merged as arrays.
   */
  function mergeHook(parentVal, childVal) {
    return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */
  function mergeAssets(parentVal, childVal) {
    var res = Object.create(parentVal || null);
    return childVal ? extend(res, childVal) : res;
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */
  strats.watch = function (parentVal, childVal) {
    // work around Firefox's Object.prototype.watch...
    if (parentVal === nativeWatch) {
      parentVal = undefined;
    }
    if (childVal === nativeWatch) {
      childVal = undefined;
    }
    /* istanbul ignore if */
    if (!childVal) {
      return Object.create(parentVal || null);
    }
    if (!parentVal) {
      return childVal;
    }
    var ret = {};
    extend(ret, parentVal);
    for (var key in childVal) {
      var parent = ret[key];
      var child = childVal[key];
      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }
      ret[key] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
    }
    return ret;
  };

  /**
   * Other object hashes.
   */
  strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal) {
    if (!parentVal) {
      return childVal;
    }
    var ret = Object.create(null);
    extend(ret, parentVal);
    if (childVal) {
      extend(ret, childVal);
    }
    return ret;
  };
  strats.provide = mergeDataOrFn;

  /**
   * Default strategy.
   */
  var defaultStrat = function defaultStrat(parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };

  /**
   * Validate component names
   */
  function checkComponents(options) {
    for (var key in options.components) {
      var lower = key.toLowerCase();
      if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
        warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
      }
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */
  function normalizeProps(options) {
    var props = options.props;
    if (!props) {
      return;
    }
    var res = {};
    var i, val, name;
    if (Array.isArray(props)) {
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          name = camelize(val);
          res[name] = { type: null };
        } else {
          warn('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize(key);
        res[name] = isPlainObject(val) ? val : { type: val };
      }
    }
    options.props = res;
  }

  /**
   * Normalize all injections into Object-based format
   */
  function normalizeInject(options) {
    var inject = options.inject;
    if (Array.isArray(inject)) {
      var normalized = options.inject = {};
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = inject[i];
      }
    }
  }

  /**
   * Normalize raw function directives into object format.
   */
  function normalizeDirectives(options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def = dirs[key];
        if (typeof def === 'function') {
          dirs[key] = { bind: def, update: def };
        }
      }
    }
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */
  function mergeOptions(parent, child, vm) {
    {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child);
    normalizeInject(child);
    normalizeDirectives(child);
    var extendsFrom = child.extends;
    if (extendsFrom) {
      parent = mergeOptions(parent, extendsFrom, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField(key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options;
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */
  function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return;
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn(assets, id)) {
      return assets[id];
    }
    var camelizedId = camelize(id);
    if (hasOwn(assets, camelizedId)) {
      return assets[camelizedId];
    }
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn(assets, PascalCaseId)) {
      return assets[PascalCaseId];
    }
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if ("development" !== 'production' && warnMissing && !res) {
      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
    }
    return res;
  }

  /*  */

  function validateProp(key, propOptions, propsData, vm) {
    var prop = propOptions[key];
    var absent = !hasOwn(propsData, key);
    var value = propsData[key];
    // handle boolean props
    if (isType(Boolean, prop.type)) {
      if (absent && !hasOwn(prop, 'default')) {
        value = false;
      } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
        value = true;
      }
    }
    // check default value
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key);
      // since the default value is a fresh copy,
      // make sure to observe it.
      var prevShouldConvert = observerState.shouldConvert;
      observerState.shouldConvert = true;
      observe(value);
      observerState.shouldConvert = prevShouldConvert;
    }
    {
      assertProp(prop, key, value, vm, absent);
    }
    return value;
  }

  /**
   * Get the default value of a prop.
   */
  function getPropDefaultValue(vm, prop, key) {
    // no default, return undefined
    if (!hasOwn(prop, 'default')) {
      return undefined;
    }
    var def = prop.default;
    // warn against non-factory defaults for Object & Array
    if ("development" !== 'production' && isObject(def)) {
      warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
    }
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
      return vm._props[key];
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
  }

  /**
   * Assert whether a prop is valid.
   */
  function assertProp(prop, name, value, vm, absent) {
    if (prop.required && absent) {
      warn('Missing required prop: "' + name + '"', vm);
      return;
    }
    if (value == null && !prop.required) {
      return;
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }
    if (!valid) {
      warn('Invalid prop: type check failed for prop "' + name + '".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);
      return;
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType(value, type) {
    var valid;
    var expectedType = getType(type);
    if (simpleCheckRE.test(expectedType)) {
      valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === expectedType.toLowerCase();
    } else if (expectedType === 'Object') {
      valid = isPlainObject(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    };
  }

  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */
  function getType(fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
  }

  function isType(type, fn) {
    if (!Array.isArray(fn)) {
      return getType(fn) === getType(type);
    }
    for (var i = 0, len = fn.length; i < len; i++) {
      if (getType(fn[i]) === getType(type)) {
        return true;
      }
    }
    /* istanbul ignore next */
    return false;
  }

  /*  */

  var mark;
  var measure;

  {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */
    if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
      mark = function mark(tag) {
        return perf.mark(tag);
      };
      measure = function measure(name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        perf.clearMeasures(name);
      };
    }
  }

  /* not type checking this file because flow doesn't play well with Proxy */

  var initProxy;

  {
    var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
    );

    var warnNonPresent = function warnNonPresent(target, key) {
      warn("Property or method \"" + key + "\" is not defined on the instance but " + "referenced during render. Make sure to declare reactive data " + "properties in the data option.", target);
    };

    var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function set(target, key, value) {
          if (isBuiltInModifier(key)) {
            warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
            return false;
          } else {
            target[key] = value;
            return true;
          }
        }
      });
    }

    var hasHandler = {
      has: function has(target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
        if (!has && !isAllowed) {
          warnNonPresent(target, key);
        }
        return has || !isAllowed;
      }
    };

    var getHandler = {
      get: function get(target, key) {
        if (typeof key === 'string' && !(key in target)) {
          warnNonPresent(target, key);
        }
        return target[key];
      }
    };

    initProxy = function initProxy(vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }

  /*  */

  var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.functionalContext = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = undefined;
    this.isAsyncPlaceholder = false;
  };

  var prototypeAccessors = { child: {} };

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  prototypeAccessors.child.get = function () {
    return this.componentInstance;
  };

  Object.defineProperties(VNode.prototype, prototypeAccessors);

  var createEmptyVNode = function createEmptyVNode(text) {
    if (text === void 0) text = '';

    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node;
  };

  function createTextVNode(val) {
    return new VNode(undefined, undefined, undefined, String(val));
  }

  // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.
  function cloneVNode(vnode) {
    var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.isCloned = true;
    return cloned;
  }

  function cloneVNodes(vnodes) {
    var len = vnodes.length;
    var res = new Array(len);
    for (var i = 0; i < len; i++) {
      res[i] = cloneVNode(vnodes[i]);
    }
    return res;
  }

  /*  */

  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
      name: name,
      once: once$$1,
      capture: capture,
      passive: passive
    };
  });

  function createFnInvoker(fns) {
    function invoker() {
      var arguments$1 = arguments;

      var fns = invoker.fns;
      if (Array.isArray(fns)) {
        var cloned = fns.slice();
        for (var i = 0; i < cloned.length; i++) {
          cloned[i].apply(null, arguments$1);
        }
      } else {
        // return handler return value for single handlers
        return fns.apply(null, arguments);
      }
    }
    invoker.fns = fns;
    return invoker;
  }

  function updateListeners(on, oldOn, add, remove$$1, vm) {
    var name, cur, old, event;
    for (name in on) {
      cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      if (isUndef(cur)) {
        "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur);
        }
        add(event.name, cur, event.once, event.capture, event.passive);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }

  /*  */

  function mergeVNodeHook(def, hookKey, hook) {
    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook() {
      hook.apply(this, arguments);
      // important: remove merged hook to ensure it's called only once
      // and prevent memory leak
      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }

  /*  */

  function extractPropsFromVNodeData(data, Ctor, tag) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return;
    }
    var res = {};
    var attrs = data.attrs;
    var props = data.props;
    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        {
          var keyInLowerCase = key.toLowerCase();
          if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
            tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
          }
        }
        checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
      }
    }
    return res;
  }

  function checkProp(res, hash, key, altKey, preserve) {
    if (isDef(hash)) {
      if (hasOwn(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true;
      } else if (hasOwn(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true;
      }
    }
    return false;
  }

  /*  */

  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:

  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.
  function simpleNormalizeChildren(children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children);
      }
    }
    return children;
  }

  // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.
  function normalizeChildren(children) {
    return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
  }

  function isTextNode(node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment);
  }

  function normalizeArrayChildren(children, nestedIndex) {
    var res = [];
    var i, c, last;
    for (i = 0; i < children.length; i++) {
      c = children[i];
      if (isUndef(c) || typeof c === 'boolean') {
        continue;
      }
      last = res[res.length - 1];
      //  nested
      if (Array.isArray(c)) {
        res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + "_" + i));
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          last.text += String(c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[res.length - 1] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }
          res.push(c);
        }
      }
    }
    return res;
  }

  /*  */

  function ensureCtor(comp, base) {
    if (comp.__esModule && comp.default) {
      comp = comp.default;
    }
    return isObject(comp) ? base.extend(comp) : comp;
  }

  function createAsyncPlaceholder(factory, data, context, children, tag) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data: data, context: context, children: children, tag: tag };
    return node;
  }

  function resolveAsyncComponent(factory, baseCtor, context) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp;
    }

    if (isDef(factory.resolved)) {
      return factory.resolved;
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp;
    }

    if (isDef(factory.contexts)) {
      // already pending
      factory.contexts.push(context);
    } else {
      var contexts = factory.contexts = [context];
      var sync = true;

      var forceRender = function forceRender() {
        for (var i = 0, l = contexts.length; i < l; i++) {
          contexts[i].$forceUpdate();
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor);
        // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)
        if (!sync) {
          forceRender();
        }
      });

      var reject = once(function (reason) {
        "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender();
        }
      });

      var res = factory(resolve, reject);

      if (isObject(res)) {
        if (typeof res.then === 'function') {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isDef(res.component) && typeof res.component.then === 'function') {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);
            if (res.delay === 0) {
              factory.loading = true;
            } else {
              setTimeout(function () {
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender();
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            setTimeout(function () {
              if (isUndef(factory.resolved)) {
                reject("timeout (" + res.timeout + "ms)");
              }
            }, res.timeout);
          }
        }
      }

      sync = false;
      // return in case resolved synchronously
      return factory.loading ? factory.loadingComp : factory.resolved;
    }
  }

  /*  */

  function getFirstComponentChild(children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        if (isDef(c) && isDef(c.componentOptions)) {
          return c;
        }
      }
    }
  }

  /*  */

  /*  */

  function initEvents(vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target;

  function add(event, fn, once$$1) {
    if (once$$1) {
      target.$once(event, fn);
    } else {
      target.$on(event, fn);
    }
  }

  function remove$1(event, fn) {
    target.$off(event, fn);
  }

  function updateComponentListeners(vm, listeners, oldListeners) {
    target = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  }

  function eventsMixin(Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
      var this$1 = this;

      var vm = this;
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          this$1.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm;
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;
      function on() {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm;
    };

    Vue.prototype.$off = function (event, fn) {
      var this$1 = this;

      var vm = this;
      // all
      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm;
      }
      // array of events
      if (Array.isArray(event)) {
        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
          this$1.$off(event[i$1], fn);
        }
        return vm;
      }
      // specific event
      var cbs = vm._events[event];
      if (!cbs) {
        return vm;
      }
      if (arguments.length === 1) {
        vm._events[event] = null;
        return vm;
      }
      // specific handler
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1);
          break;
        }
      }
      return vm;
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;
      {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        for (var i = 0, l = cbs.length; i < l; i++) {
          try {
            cbs[i].apply(vm, args);
          } catch (e) {
            handleError(e, vm, "event handler for \"" + event + "\"");
          }
        }
      }
      return vm;
    };
  }

  /*  */

  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */
  function resolveSlots(children, context) {
    var slots = {};
    if (!children) {
      return slots;
    }
    var defaultSlot = [];
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      // named slots should only be respected if the vnode was rendered in the
      // same context.
      if ((child.context === context || child.functionalContext === context) && child.data && child.data.slot != null) {
        var name = child.data.slot;
        var slot = slots[name] || (slots[name] = []);
        if (child.tag === 'template') {
          slot.push.apply(slot, child.children);
        } else {
          slot.push(child);
        }
      } else {
        defaultSlot.push(child);
      }
    }
    // ignore whitespace
    if (!defaultSlot.every(isWhitespace)) {
      slots.default = defaultSlot;
    }
    return slots;
  }

  function isWhitespace(node) {
    return node.isComment || node.text === ' ';
  }

  function resolveScopedSlots(fns, // see flow/vnode
  res) {
    res = res || {};
    for (var i = 0; i < fns.length; i++) {
      if (Array.isArray(fns[i])) {
        resolveScopedSlots(fns[i], res);
      } else {
        res[fns[i].key] = fns[i].fn;
      }
    }
    return res;
  }

  /*  */

  var activeInstance = null;
  var isUpdatingChildComponent = false;

  function initLifecycle(vm) {
    var options = vm.$options;

    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;

    vm.$children = [];
    vm.$refs = {};

    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin(Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      if (vm._isMounted) {
        callHook(vm, 'beforeUpdate');
      }
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var prevActiveInstance = activeInstance;
      activeInstance = vm;
      vm._vnode = vnode;
      // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.
      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */
        , vm.$options._parentElm, vm.$options._refElm);
        // no need for the ref nodes after initial patch
        // this prevents keeping a detached DOM tree in memory (#5851)
        vm.$options._parentElm = vm.$options._refElm = null;
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      activeInstance = prevActiveInstance;
      // update __vue__ reference
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      // if parent is an HOC, update its $el as well
      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      }
      // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.
    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return;
      }
      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true;
      // remove self from parent
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      // teardown watchers
      if (vm._watcher) {
        vm._watcher.teardown();
      }
      var i = vm._watchers.length;
      while (i--) {
        vm._watchers[i].teardown();
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      // call the last hook...
      vm._isDestroyed = true;
      // invoke destroy hooks on current rendered tree
      vm.__patch__(vm._vnode, null);
      // fire destroyed hook
      callHook(vm, 'destroyed');
      // turn off all instance listeners.
      vm.$off();
      // remove __vue__ reference
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
    };
  }

  function mountComponent(vm, el, hydrating) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      {
        /* istanbul ignore if */
        if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
          warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
        } else {
          warn('Failed to mount component: template or render function not defined.', vm);
        }
      }
    }
    callHook(vm, 'beforeMount');

    var updateComponent;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      updateComponent = function updateComponent() {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;

        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure(name + " render", startTag, endTag);

        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure(name + " patch", startTag, endTag);
      };
    } else {
      updateComponent = function updateComponent() {
        vm._update(vm._render(), hydrating);
      };
    }

    vm._watcher = new Watcher(vm, updateComponent, noop);
    hydrating = false;

    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }
    return vm;
  }

  function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
    {
      isUpdatingChildComponent = true;
    }

    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren
    var hasChildren = !!(renderChildren || // has new static slots
    vm.$options._renderChildren || // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
    );

    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render

    if (vm._vnode) {
      // update child tree's parent
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;

    // update $attrs and $listensers hash
    // these are also reactive so they may trigger child update if the child
    // used them during render
    vm.$attrs = parentVnode.data && parentVnode.data.attrs;
    vm.$listeners = listeners;

    // update props
    if (propsData && vm.$options.props) {
      observerState.shouldConvert = false;
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        props[key] = validateProp(key, vm.$options.props, propsData, vm);
      }
      observerState.shouldConvert = true;
      // keep a copy of raw propsData
      vm.$options.propsData = propsData;
    }

    // update listeners
    if (listeners) {
      var oldListeners = vm.$options._parentListeners;
      vm.$options._parentListeners = listeners;
      updateComponentListeners(vm, listeners, oldListeners);
    }
    // resolve slots + force update if has children
    if (hasChildren) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }

    {
      isUpdatingChildComponent = false;
    }
  }

  function isInInactiveTree(vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) {
        return true;
      }
    }
    return false;
  }

  function activateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return;
      }
    } else if (vm._directInactive) {
      return;
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return;
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'deactivated');
    }
  }

  function callHook(vm, hook) {
    var handlers = vm.$options[hook];
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        try {
          handlers[i].call(vm);
        } catch (e) {
          handleError(e, vm, hook + " hook");
        }
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }
  }

  /*  */

  var MAX_UPDATE_COUNT = 100;

  var queue = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index = 0;

  /**
   * Reset the scheduler's state.
   */
  function resetSchedulerState() {
    index = queue.length = activatedChildren.length = 0;
    has = {};
    {
      circular = {};
    }
    waiting = flushing = false;
  }

  /**
   * Flush both queues and run the watchers.
   */
  function flushSchedulerQueue() {
    flushing = true;
    var watcher, id;

    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue.sort(function (a, b) {
      return a.id - b.id;
    });

    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index = 0; index < queue.length; index++) {
      watcher = queue[index];
      id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if ("development" !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
          break;
        }
      }
    }

    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();

    resetSchedulerState();

    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);

    // devtool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdatedHooks(queue) {
    var i = queue.length;
    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;
      if (vm._watcher === watcher && vm._isMounted) {
        callHook(vm, 'updated');
      }
    }
  }

  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */
  function queueActivatedComponent(vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks(queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true /* true */);
    }
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */
  function queueWatcher(watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      has[id] = true;
      if (!flushing) {
        queue.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;
        while (i > index && queue[i].id > watcher.id) {
          i--;
        }
        queue.splice(i + 1, 0, watcher);
      }
      // queue the flush
      if (!waiting) {
        waiting = true;
        nextTick(flushSchedulerQueue);
      }
    }
  }

  /*  */

  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */
  var Watcher = function Watcher(vm, expOrFn, cb, options) {
    this.vm = vm;
    vm._watchers.push(this);
    // options
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = expOrFn.toString();
    // parse expression for getter
    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = function () {};
        "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
      }
    }
    this.value = this.lazy ? undefined : this.get();
  };

  /**
   * Evaluate the getter, and re-collect dependencies.
   */
  Watcher.prototype.get = function get() {
    pushTarget(this);
    var value;
    var vm = this.vm;
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
      } else {
        throw e;
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value);
      }
      popTarget();
      this.cleanupDeps();
    }
    return value;
  };

  /**
   * Add a dependency to this directive.
   */
  Watcher.prototype.addDep = function addDep(dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */
  Watcher.prototype.cleanupDeps = function cleanupDeps() {
    var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      var dep = this$1.deps[i];
      if (!this$1.newDepIds.has(dep.id)) {
        dep.removeSub(this$1);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  Watcher.prototype.update = function update() {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */
  Watcher.prototype.run = function run() {
    if (this.active) {
      var value = this.get();
      if (value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) || this.deep) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  Watcher.prototype.evaluate = function evaluate() {
    this.value = this.get();
    this.dirty = false;
  };

  /**
   * Depend on all deps collected by this watcher.
   */
  Watcher.prototype.depend = function depend() {
    var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subscriber list.
   */
  Watcher.prototype.teardown = function teardown() {
    var this$1 = this;

    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      var i = this.deps.length;
      while (i--) {
        this$1.deps[i].removeSub(this$1);
      }
      this.active = false;
    }
  };

  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */
  var seenObjects = new _Set();
  function traverse(val) {
    seenObjects.clear();
    _traverse(val, seenObjects);
  }

  function _traverse(val, seen) {
    var i, keys;
    var isA = Array.isArray(val);
    if (!isA && !isObject(val) || !Object.isExtensible(val)) {
      return;
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return;
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--) {
        _traverse(val[i], seen);
      }
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) {
        _traverse(val[keys[i]], seen);
      }
    }
  }

  /*  */

  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };

  function proxy(target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter() {
      return this[sourceKey][key];
    };
    sharedPropertyDefinition.set = function proxySetter(val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState(vm) {
    vm._watchers = [];
    var opts = vm.$options;
    if (opts.props) {
      initProps(vm, opts.props);
    }
    if (opts.methods) {
      initMethods(vm, opts.methods);
    }
    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true /* asRootData */);
    }
    if (opts.computed) {
      initComputed(vm, opts.computed);
    }
    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }

  function checkOptionType(vm, name) {
    var option = vm.$options[name];
    if (!isPlainObject(option)) {
      warn("component option \"" + name + "\" should be an object.", vm);
    }
  }

  function initProps(vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {};
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    // root instance props should be converted
    observerState.shouldConvert = isRoot;
    var loop = function loop(key) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */
      {
        if (isReservedAttribute(key) || config.isReservedAttr(key)) {
          warn("\"" + key + "\" is a reserved attribute and cannot be used as component prop.", vm);
        }
        defineReactive$$1(props, key, value, function () {
          if (vm.$parent && !isUpdatingChildComponent) {
            warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
          }
        });
      }
      // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.
      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) {
      loop(key);
    }observerState.shouldConvert = true;
  }

  function initData(vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};
    if (!isPlainObject(data)) {
      data = {};
      "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;
    while (i--) {
      var key = keys[i];
      {
        if (methods && hasOwn(methods, key)) {
          warn("method \"" + key + "\" has already been defined as a data property.", vm);
        }
      }
      if (props && hasOwn(props, key)) {
        "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    }
    // observe data
    observe(data, true /* asRootData */);
  }

  function getData(data, vm) {
    try {
      return data.call(vm);
    } catch (e) {
      handleError(e, vm, "data()");
      return {};
    }
  }

  var computedWatcherOptions = { lazy: true };

  function initComputed(vm, computed) {
    "development" !== 'production' && checkOptionType(vm, 'computed');
    var watchers = vm._computedWatchers = Object.create(null);

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;
      if ("development" !== 'production' && getter == null) {
        warn("Getter is missing for computed property \"" + key + "\".", vm);
      }
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);

      // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else {
        if (key in vm.$data) {
          warn("The computed property \"" + key + "\" is already defined in data.", vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
        }
      }
    }
  }

  function defineComputed(target, key, userDef) {
    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = createComputedGetter(key);
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get ? userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
      sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
    }
    if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
      sharedPropertyDefinition.set = function () {
        warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
      };
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter(key) {
    return function computedGetter() {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value;
      }
    };
  }

  function initMethods(vm, methods) {
    "development" !== 'production' && checkOptionType(vm, 'methods');
    var props = vm.$options.props;
    for (var key in methods) {
      vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
      {
        if (methods[key] == null) {
          warn("method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
        }
        if (props && hasOwn(props, key)) {
          warn("method \"" + key + "\" has already been defined as a prop.", vm);
        }
      }
    }
  }

  function initWatch(vm, watch) {
    "development" !== 'production' && checkOptionType(vm, 'watch');
    for (var key in watch) {
      var handler = watch[key];
      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher(vm, keyOrFn, handler, options) {
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === 'string') {
      handler = vm[handler];
    }
    return vm.$watch(keyOrFn, handler, options);
  }

  function stateMixin(Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () {
      return this._data;
    };
    var propsDef = {};
    propsDef.get = function () {
      return this._props;
    };
    {
      dataDef.set = function (newData) {
        warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
      };
      propsDef.set = function () {
        warn("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);

    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (expOrFn, cb, options) {
      var vm = this;
      if (isPlainObject(cb)) {
        return createWatcher(vm, expOrFn, cb, options);
      }
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        cb.call(vm, watcher.value);
      }
      return function unwatchFn() {
        watcher.teardown();
      };
    };
  }

  /*  */

  function initProvide(vm) {
    var provide = vm.$options.provide;
    if (provide) {
      vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
    }
  }

  function initInjections(vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      observerState.shouldConvert = false;
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        {
          defineReactive$$1(vm, key, result[key], function () {
            warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
          });
        }
      });
      observerState.shouldConvert = true;
    }
  }

  function resolveInject(inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      var result = Object.create(null);
      var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var provideKey = inject[key];
        var source = vm;
        while (source) {
          if (source._provided && provideKey in source._provided) {
            result[key] = source._provided[provideKey];
            break;
          }
          source = source.$parent;
        }
        if ("development" !== 'production' && !source) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
      return result;
    }
  }

  /*  */

  function createFunctionalComponent(Ctor, propsData, data, context, children) {
    var props = {};
    var propOptions = Ctor.options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || {});
      }
    } else {
      if (isDef(data.attrs)) {
        mergeProps(props, data.attrs);
      }
      if (isDef(data.props)) {
        mergeProps(props, data.props);
      }
    }
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var _context = Object.create(context);
    var h = function h(a, b, c, d) {
      return createElement(_context, a, b, c, d, true);
    };
    var vnode = Ctor.options.render.call(null, h, {
      data: data,
      props: props,
      children: children,
      parent: context,
      listeners: data.on || {},
      injections: resolveInject(Ctor.options.inject, context),
      slots: function slots() {
        return resolveSlots(children, context);
      }
    });
    if (vnode instanceof VNode) {
      vnode.functionalContext = context;
      vnode.functionalOptions = Ctor.options;
      if (data.slot) {
        (vnode.data || (vnode.data = {})).slot = data.slot;
      }
    }
    return vnode;
  }

  function mergeProps(to, from) {
    for (var key in from) {
      to[camelize(key)] = from[key];
    }
  }

  /*  */

  // hooks to be invoked on component VNodes during patch
  var componentVNodeHooks = {
    init: function init(vnode, hydrating, parentElm, refElm) {
      if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
        var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      } else if (vnode.data.keepAlive) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      }
    },

    prepatch: function prepatch(oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(child, options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
      );
    },

    insert: function insert(vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true /* direct */);
        }
      }
    },

    destroy: function destroy(vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true /* direct */);
        }
      }
    }
  };

  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent(Ctor, data, context, children, tag) {
    if (isUndef(Ctor)) {
      return;
    }

    var baseCtor = context.$options._base;

    // plain options object: turn it into a constructor
    if (isObject(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }

    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
      {
        warn("Invalid Component definition: " + String(Ctor), context);
      }
      return;
    }

    // async component
    var asyncFactory;
    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
      if (Ctor === undefined) {
        // return a placeholder node for async component, which is rendered
        // as a comment node but preserves all the raw information for the node.
        // the information will be used for async server-rendering and hydration.
        return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
      }
    }

    data = data || {};

    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);

    // transform component v-model data into props & events
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }

    // extract props
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);

    // functional component
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children);
    }

    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    // so it gets processed during parent component patch.
    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners & slot

      // work around flow
      var slot = data.slot;
      data = {};
      if (slot) {
        data.slot = slot;
      }
    }

    // merge component management hooks onto the placeholder node
    mergeHooks(data);

    // return a placeholder vnode
    var name = Ctor.options.name || tag;
    var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);
    return vnode;
  }

  function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm, refElm) {
    var vnodeComponentOptions = vnode.componentOptions;
    var options = {
      _isComponent: true,
      parent: parent,
      propsData: vnodeComponentOptions.propsData,
      _componentTag: vnodeComponentOptions.tag,
      _parentVnode: vnode,
      _parentListeners: vnodeComponentOptions.listeners,
      _renderChildren: vnodeComponentOptions.children,
      _parentElm: parentElm || null,
      _refElm: refElm || null
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnodeComponentOptions.Ctor(options);
  }

  function mergeHooks(data) {
    if (!data.hook) {
      data.hook = {};
    }
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var fromParent = data.hook[key];
      var ours = componentVNodeHooks[key];
      data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
    }
  }

  function mergeHook$1(one, two) {
    return function (a, b, c, d) {
      one(a, b, c, d);
      two(a, b, c, d);
    };
  }

  // transform component v-model info (value and callback) into
  // prop and event handler respectively.
  function transformModel(options, data) {
    var prop = options.model && options.model.prop || 'value';
    var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    if (isDef(on[event])) {
      on[event] = [data.model.callback].concat(on[event]);
    } else {
      on[event] = data.model.callback;
    }
  }

  /*  */

  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;

  // wrapper function for providing a more flexible interface
  // without getting yelled at by flow
  function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType);
  }

  function _createElement(context, tag, data, children, normalizationType) {
    if (isDef(data) && isDef(data.__ob__)) {
      "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
      return createEmptyVNode();
    }
    // object syntax in v-bind
    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }
    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode();
    }
    // warn against non-primitive key
    if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
    // support single function children as default scoped slot
    if (Array.isArray(children) && typeof children[0] === 'function') {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
      var Ctor;
      ns = config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        // platform built-in elements
        vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
      } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(tag, data, children, undefined, undefined, context);
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }
    if (isDef(vnode)) {
      if (ns) {
        applyNS(vnode, ns);
      }
      return vnode;
    } else {
      return createEmptyVNode();
    }
  }

  function applyNS(vnode, ns) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      return;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && isUndef(child.ns)) {
          applyNS(child, ns);
        }
      }
    }
  }

  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */
  function renderList(val, render) {
    var ret, i, l, keys, key;
    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject(val)) {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
    if (isDef(ret)) {
      ret._isVList = true;
    }
    return ret;
  }

  /*  */

  /**
   * Runtime helper for rendering <slot>
   */
  function renderSlot(name, fallback, props, bindObject) {
    var scopedSlotFn = this.$scopedSlots[name];
    if (scopedSlotFn) {
      // scoped slot
      props = props || {};
      if (bindObject) {
        props = extend(extend({}, bindObject), props);
      }
      return scopedSlotFn(props) || fallback;
    } else {
      var slotNodes = this.$slots[name];
      // warn duplicate slot usage
      if (slotNodes && "development" !== 'production') {
        slotNodes._rendered && warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
        slotNodes._rendered = true;
      }
      return slotNodes || fallback;
    }
  }

  /*  */

  /**
   * Runtime helper for resolving filters
   */
  function resolveFilter(id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity;
  }

  /*  */

  /**
   * Runtime helper for checking keyCodes from config.
   */
  function checkKeyCodes(eventKeyCode, key, builtInAlias) {
    var keyCodes = config.keyCodes[key] || builtInAlias;
    if (Array.isArray(keyCodes)) {
      return keyCodes.indexOf(eventKeyCode) === -1;
    } else {
      return keyCodes !== eventKeyCode;
    }
  }

  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */
  function bindObjectProps(data, tag, value, asProp, isSync) {
    if (value) {
      if (!isObject(value)) {
        "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }
        var hash;
        var loop = function loop(key) {
          if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
          }
          if (!(key in hash)) {
            hash[key] = value[key];

            if (isSync) {
              var on = data.on || (data.on = {});
              on["update:" + key] = function ($event) {
                value[key] = $event;
              };
            }
          }
        };

        for (var key in value) {
          loop(key);
        }
      }
    }
    return data;
  }

  /*  */

  /**
   * Runtime helper for rendering static trees.
   */
  function renderStatic(index, isInFor) {
    var tree = this._staticTrees[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree by doing a shallow clone.
    if (tree && !isInFor) {
      return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);
    }
    // otherwise, render a fresh tree.
    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);
    markStatic(tree, "__static__" + index, false);
    return tree;
  }

  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */
  function markOnce(tree, index, key) {
    markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
    return tree;
  }

  function markStatic(tree, key, isOnce) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], key + "_" + i, isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode(node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }

  /*  */

  function bindObjectListeners(data, value) {
    if (value) {
      if (!isPlainObject(value)) {
        "development" !== 'production' && warn('v-on without argument expects an Object value', this);
      } else {
        var on = data.on = data.on ? extend({}, data.on) : {};
        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(ours, existing) : ours;
        }
      }
    }
    return data;
  }

  /*  */

  function initRender(vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null;
    var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    vm._c = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, false);
    };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, true);
    };

    // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated
    var parentData = parentVnode && parentVnode.data;
    /* istanbul ignore else */
    {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, function () {
        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
      }, true);
      defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, function () {
        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
      }, true);
    }
  }

  function renderMixin(Vue) {
    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this);
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      var _parentVnode = ref._parentVnode;

      if (vm._isMounted) {
        // clone slot nodes on re-renders
        for (var key in vm.$slots) {
          vm.$slots[key] = cloneVNodes(vm.$slots[key]);
        }
      }

      vm.$scopedSlots = _parentVnode && _parentVnode.data.scopedSlots || emptyObject;

      if (staticRenderFns && !vm._staticTrees) {
        vm._staticTrees = [];
      }
      // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.
      vm.$vnode = _parentVnode;
      // render self
      var vnode;
      try {
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render function");
        // return error render result,
        // or previous vnode to prevent render error causing blank component
        /* istanbul ignore else */
        {
          vnode = vm.$options.renderError ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) : vm._vnode;
        }
      }
      // return empty vnode in case the render function errored out
      if (!(vnode instanceof VNode)) {
        if ("development" !== 'production' && Array.isArray(vnode)) {
          warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
        }
        vnode = createEmptyVNode();
      }
      // set parent
      vnode.parent = _parentVnode;
      return vnode;
    };

    // internal render helpers.
    // these are exposed on the instance prototype to reduce generated render
    // code size.
    Vue.prototype._o = markOnce;
    Vue.prototype._n = toNumber;
    Vue.prototype._s = toString;
    Vue.prototype._l = renderList;
    Vue.prototype._t = renderSlot;
    Vue.prototype._q = looseEqual;
    Vue.prototype._i = looseIndexOf;
    Vue.prototype._m = renderStatic;
    Vue.prototype._f = resolveFilter;
    Vue.prototype._k = checkKeyCodes;
    Vue.prototype._b = bindObjectProps;
    Vue.prototype._v = createTextVNode;
    Vue.prototype._e = createEmptyVNode;
    Vue.prototype._u = resolveScopedSlots;
    Vue.prototype._g = bindObjectListeners;
  }

  /*  */

  var uid$1 = 0;

  function initMixin(Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      // a uid
      vm._uid = uid$1++;

      var startTag, endTag;
      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        startTag = "vue-perf-init:" + vm._uid;
        endTag = "vue-perf-end:" + vm._uid;
        mark(startTag);
      }

      // a flag to avoid this being observed
      vm._isVue = true;
      // merge options
      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
      }
      /* istanbul ignore else */
      {
        initProxy(vm);
      }
      // expose real self
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props
      initState(vm);
      initProvide(vm); // resolve provide after data/props
      callHook(vm, 'created');

      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure(vm._name + " init", startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent(vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    // doing this because it's faster than dynamic enumeration.
    opts.parent = options.parent;
    opts.propsData = options.propsData;
    opts._parentVnode = options._parentVnode;
    opts._parentListeners = options._parentListeners;
    opts._renderChildren = options._renderChildren;
    opts._componentTag = options._componentTag;
    opts._parentElm = options._parentElm;
    opts._refElm = options._refElm;
    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions(Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions;
        // check if there are any late-modified/attached options (#4976)
        var modifiedOptions = resolveModifiedOptions(Ctor);
        // update base extend options
        if (modifiedOptions) {
          extend(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options;
  }

  function resolveModifiedOptions(Ctor) {
    var modified;
    var latest = Ctor.options;
    var extended = Ctor.extendOptions;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) {
          modified = {};
        }
        modified[key] = dedupe(latest[key], extended[key], sealed[key]);
      }
    }
    return modified;
  }

  function dedupe(latest, extended, sealed) {
    // compare latest and sealed to ensure lifecycle hooks won't be duplicated
    // between merges
    if (Array.isArray(latest)) {
      var res = [];
      sealed = Array.isArray(sealed) ? sealed : [sealed];
      extended = Array.isArray(extended) ? extended : [extended];
      for (var i = 0; i < latest.length; i++) {
        // push original options and not sealed options to exclude duplicated options
        if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
          res.push(latest[i]);
        }
      }
      return res;
    } else {
      return latest;
    }
  }

  function Vue$3(options) {
    if ("development" !== 'production' && !(this instanceof Vue$3)) {
      warn('Vue is a constructor and should be called with the `new` keyword');
    }
    this._init(options);
  }

  initMixin(Vue$3);
  stateMixin(Vue$3);
  eventsMixin(Vue$3);
  lifecycleMixin(Vue$3);
  renderMixin(Vue$3);

  /*  */

  function initUse(Vue) {
    Vue.use = function (plugin) {
      var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
      if (installedPlugins.indexOf(plugin) > -1) {
        return this;
      }

      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }
      installedPlugins.push(plugin);
      return this;
    };
  }

  /*  */

  function initMixin$1(Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this;
    };
  }

  /*  */

  function initExtend(Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId];
      }

      var name = extendOptions.name || Super.options.name;
      {
        if (!/^[a-zA-Z][\w-]*$/.test(name)) {
          warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
        }
      }

      var Sub = function VueComponent(options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub['super'] = Super;

      // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.
      if (Sub.options.props) {
        initProps$1(Sub);
      }
      if (Sub.options.computed) {
        initComputed$1(Sub);
      }

      // allow further extension/mixin/plugin usage
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;

      // create asset registers, so extended classes
      // can have their private assets too.
      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }

      // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend({}, Sub.options);

      // cache constructor
      cachedCtors[SuperId] = Sub;
      return Sub;
    };
  }

  function initProps$1(Comp) {
    var props = Comp.options.props;
    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1(Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }

  /*  */

  function initAssetRegisters(Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (id, definition) {
        if (!definition) {
          return this.options[type + 's'][id];
        } else {
          /* istanbul ignore if */
          {
            if (type === 'component' && config.isReservedTag(id)) {
              warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
            }
          }
          if (type === 'component' && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === 'directive' && typeof definition === 'function') {
            definition = { bind: definition, update: definition };
          }
          this.options[type + 's'][id] = definition;
          return definition;
        }
      };
    });
  }

  /*  */

  var patternTypes = [String, RegExp, Array];

  function getComponentName(opts) {
    return opts && (opts.Ctor.options.name || opts.tag);
  }

  function matches(pattern, name) {
    if (Array.isArray(pattern)) {
      return pattern.indexOf(name) > -1;
    } else if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1;
    } else if (isRegExp(pattern)) {
      return pattern.test(name);
    }
    /* istanbul ignore next */
    return false;
  }

  function pruneCache(cache, current, filter) {
    for (var key in cache) {
      var cachedNode = cache[key];
      if (cachedNode) {
        var name = getComponentName(cachedNode.componentOptions);
        if (name && !filter(name)) {
          if (cachedNode !== current) {
            pruneCacheEntry(cachedNode);
          }
          cache[key] = null;
        }
      }
    }
  }

  function pruneCacheEntry(vnode) {
    if (vnode) {
      vnode.componentInstance.$destroy();
    }
  }

  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,

    props: {
      include: patternTypes,
      exclude: patternTypes
    },

    created: function created() {
      this.cache = Object.create(null);
    },

    destroyed: function destroyed() {
      var this$1 = this;

      for (var key in this$1.cache) {
        pruneCacheEntry(this$1.cache[key]);
      }
    },

    watch: {
      include: function include(val) {
        pruneCache(this.cache, this._vnode, function (name) {
          return matches(val, name);
        });
      },
      exclude: function exclude(val) {
        pruneCache(this.cache, this._vnode, function (name) {
          return !matches(val, name);
        });
      }
    },

    render: function render() {
      var vnode = getFirstComponentChild(this.$slots.default);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        // check pattern
        var name = getComponentName(componentOptions);
        if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {
          return vnode;
        }
        var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;
        if (this.cache[key]) {
          vnode.componentInstance = this.cache[key].componentInstance;
        } else {
          this.cache[key] = vnode;
        }
        vnode.data.keepAlive = true;
      }
      return vnode;
    }
  };

  var builtInComponents = {
    KeepAlive: KeepAlive
  };

  /*  */

  function initGlobalAPI(Vue) {
    // config
    var configDef = {};
    configDef.get = function () {
      return config;
    };
    {
      configDef.set = function () {
        warn('Do not replace the Vue.config object, set individual fields instead.');
      };
    }
    Object.defineProperty(Vue, 'config', configDef);

    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
      warn: warn,
      extend: extend,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive$$1
    };

    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick;

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    });

    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;

    extend(Vue.options.components, builtInComponents);

    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue$3);

  Object.defineProperty(Vue$3.prototype, '$isServer', {
    get: isServerRendering
  });

  Object.defineProperty(Vue$3.prototype, '$ssrContext', {
    get: function get() {
      /* istanbul ignore next */
      return this.$vnode && this.$vnode.ssrContext;
    }
  });

  Vue$3.version = '2.4.2';

  /*  */

  // these are reserved for web because they are directly compiled away
  // during template compilation
  var isReservedAttr = makeMap('style,class');

  // attributes that should be using props for binding
  var acceptValue = makeMap('input,textarea,option,select');
  var mustUseProp = function mustUseProp(tag, type, attr) {
    return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

  var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');

  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function isXlink(name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
  };

  var getXlinkProp = function getXlinkProp(name) {
    return isXlink(name) ? name.slice(6, name.length) : '';
  };

  var isFalsyAttrValue = function isFalsyAttrValue(val) {
    return val == null || val === false;
  };

  /*  */

  function genClassForVnode(vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }
    return renderClass(data.staticClass, data.class);
  }

  function mergeClassData(child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class) ? [child.class, parent.class] : parent.class
    };
  }

  function renderClass(staticClass, dynamicClass) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass));
    }
    /* istanbul ignore next */
    return '';
  }

  function concat(a, b) {
    return a ? b ? a + ' ' + b : a : b || '';
  }

  function stringifyClass(value) {
    if (Array.isArray(value)) {
      return stringifyArray(value);
    }
    if (isObject(value)) {
      return stringifyObject(value);
    }
    if (typeof value === 'string') {
      return value;
    }
    /* istanbul ignore next */
    return '';
  }

  function stringifyArray(value) {
    var res = '';
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
        if (res) {
          res += ' ';
        }
        res += stringified;
      }
    }
    return res;
  }

  function stringifyObject(value) {
    var res = '';
    for (var key in value) {
      if (value[key]) {
        if (res) {
          res += ' ';
        }
        res += key;
      }
    }
    return res;
  }

  /*  */

  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };

  var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot');

  // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.
  var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

  var isPreTag = function isPreTag(tag) {
    return tag === 'pre';
  };

  var isReservedTag = function isReservedTag(tag) {
    return isHTMLTag(tag) || isSVG(tag);
  };

  function getTagNamespace(tag) {
    if (isSVG(tag)) {
      return 'svg';
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
      return 'math';
    }
  }

  var unknownElementCache = Object.create(null);
  function isUnknownElement(tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true;
    }
    if (isReservedTag(tag)) {
      return false;
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag];
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
    } else {
      return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
    }
  }

  /*  */

  /**
   * Query an element selector if it's not an element already.
   */
  function query(el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);
      if (!selected) {
        "development" !== 'production' && warn('Cannot find element: ' + el);
        return document.createElement('div');
      }
      return selected;
    } else {
      return el;
    }
  }

  /*  */

  function createElement$1(tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
      return elm;
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }
    return elm;
  }

  function createElementNS(namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName);
  }

  function createTextNode(text) {
    return document.createTextNode(text);
  }

  function createComment(text) {
    return document.createComment(text);
  }

  function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild(node, child) {
    node.removeChild(child);
  }

  function appendChild(node, child) {
    node.appendChild(child);
  }

  function parentNode(node) {
    return node.parentNode;
  }

  function nextSibling(node) {
    return node.nextSibling;
  }

  function tagName(node) {
    return node.tagName;
  }

  function setTextContent(node, text) {
    node.textContent = text;
  }

  function setAttribute(node, key, val) {
    node.setAttribute(key, val);
  }

  var nodeOps = Object.freeze({
    createElement: createElement$1,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    setAttribute: setAttribute
  });

  /*  */

  var ref = {
    create: function create(_, vnode) {
      registerRef(vnode);
    },
    update: function update(oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy(vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef(vnode, isRemoval) {
    var key = vnode.data.ref;
    if (!key) {
      return;
    }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;
    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (!Array.isArray(refs[key])) {
          refs[key] = [ref];
        } else if (refs[key].indexOf(ref) < 0) {
          // $flow-disable-line
          refs[key].push(ref);
        }
      } else {
        refs[key] = ref;
      }
    }
  }

  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
  
  /*
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

  var emptyNode = new VNode('', {}, []);

  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode(a, b) {
    return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
  }

  // Some browsers do not support dynamically changing type for <input>
  // so they need to be treated as different nodes
  function sameInputType(a, b) {
    if (a.tag !== 'input') {
      return true;
    }
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB;
  }

  function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key)) {
        map[key] = i;
      }
    }
    return map;
  }

  function createPatchFunction(backend) {
    var i, j;
    var cbs = {};

    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt(elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
    }

    function createRmCb(childElm, listeners) {
      function remove$$1() {
        if (--remove$$1.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove$$1.listeners = listeners;
      return remove$$1;
    }

    function removeNode(el) {
      var parent = nodeOps.parentNode(el);
      // element may have already been removed due to v-html / v-text
      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    var inPre = 0;
    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {
      vnode.isRootInsert = !nested; // for transition enter check
      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return;
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        {
          if (data && data.pre) {
            inPre++;
          }
          if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {
            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
          }
        }
        vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
        setScope(vnode);

        /* istanbul ignore if */
        {
          createChildren(vnode, children, insertedVnodeQueue);
          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }
          insert(parentElm, vnode.elm, refElm);
        }

        if ("development" !== 'production' && data && data.pre) {
          inPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;
      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false /* hydrating */, parentElm, refElm);
        }
        // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true;
        }
      }
    }

    function initComponent(vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode);
        // make sure to invoke the insert hook
        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i;
      // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break;
        }
      }
      // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself
      insert(parentElm, vnode.elm, refElm);
    }

    function insert(parent, elm, ref$$1) {
      if (isDef(parent)) {
        if (isDef(ref$$1)) {
          if (ref$$1.parentNode === parent) {
            nodeOps.insertBefore(parent, elm, ref$$1);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren(vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
      }
    }

    function isPatchable(vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag);
    }

    function invokeCreateHooks(vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (isDef(i.create)) {
          i.create(emptyNode, vnode);
        }
        if (isDef(i.insert)) {
          insertedVnodeQueue.push(vnode);
        }
      }
    }

    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope(vnode) {
      var i;
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setAttribute(vnode.elm, i, '');
        }
        ancestor = ancestor.parent;
      }
      // for slot content they should also get the scopeId from the host instance.
      if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
    }

    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
      }
    }

    function invokeDestroyHook(vnode) {
      var i, j;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) {
          i(vnode);
        }
        for (i = 0; i < cbs.destroy.length; ++i) {
          cbs.destroy[i](vnode);
        }
      }
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else {
            // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook(vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        }
        // recursively invoke hooks on child component root node
        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }
        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }
        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, elmToMove, refElm;

      // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions
      var canMove = !removeOnly;

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) {
          // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) {
          // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) {
            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
          }
          idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
          if (isUndef(idxInOld)) {
            // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            elmToMove = oldCh[idxInOld];
            /* istanbul ignore if */
            if ("development" !== 'production' && !elmToMove) {
              warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');
            }
            if (sameVnode(elmToMove, newStartVnode)) {
              patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
              newStartVnode = newCh[++newStartIdx];
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
              newStartVnode = newCh[++newStartIdx];
            }
          }
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
      if (oldVnode === vnode) {
        return;
      }

      var elm = vnode.elm = oldVnode.elm;

      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }
        return;
      }

      // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.
      if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
        vnode.componentInstance = oldVnode.componentInstance;
        return;
      }

      var i;
      var data = vnode.data;
      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }

      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) {
          cbs.update[i](oldVnode, vnode);
        }
        if (isDef(i = data.hook) && isDef(i = i.update)) {
          i(oldVnode, vnode);
        }
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) {
            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
          }
        } else if (isDef(ch)) {
          if (isDef(oldVnode.text)) {
            nodeOps.setTextContent(elm, '');
          }
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(elm, oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
          i(oldVnode, vnode);
        }
      }
    }

    function invokeInsertHook(vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var bailed = false;
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate(elm, vnode, insertedVnodeQueue) {
      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.elm = elm;
        vnode.isAsyncPlaceholder = true;
        return true;
      }
      {
        if (!assertNodeMatch(elm, vnode)) {
          return false;
        }
      }
      vnode.elm = elm;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) {
          i(vnode, true /* hydrating */);
        }
        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true;
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              if ("development" !== 'production' && typeof console !== 'undefined' && !bailed) {
                bailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false;
            }
          }
        }
        if (isDef(data)) {
          for (var key in data) {
            if (!isRenderedModule(key)) {
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break;
            }
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true;
    }

    function assertNodeMatch(node, vnode) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3);
      }
    }

    return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) {
          invokeDestroyHook(oldVnode);
        }
        return;
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue, parentElm, refElm);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode;
              } else {
                warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
              }
            }
            // either not server-rendered, or hydration failed.
            // create an empty node and replace it
            oldVnode = emptyNodeAt(oldVnode);
          }
          // replacing existing element
          var oldElm = oldVnode.elm;
          var parentElm$1 = nodeOps.parentNode(oldElm);
          createElm(vnode, insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));

          if (isDef(vnode.parent)) {
            // component root element replaced.
            // update parent placeholder node element, recursively
            var ancestor = vnode.parent;
            while (ancestor) {
              ancestor.elm = vnode.elm;
              ancestor = ancestor.parent;
            }
            if (isPatchable(vnode)) {
              for (var i = 0; i < cbs.create.length; ++i) {
                cbs.create[i](emptyNode, vnode.parent);
              }
            }
          }

          if (isDef(parentElm$1)) {
            removeVnodes(parentElm$1, [oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm;
    };
  }

  /*  */

  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives(vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives(oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update(oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

    var dirsWithInsert = [];
    var dirsWithPostpatch = [];

    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        callHook$1(dir, 'update', vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function callInsert() {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1(dirs, vm) {
    var res = Object.create(null);
    if (!dirs) {
      return res;
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    }
    return res;
  }

  function getRawDirName(dir) {
    return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
  }

  function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
      }
    }
  }

  var baseModules = [ref, directives];

  /*  */

  function updateAttrs(oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return;
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return;
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    /* istanbul ignore if */
    if (isIE9 && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr(el, key, value) {
    if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        el.setAttribute(key, key);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        el.setAttribute(key, value);
      }
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };

  /*  */

  function updateClass(oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
      return;
    }

    var cls = genClassForVnode(vnode);

    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }

    // set the class
    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };

  /*  */

  var validDivisionCharRE = /[\w).+\-_$\]]/;

  function parseFilters(exp) {
    var inSingle = false;
    var inDouble = false;
    var inTemplateString = false;
    var inRegex = false;
    var curly = 0;
    var square = 0;
    var paren = 0;
    var lastFilterIndex = 0;
    var c, prev, i, expression, filters;

    for (i = 0; i < exp.length; i++) {
      prev = c;
      c = exp.charCodeAt(i);
      if (inSingle) {
        if (c === 0x27 && prev !== 0x5C) {
          inSingle = false;
        }
      } else if (inDouble) {
        if (c === 0x22 && prev !== 0x5C) {
          inDouble = false;
        }
      } else if (inTemplateString) {
        if (c === 0x60 && prev !== 0x5C) {
          inTemplateString = false;
        }
      } else if (inRegex) {
        if (c === 0x2f && prev !== 0x5C) {
          inRegex = false;
        }
      } else if (c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
        if (expression === undefined) {
          // first filter, end of expression
          lastFilterIndex = i + 1;
          expression = exp.slice(0, i).trim();
        } else {
          pushFilter();
        }
      } else {
        switch (c) {
          case 0x22:
            inDouble = true;break; // "
          case 0x27:
            inSingle = true;break; // '
          case 0x60:
            inTemplateString = true;break; // `
          case 0x28:
            paren++;break; // (
          case 0x29:
            paren--;break; // )
          case 0x5B:
            square++;break; // [
          case 0x5D:
            square--;break; // ]
          case 0x7B:
            curly++;break; // {
          case 0x7D:
            curly--;break; // }
        }
        if (c === 0x2f) {
          // /
          var j = i - 1;
          var p = void 0;
          // find first non-whitespace prev char
          for (; j >= 0; j--) {
            p = exp.charAt(j);
            if (p !== ' ') {
              break;
            }
          }
          if (!p || !validDivisionCharRE.test(p)) {
            inRegex = true;
          }
        }
      }
    }

    if (expression === undefined) {
      expression = exp.slice(0, i).trim();
    } else if (lastFilterIndex !== 0) {
      pushFilter();
    }

    function pushFilter() {
      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
      lastFilterIndex = i + 1;
    }

    if (filters) {
      for (i = 0; i < filters.length; i++) {
        expression = wrapFilter(expression, filters[i]);
      }
    }

    return expression;
  }

  function wrapFilter(exp, filter) {
    var i = filter.indexOf('(');
    if (i < 0) {
      // _f: resolveFilter
      return "_f(\"" + filter + "\")(" + exp + ")";
    } else {
      var name = filter.slice(0, i);
      var args = filter.slice(i + 1);
      return "_f(\"" + name + "\")(" + exp + "," + args;
    }
  }

  /*  */

  function baseWarn(msg) {
    console.error("[Vue compiler]: " + msg);
  }

  function pluckModuleFunction(modules, key) {
    return modules ? modules.map(function (m) {
      return m[key];
    }).filter(function (_) {
      return _;
    }) : [];
  }

  function addProp(el, name, value) {
    (el.props || (el.props = [])).push({ name: name, value: value });
  }

  function addAttr(el, name, value) {
    (el.attrs || (el.attrs = [])).push({ name: name, value: value });
  }

  function addDirective(el, name, rawName, value, arg, modifiers) {
    (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
  }

  function addHandler(el, name, value, modifiers, important, warn) {
    // warn prevent and passive modifier
    /* istanbul ignore if */
    if ("development" !== 'production' && warn && modifiers && modifiers.prevent && modifiers.passive) {
      warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
    }
    // check capture modifier
    if (modifiers && modifiers.capture) {
      delete modifiers.capture;
      name = '!' + name; // mark the event as captured
    }
    if (modifiers && modifiers.once) {
      delete modifiers.once;
      name = '~' + name; // mark the event as once
    }
    /* istanbul ignore if */
    if (modifiers && modifiers.passive) {
      delete modifiers.passive;
      name = '&' + name; // mark the event as passive
    }
    var events;
    if (modifiers && modifiers.native) {
      delete modifiers.native;
      events = el.nativeEvents || (el.nativeEvents = {});
    } else {
      events = el.events || (el.events = {});
    }
    var newHandler = { value: value, modifiers: modifiers };
    var handlers = events[name];
    /* istanbul ignore if */
    if (Array.isArray(handlers)) {
      important ? handlers.unshift(newHandler) : handlers.push(newHandler);
    } else if (handlers) {
      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
    } else {
      events[name] = newHandler;
    }
  }

  function getBindingAttr(el, name, getStatic) {
    var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);
    if (dynamicValue != null) {
      return parseFilters(dynamicValue);
    } else if (getStatic !== false) {
      var staticValue = getAndRemoveAttr(el, name);
      if (staticValue != null) {
        return JSON.stringify(staticValue);
      }
    }
  }

  function getAndRemoveAttr(el, name) {
    var val;
    if ((val = el.attrsMap[name]) != null) {
      var list = el.attrsList;
      for (var i = 0, l = list.length; i < l; i++) {
        if (list[i].name === name) {
          list.splice(i, 1);
          break;
        }
      }
    }
    return val;
  }

  /*  */

  /**
   * Cross-platform code generation for component v-model
   */
  function genComponentModel(el, value, modifiers) {
    var ref = modifiers || {};
    var number = ref.number;
    var trim = ref.trim;

    var baseValueExpression = '$$v';
    var valueExpression = baseValueExpression;
    if (trim) {
      valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }
    var assignment = genAssignmentCode(value, valueExpression);

    el.model = {
      value: "(" + value + ")",
      expression: "\"" + value + "\"",
      callback: "function (" + baseValueExpression + ") {" + assignment + "}"
    };
  }

  /**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */
  function genAssignmentCode(value, assignment) {
    var modelRs = parseModel(value);
    if (modelRs.idx === null) {
      return value + "=" + assignment;
    } else {
      return "$set(" + modelRs.exp + ", " + modelRs.idx + ", " + assignment + ")";
    }
  }

  /**
   * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
   *
   * for loop possible cases:
   *
   * - test
   * - test[idx]
   * - test[test1[idx]]
   * - test["a"][idx]
   * - xxx.test[a[a].test1[idx]]
   * - test.xxx.a["asa"][test1[idx]]
   *
   */

  var len;
  var str;
  var chr;
  var index$1;
  var expressionPos;
  var expressionEndPos;

  function parseModel(val) {
    str = val;
    len = str.length;
    index$1 = expressionPos = expressionEndPos = 0;

    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
      return {
        exp: val,
        idx: null
      };
    }

    while (!eof()) {
      chr = next();
      /* istanbul ignore if */
      if (isStringStart(chr)) {
        parseString(chr);
      } else if (chr === 0x5B) {
        parseBracket(chr);
      }
    }

    return {
      exp: val.substring(0, expressionPos),
      idx: val.substring(expressionPos + 1, expressionEndPos)
    };
  }

  function next() {
    return str.charCodeAt(++index$1);
  }

  function eof() {
    return index$1 >= len;
  }

  function isStringStart(chr) {
    return chr === 0x22 || chr === 0x27;
  }

  function parseBracket(chr) {
    var inBracket = 1;
    expressionPos = index$1;
    while (!eof()) {
      chr = next();
      if (isStringStart(chr)) {
        parseString(chr);
        continue;
      }
      if (chr === 0x5B) {
        inBracket++;
      }
      if (chr === 0x5D) {
        inBracket--;
      }
      if (inBracket === 0) {
        expressionEndPos = index$1;
        break;
      }
    }
  }

  function parseString(chr) {
    var stringQuote = chr;
    while (!eof()) {
      chr = next();
      if (chr === stringQuote) {
        break;
      }
    }
  }

  /*  */

  var warn$1;

  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.
  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';

  function model(el, dir, _warn) {
    warn$1 = _warn;
    var value = dir.value;
    var modifiers = dir.modifiers;
    var tag = el.tag;
    var type = el.attrsMap.type;

    {
      var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
      if (tag === 'input' && dynamicType) {
        warn$1("<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" + "v-model does not support dynamic input types. Use v-if branches instead.");
      }
      // inputs with type="file" are read only and setting the input's
      // value will throw an error.
      if (tag === 'input' && type === 'file') {
        warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.");
      }
    }

    if (el.component) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false;
    } else if (tag === 'select') {
      genSelect(el, value, modifiers);
    } else if (tag === 'input' && type === 'checkbox') {
      genCheckboxModel(el, value, modifiers);
    } else if (tag === 'input' && type === 'radio') {
      genRadioModel(el, value, modifiers);
    } else if (tag === 'input' || tag === 'textarea') {
      genDefaultModel(el, value, modifiers);
    } else if (!config.isReservedTag(tag)) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false;
    } else {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');
    }

    // ensure runtime directive metadata
    return true;
  }

  function genCheckboxModel(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
    addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
    addHandler(el, CHECKBOX_RADIO_TOKEN, "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + value + "=$$a.concat($$v))}" + "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
  }

  function genRadioModel(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
    addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
    addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
  }

  function genSelect(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";

    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
    var code = "var $$selectedVal = " + selectedVal + ";";
    code = code + " " + genAssignmentCode(value, assignment);
    addHandler(el, 'change', code, null, true);
  }

  function genDefaultModel(el, value, modifiers) {
    var type = el.attrsMap.type;
    var ref = modifiers || {};
    var lazy = ref.lazy;
    var number = ref.number;
    var trim = ref.trim;
    var needCompositionGuard = !lazy && type !== 'range';
    var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';

    var valueExpression = '$event.target.value';
    if (trim) {
      valueExpression = "$event.target.value.trim()";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }

    var code = genAssignmentCode(value, valueExpression);
    if (needCompositionGuard) {
      code = "if($event.target.composing)return;" + code;
    }

    addProp(el, 'value', "(" + value + ")");
    addHandler(el, event, code, null, true);
    if (trim || number) {
      addHandler(el, 'blur', '$forceUpdate()');
    }
  }

  /*  */

  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.
  function normalizeEvents(on) {
    var event;
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    }
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      // Chrome fires microtasks in between click/change, leads to #4521
      event = isChrome ? 'click' : 'change';
      on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1;

  function add$1(event, _handler, once$$1, capture, passive) {
    if (once$$1) {
      var oldHandler = _handler;
      var _target = target$1; // save current target element in closure
      _handler = function handler(ev) {
        var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);
        if (res !== null) {
          remove$2(event, _handler, capture, _target);
        }
      };
    }
    target$1.addEventListener(event, _handler, supportsPassive ? { capture: capture, passive: passive } : capture);
  }

  function remove$2(event, handler, capture, _target) {
    (_target || target$1).removeEventListener(event, handler, capture);
  }

  function updateDOMListeners(oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return;
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };

  /*  */

  function updateDOMProps(oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return;
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend({}, props);
    }

    for (key in oldProps) {
      if (isUndef(props[key])) {
        elm[key] = '';
      }
    }
    for (key in props) {
      cur = props[key];
      // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)
      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) {
          vnode.children.length = 0;
        }
        if (cur === oldProps[key]) {
          continue;
        }
      }

      if (key === 'value') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur;
        // avoid resetting cursor position when value is the same
        var strCur = isUndef(cur) ? '' : String(cur);
        if (shouldUpdateValue(elm, vnode, strCur)) {
          elm.value = strCur;
        }
      } else {
        elm[key] = cur;
      }
    }
  }

  // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue(elm, vnode, checkVal) {
    return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(elm, checkVal));
  }

  function isDirty(elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true;
    // #6157
    // work around IE bug when accessing document.activeElement in an iframe
    try {
      notInFocus = document.activeElement !== elm;
    } catch (e) {}
    return notInFocus && elm.value !== checkVal;
  }

  function isInputChanged(elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers) && modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }
    if (isDef(modifiers) && modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
    return value !== newVal;
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };

  /*  */

  var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res;
  });

  // merge static and dynamic style data on the same vnode
  function normalizeStyleData(data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle ? extend(data.staticStyle, style) : style;
  }

  // normalize possible array / string values into Object
  function normalizeStyleBinding(bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle);
    }
    if (typeof bindingStyle === 'string') {
      return parseStyleText(bindingStyle);
    }
    return bindingStyle;
  }

  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */
  function getStyle(vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
          extend(res, styleData);
        }
      }
    }

    if (styleData = normalizeStyleData(vnode.data)) {
      extend(res, styleData);
    }

    var parentNode = vnode;
    while (parentNode = parentNode.parent) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend(res, styleData);
      }
    }
    return res;
  }

  /*  */

  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function setProp(el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(name, val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var vendorNames = ['Webkit', 'Moz', 'ms'];

  var emptyStyle;
  var normalize = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize(prop);
    if (prop !== 'filter' && prop in emptyStyle) {
      return prop;
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
      var name = vendorNames[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  });

  function updateStyle(oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
      return;
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;

    var style = normalizeStyleBinding(vnode.data.style) || {};

    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likley wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;

    var newStyle = getStyle(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };

  /*  */

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function addClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) {
          return el.classList.add(c);
        });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function removeClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) {
          return el.classList.remove(c);
        });
      } else {
        el.classList.remove(cls);
      }
      if (!el.classList.length) {
        el.removeAttribute('class');
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      cur = cur.trim();
      if (cur) {
        el.setAttribute('class', cur);
      } else {
        el.removeAttribute('class');
      }
    }
  }

  /*  */

  function resolveTransition(def$$1) {
    if (!def$$1) {
      return;
    }
    /* istanbul ignore else */
    if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {
      var res = {};
      if (def$$1.css !== false) {
        extend(res, autoCssTransition(def$$1.name || 'v'));
      }
      extend(res, def$$1);
      return res;
    } else if (typeof def$$1 === 'string') {
      return autoCssTransition(def$$1);
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: name + "-enter",
      enterToClass: name + "-enter-to",
      enterActiveClass: name + "-enter-active",
      leaveClass: name + "-leave",
      leaveToClass: name + "-leave-to",
      leaveActiveClass: name + "-leave-active"
    };
  });

  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation';

  // Transition property/event sniffing
  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';
  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  }

  // binding to window is necessary to make hot reload work in IE in strict mode
  var raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;

  function nextFrame(fn) {
    raf(function () {
      raf(fn);
    });
  }

  function addTransitionClass(el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }

  function removeTransitionClass(el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }

  function whenTransitionEnds(el, expectedType, cb) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;
    if (!type) {
      return cb();
    }
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function end() {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function onEnd(e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el);
    var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
    var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = styles[animationProp + 'Delay'].split(', ');
    var animationDurations = styles[animationProp + 'Duration'].split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);

    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    };
  }

  function getTimeout(delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i]);
    }));
  }

  function toMs(s) {
    return Number(s.slice(0, -1)) * 1000;
  }

  /*  */

  function enter(vnode, toggleDisplay) {
    var el = vnode.elm;

    // call leave callback now
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return;
    }

    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration;

    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      transitionNode = transitionNode.parent;
      context = transitionNode.context;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return;
    }

    var startClass = isAppear && appearClass ? appearClass : enterClass;
    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;

    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
    var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
    var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;

    var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

    if ("development" !== 'production' && explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);

    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }

    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        addTransitionClass(el, toClass);
        removeTransitionClass(el, startClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave(vnode, rm) {
    var el = vnode.elm;

    // call enter callback now
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return rm();
    }

    /* istanbul ignore if */
    if (isDef(el._leaveCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);

    var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

    if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave() {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return;
      }
      // record leaving element
      if (!vnode.data.show) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          addTransitionClass(el, leaveToClass);
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled && !userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        });
      }
      leave && leave(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }

  // only used in dev mode
  function checkDuration(val, name, vnode) {
    if (typeof val !== 'number') {
      warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
    } else if (isNaN(val)) {
      warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
    }
  }

  function isValidDuration(val) {
    return typeof val === 'number' && !isNaN(val);
  }

  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */
  function getHookArgumentsLength(fn) {
    if (isUndef(fn)) {
      return false;
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
    } else {
      return (fn._length || fn.length) > 1;
    }
  }

  function _enter(_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove$$1(vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};

  var platformModules = [attrs, klass, events, domProps, style, transition];

  /*  */

  // the directive module should be applied last, after all
  // built-in modules have been applied.
  var modules = platformModules.concat(baseModules);

  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  var isTextInputType = makeMap('text,number,password,search,email,tel,url');

  /* istanbul ignore if */
  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var model$1 = {
    inserted: function inserted(el, binding, vnode) {
      if (vnode.tag === 'select') {
        var cb = function cb() {
          setSelected(el, binding, vnode.context);
        };
        cb();
        /* istanbul ignore if */
        if (isIE || isEdge) {
          setTimeout(cb, 0);
        }
        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.
          el.addEventListener('change', onCompositionEnd);
          if (!isAndroid) {
            el.addEventListener('compositionstart', onCompositionStart);
            el.addEventListener('compositionend', onCompositionEnd);
          }
          /* istanbul ignore if */
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },
    componentUpdated: function componentUpdated(el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.
        var prevOptions = el._vOptions;
        var curOptions = el._vOptions = [].map.call(el.options, getValue);
        if (curOptions.some(function (o, i) {
          return !looseEqual(o, prevOptions[i]);
        })) {
          trigger(el, 'change');
        }
      }
    }
  };

  function setSelected(el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
      return;
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return;
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function getValue(option) {
    return '_value' in option ? option._value : option.value;
  }

  function onCompositionStart(e) {
    e.target.composing = true;
  }

  function onCompositionEnd(e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) {
      return;
    }
    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger(el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /*  */

  // recursively search for possible transition defined inside the component root
  function locateNode(vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
  }

  var show = {
    bind: function bind(el, ref, vnode) {
      var value = ref.value;

      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;
      if (value && transition$$1) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },

    update: function update(el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;

      /* istanbul ignore if */
      if (value === oldValue) {
        return;
      }
      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      if (transition$$1) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },

    unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };

  var platformDirectives = {
    model: model$1,
    show: show
  };

  /*  */

  // Provides transition support for a single element/component.
  // supports transition mode (out-in / in-out)

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };

  // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered
  function getRealChild(vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children));
    } else {
      return vnode;
    }
  }

  function extractTransitionData(comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key$1 in listeners) {
      data[camelize(key$1)] = listeners[key$1];
    }
    return data;
  }

  function placeholder(h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      });
    }
  }

  function hasParentTransition(vnode) {
    while (vnode = vnode.parent) {
      if (vnode.data.transition) {
        return true;
      }
    }
  }

  function isSameChild(child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag;
  }

  function isAsyncPlaceholder(node) {
    return node.isComment && node.asyncFactory;
  }

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,

    render: function render(h) {
      var this$1 = this;

      var children = this.$options._renderChildren;
      if (!children) {
        return;
      }

      // filter out text nodes (possible whitespaces)
      children = children.filter(function (c) {
        return c.tag || isAsyncPlaceholder(c);
      });
      /* istanbul ignore if */
      if (!children.length) {
        return;
      }

      // warn multiple elements
      if ("development" !== 'production' && children.length > 1) {
        warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
      }

      var mode = this.mode;

      // warn invalid mode
      if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
        warn('invalid <transition> mode: ' + mode, this.$parent);
      }

      var rawChild = children[0];

      // if this is a component root node and the component's
      // parent container node also has transition, skip.
      if (hasParentTransition(this.$vnode)) {
        return rawChild;
      }

      // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive
      var child = getRealChild(rawChild);
      /* istanbul ignore if */
      if (!child) {
        return rawChild;
      }

      if (this._leaving) {
        return placeholder(h, rawChild);
      }

      // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.
      var id = "__transition-" + this._uid + "-";
      child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;

      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);

      // mark v-show
      // so that the transition module can hand over the control to the directive
      if (child.data.directives && child.data.directives.some(function (d) {
        return d.name === 'show';
      })) {
        child.data.show = true;
      }

      if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild)) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild && (oldChild.data.transition = extend({}, data));
        // handle transition mode
        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild);
        } else if (mode === 'in-out') {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild;
          }
          var delayedLeave;
          var performLeave = function performLeave() {
            delayedLeave();
          };
          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) {
            delayedLeave = leave;
          });
        }
      }

      return rawChild;
    }
  };

  /*  */

  // Provides transition support for list items.
  // supports move transitions using the FLIP technique.

  // Because the vdom's children update algorithm is "unstable" - i.e.
  // it doesn't guarantee the relative positioning of removed elements,
  // we force transition-group to update its children into two passes:
  // in the first pass, we remove all nodes that need to be removed,
  // triggering their leaving transition; in the second pass, we insert/move
  // into the final desired state. This way in the second pass removed
  // nodes will remain where they should be.

  var props = extend({
    tag: String,
    moveClass: String
  }, transitionProps);

  delete props.mode;

  var TransitionGroup = {
    props: props,

    render: function render(h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];
        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;
          } else {
            var opts = c.componentOptions;
            var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
            warn("<transition-group> children must be keyed: <" + name + ">");
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();
          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children);
    },

    beforeUpdate: function beforeUpdate() {
      // force removing pass
      this.__patch__(this._vnode, this.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );
      this._vnode = this.kept;
    },

    updated: function updated() {
      var children = this.prevChildren;
      var moveClass = this.moveClass || (this.name || 'v') + '-move';
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return;
      }

      // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);

      // force reflow to put everything in position
      var body = document.body;
      var f = body.offsetHeight; // eslint-disable-line

      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },

    methods: {
      hasMove: function hasMove(el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false;
        }
        /* istanbul ignore if */
        if (this._hasMove) {
          return this._hasMove;
        }
        // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) {
            removeClass(clone, cls);
          });
        }
        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return this._hasMove = info.hasTransform;
      }
    }
  };

  function callPendingCbs(c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition(c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation(c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };

  /*  */

  // install platform specific utils
  Vue$3.config.mustUseProp = mustUseProp;
  Vue$3.config.isReservedTag = isReservedTag;
  Vue$3.config.isReservedAttr = isReservedAttr;
  Vue$3.config.getTagNamespace = getTagNamespace;
  Vue$3.config.isUnknownElement = isUnknownElement;

  // install platform runtime directives & components
  extend(Vue$3.options.directives, platformDirectives);
  extend(Vue$3.options.components, platformComponents);

  // install platform patch function
  Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

  // public mount method
  Vue$3.prototype.$mount = function (el, hydrating) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating);
  };

  // devtools global hook
  /* istanbul ignore next */
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue$3);
      } else if ("development" !== 'production' && isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
    if ("development" !== 'production' && config.productionTip !== false && inBrowser && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);

  /*  */

  // check whether current browser encodes a char inside attribute values
  function shouldDecode(content, encoded) {
    var div = document.createElement('div');
    div.innerHTML = "<div a=\"" + content + "\"/>";
    return div.innerHTML.indexOf(encoded) > 0;
  }

  // #3663
  // IE encodes newlines inside attribute values while other browsers don't
  var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

  /*  */

  var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

  var buildRegex = cached(function (delimiters) {
    var open = delimiters[0].replace(regexEscapeRE, '\\$&');
    var close = delimiters[1].replace(regexEscapeRE, '\\$&');
    return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
  });

  function parseText(text, delimiters) {
    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
    if (!tagRE.test(text)) {
      return;
    }
    var tokens = [];
    var lastIndex = tagRE.lastIndex = 0;
    var match, index;
    while (match = tagRE.exec(text)) {
      index = match.index;
      // push text token
      if (index > lastIndex) {
        tokens.push(JSON.stringify(text.slice(lastIndex, index)));
      }
      // tag token
      var exp = parseFilters(match[1].trim());
      tokens.push("_s(" + exp + ")");
      lastIndex = index + match[0].length;
    }
    if (lastIndex < text.length) {
      tokens.push(JSON.stringify(text.slice(lastIndex)));
    }
    return tokens.join('+');
  }

  /*  */

  function transformNode(el, options) {
    var warn = options.warn || baseWarn;
    var staticClass = getAndRemoveAttr(el, 'class');
    if ("development" !== 'production' && staticClass) {
      var expression = parseText(staticClass, options.delimiters);
      if (expression) {
        warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
      }
    }
    if (staticClass) {
      el.staticClass = JSON.stringify(staticClass);
    }
    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
    if (classBinding) {
      el.classBinding = classBinding;
    }
  }

  function genData(el) {
    var data = '';
    if (el.staticClass) {
      data += "staticClass:" + el.staticClass + ",";
    }
    if (el.classBinding) {
      data += "class:" + el.classBinding + ",";
    }
    return data;
  }

  var klass$1 = {
    staticKeys: ['staticClass'],
    transformNode: transformNode,
    genData: genData
  };

  /*  */

  function transformNode$1(el, options) {
    var warn = options.warn || baseWarn;
    var staticStyle = getAndRemoveAttr(el, 'style');
    if (staticStyle) {
      /* istanbul ignore if */
      {
        var expression = parseText(staticStyle, options.delimiters);
        if (expression) {
          warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.');
        }
      }
      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
    }

    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
    if (styleBinding) {
      el.styleBinding = styleBinding;
    }
  }

  function genData$1(el) {
    var data = '';
    if (el.staticStyle) {
      data += "staticStyle:" + el.staticStyle + ",";
    }
    if (el.styleBinding) {
      data += "style:(" + el.styleBinding + "),";
    }
    return data;
  }

  var style$1 = {
    staticKeys: ['staticStyle'],
    transformNode: transformNode$1,
    genData: genData$1
  };

  var modules$1 = [klass$1, style$1];

  /*  */

  function text(el, dir) {
    if (dir.value) {
      addProp(el, 'textContent', "_s(" + dir.value + ")");
    }
  }

  /*  */

  function html(el, dir) {
    if (dir.value) {
      addProp(el, 'innerHTML', "_s(" + dir.value + ")");
    }
  }

  var directives$1 = {
    model: model,
    text: text,
    html: html
  };

  /*  */

  var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');

  // Elements that you can, intentionally, leave open
  // (and which close themselves)
  var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');

  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
  var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');

  /*  */

  var baseOptions = {
    expectHTML: true,
    modules: modules$1,
    directives: directives$1,
    isPreTag: isPreTag,
    isUnaryTag: isUnaryTag,
    mustUseProp: mustUseProp,
    canBeLeftOpenTag: canBeLeftOpenTag,
    isReservedTag: isReservedTag,
    getTagNamespace: getTagNamespace,
    staticKeys: genStaticKeys(modules$1)
  };

  /*  */

  var decoder;

  var he = {
    decode: function decode(html) {
      decoder = decoder || document.createElement('div');
      decoder.innerHTML = html;
      return decoder.textContent;
    }
  };

  /**
   * Not type-checking this file because it's mostly vendor code.
   */

  /*!
   * HTML Parser By John Resig (ejohn.org)
   * Modified by Juriy "kangax" Zaytsev
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   */

  // Regular Expressions for parsing tags and attributes
  var singleAttrIdentifier = /([^\s"'<>/=]+)/;
  var singleAttrAssign = /(?:=)/;
  var singleAttrValues = [
  // attr value double quotes
  /"([^"]*)"+/.source,
  // attr value, single quotes
  /'([^']*)'+/.source,
  // attr value, no quotes
  /([^\s"'=<>`]+)/.source];
  var attribute = new RegExp('^\\s*' + singleAttrIdentifier.source + '(?:\\s*(' + singleAttrAssign.source + ')' + '\\s*(?:' + singleAttrValues.join('|') + '))?');

  // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
  // but for Vue templates we can enforce a simple charset
  var ncname = '[a-zA-Z_][\\w\\-\\.]*';
  var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
  var startTagOpen = new RegExp('^<' + qnameCapture);
  var startTagClose = /^\s*(\/?)>/;
  var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
  var doctype = /^<!DOCTYPE [^>]+>/i;
  var comment = /^<!--/;
  var conditionalComment = /^<!\[/;

  var IS_REGEX_CAPTURING_BROKEN = false;
  'x'.replace(/x(.)?/g, function (m, g) {
    IS_REGEX_CAPTURING_BROKEN = g === '';
  });

  // Special Elements (can contain anything)
  var isPlainTextElement = makeMap('script,style,textarea', true);
  var reCache = {};

  var decodingMap = {
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&amp;': '&',
    '&#10;': '\n'
  };
  var encodedAttr = /&(?:lt|gt|quot|amp);/g;
  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

  // #5992
  var isIgnoreNewlineTag = makeMap('pre,textarea', true);
  var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
    return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
  };

  function decodeAttr(value, shouldDecodeNewlines) {
    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
    return value.replace(re, function (match) {
      return decodingMap[match];
    });
  }

  function parseHTML(html, options) {
    var stack = [];
    var expectHTML = options.expectHTML;
    var isUnaryTag$$1 = options.isUnaryTag || no;
    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
    var index = 0;
    var last, lastTag;
    while (html) {
      last = html;
      // Make sure we're not in a plaintext content element like script/style
      if (!lastTag || !isPlainTextElement(lastTag)) {
        var textEnd = html.indexOf('<');
        if (textEnd === 0) {
          // Comment:
          if (comment.test(html)) {
            var commentEnd = html.indexOf('-->');

            if (commentEnd >= 0) {
              if (options.shouldKeepComment) {
                options.comment(html.substring(4, commentEnd));
              }
              advance(commentEnd + 3);
              continue;
            }
          }

          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
          if (conditionalComment.test(html)) {
            var conditionalEnd = html.indexOf(']>');

            if (conditionalEnd >= 0) {
              advance(conditionalEnd + 2);
              continue;
            }
          }

          // Doctype:
          var doctypeMatch = html.match(doctype);
          if (doctypeMatch) {
            advance(doctypeMatch[0].length);
            continue;
          }

          // End tag:
          var endTagMatch = html.match(endTag);
          if (endTagMatch) {
            var curIndex = index;
            advance(endTagMatch[0].length);
            parseEndTag(endTagMatch[1], curIndex, index);
            continue;
          }

          // Start tag:
          var startTagMatch = parseStartTag();
          if (startTagMatch) {
            handleStartTag(startTagMatch);
            if (shouldIgnoreFirstNewline(lastTag, html)) {
              advance(1);
            }
            continue;
          }
        }

        var text = void 0,
            rest = void 0,
            next = void 0;
        if (textEnd >= 0) {
          rest = html.slice(textEnd);
          while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
            // < in plain text, be forgiving and treat it as text
            next = rest.indexOf('<', 1);
            if (next < 0) {
              break;
            }
            textEnd += next;
            rest = html.slice(textEnd);
          }
          text = html.substring(0, textEnd);
          advance(textEnd);
        }

        if (textEnd < 0) {
          text = html;
          html = '';
        }

        if (options.chars && text) {
          options.chars(text);
        }
      } else {
        var endTagLength = 0;
        var stackedTag = lastTag.toLowerCase();
        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
        var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
          endTagLength = endTag.length;
          if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
            text = text.replace(/<!--([\s\S]*?)-->/g, '$1').replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
          }
          if (shouldIgnoreFirstNewline(stackedTag, text)) {
            text = text.slice(1);
          }
          if (options.chars) {
            options.chars(text);
          }
          return '';
        });
        index += html.length - rest$1.length;
        html = rest$1;
        parseEndTag(stackedTag, index - endTagLength, index);
      }

      if (html === last) {
        options.chars && options.chars(html);
        if ("development" !== 'production' && !stack.length && options.warn) {
          options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
        }
        break;
      }
    }

    // Clean up any remaining tags
    parseEndTag();

    function advance(n) {
      index += n;
      html = html.substring(n);
    }

    function parseStartTag() {
      var start = html.match(startTagOpen);
      if (start) {
        var match = {
          tagName: start[1],
          attrs: [],
          start: index
        };
        advance(start[0].length);
        var end, attr;
        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
          advance(attr[0].length);
          match.attrs.push(attr);
        }
        if (end) {
          match.unarySlash = end[1];
          advance(end[0].length);
          match.end = index;
          return match;
        }
      }
    }

    function handleStartTag(match) {
      var tagName = match.tagName;
      var unarySlash = match.unarySlash;

      if (expectHTML) {
        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
          parseEndTag(lastTag);
        }
        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
          parseEndTag(tagName);
        }
      }

      var unary = isUnaryTag$$1(tagName) || !!unarySlash;

      var l = match.attrs.length;
      var attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        var args = match.attrs[i];
        // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
        if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
          if (args[3] === '') {
            delete args[3];
          }
          if (args[4] === '') {
            delete args[4];
          }
          if (args[5] === '') {
            delete args[5];
          }
        }
        var value = args[3] || args[4] || args[5] || '';
        attrs[i] = {
          name: args[1],
          value: decodeAttr(value, options.shouldDecodeNewlines)
        };
      }

      if (!unary) {
        stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
        lastTag = tagName;
      }

      if (options.start) {
        options.start(tagName, attrs, unary, match.start, match.end);
      }
    }

    function parseEndTag(tagName, start, end) {
      var pos, lowerCasedTagName;
      if (start == null) {
        start = index;
      }
      if (end == null) {
        end = index;
      }

      if (tagName) {
        lowerCasedTagName = tagName.toLowerCase();
      }

      // Find the closest opened tag of the same type
      if (tagName) {
        for (pos = stack.length - 1; pos >= 0; pos--) {
          if (stack[pos].lowerCasedTag === lowerCasedTagName) {
            break;
          }
        }
      } else {
        // If no tag name is provided, clean shop
        pos = 0;
      }

      if (pos >= 0) {
        // Close all the open elements, up the stack
        for (var i = stack.length - 1; i >= pos; i--) {
          if ("development" !== 'production' && (i > pos || !tagName) && options.warn) {
            options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
          }
          if (options.end) {
            options.end(stack[i].tag, start, end);
          }
        }

        // Remove the open elements from the stack
        stack.length = pos;
        lastTag = pos && stack[pos - 1].tag;
      } else if (lowerCasedTagName === 'br') {
        if (options.start) {
          options.start(tagName, [], true, start, end);
        }
      } else if (lowerCasedTagName === 'p') {
        if (options.start) {
          options.start(tagName, [], false, start, end);
        }
        if (options.end) {
          options.end(tagName, start, end);
        }
      }
    }
  }

  /*  */

  var onRE = /^@|^v-on:/;
  var dirRE = /^v-|^@|^:/;
  var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
  var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

  var argRE = /:(.*)$/;
  var bindRE = /^:|^v-bind:/;
  var modifierRE = /\.[^.]+/g;

  var decodeHTMLCached = cached(he.decode);

  // configurable state
  var warn$2;
  var delimiters;
  var transforms;
  var preTransforms;
  var postTransforms;
  var platformIsPreTag;
  var platformMustUseProp;
  var platformGetTagNamespace;

  /**
   * Convert HTML string to AST.
   */
  function parse(template, options) {
    warn$2 = options.warn || baseWarn;

    platformIsPreTag = options.isPreTag || no;
    platformMustUseProp = options.mustUseProp || no;
    platformGetTagNamespace = options.getTagNamespace || no;

    transforms = pluckModuleFunction(options.modules, 'transformNode');
    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

    delimiters = options.delimiters;

    var stack = [];
    var preserveWhitespace = options.preserveWhitespace !== false;
    var root;
    var currentParent;
    var inVPre = false;
    var inPre = false;
    var warned = false;

    function warnOnce(msg) {
      if (!warned) {
        warned = true;
        warn$2(msg);
      }
    }

    function endPre(element) {
      // check pre state
      if (element.pre) {
        inVPre = false;
      }
      if (platformIsPreTag(element.tag)) {
        inPre = false;
      }
    }

    parseHTML(template, {
      warn: warn$2,
      expectHTML: options.expectHTML,
      isUnaryTag: options.isUnaryTag,
      canBeLeftOpenTag: options.canBeLeftOpenTag,
      shouldDecodeNewlines: options.shouldDecodeNewlines,
      shouldKeepComment: options.comments,
      start: function start(tag, attrs, unary) {
        // check namespace.
        // inherit parent ns if there is one
        var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);

        // handle IE svg bug
        /* istanbul ignore if */
        if (isIE && ns === 'svg') {
          attrs = guardIESVGBug(attrs);
        }

        var element = {
          type: 1,
          tag: tag,
          attrsList: attrs,
          attrsMap: makeAttrsMap(attrs),
          parent: currentParent,
          children: []
        };
        if (ns) {
          element.ns = ns;
        }

        if (isForbiddenTag(element) && !isServerRendering()) {
          element.forbidden = true;
          "development" !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
        }

        // apply pre-transforms
        for (var i = 0; i < preTransforms.length; i++) {
          preTransforms[i](element, options);
        }

        if (!inVPre) {
          processPre(element);
          if (element.pre) {
            inVPre = true;
          }
        }
        if (platformIsPreTag(element.tag)) {
          inPre = true;
        }
        if (inVPre) {
          processRawAttrs(element);
        } else {
          processFor(element);
          processIf(element);
          processOnce(element);
          processKey(element);

          // determine whether this is a plain element after
          // removing structural attributes
          element.plain = !element.key && !attrs.length;

          processRef(element);
          processSlot(element);
          processComponent(element);
          for (var i$1 = 0; i$1 < transforms.length; i$1++) {
            transforms[i$1](element, options);
          }
          processAttrs(element);
        }

        function checkRootConstraints(el) {
          {
            if (el.tag === 'slot' || el.tag === 'template') {
              warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
            }
            if (el.attrsMap.hasOwnProperty('v-for')) {
              warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
            }
          }
        }

        // tree management
        if (!root) {
          root = element;
          checkRootConstraints(root);
        } else if (!stack.length) {
          // allow root elements with v-if, v-else-if and v-else
          if (root.if && (element.elseif || element.else)) {
            checkRootConstraints(element);
            addIfCondition(root, {
              exp: element.elseif,
              block: element
            });
          } else {
            warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
          }
        }
        if (currentParent && !element.forbidden) {
          if (element.elseif || element.else) {
            processIfConditions(element, currentParent);
          } else if (element.slotScope) {
            // scoped slot
            currentParent.plain = false;
            var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
          } else {
            currentParent.children.push(element);
            element.parent = currentParent;
          }
        }
        if (!unary) {
          currentParent = element;
          stack.push(element);
        } else {
          endPre(element);
        }
        // apply post-transforms
        for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
          postTransforms[i$2](element, options);
        }
      },

      end: function end() {
        // remove trailing whitespace
        var element = stack[stack.length - 1];
        var lastNode = element.children[element.children.length - 1];
        if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
          element.children.pop();
        }
        // pop stack
        stack.length -= 1;
        currentParent = stack[stack.length - 1];
        endPre(element);
      },

      chars: function chars(text) {
        if (!currentParent) {
          {
            if (text === template) {
              warnOnce('Component template requires a root element, rather than just text.');
            } else if (text = text.trim()) {
              warnOnce("text \"" + text + "\" outside root element will be ignored.");
            }
          }
          return;
        }
        // IE textarea placeholder bug
        /* istanbul ignore if */
        if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
          return;
        }
        var children = currentParent.children;
        text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : '';
        if (text) {
          var expression;
          if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
            children.push({
              type: 2,
              expression: expression,
              text: text
            });
          } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
            children.push({
              type: 3,
              text: text
            });
          }
        }
      },
      comment: function comment(text) {
        currentParent.children.push({
          type: 3,
          text: text,
          isComment: true
        });
      }
    });
    return root;
  }

  function processPre(el) {
    if (getAndRemoveAttr(el, 'v-pre') != null) {
      el.pre = true;
    }
  }

  function processRawAttrs(el) {
    var l = el.attrsList.length;
    if (l) {
      var attrs = el.attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        attrs[i] = {
          name: el.attrsList[i].name,
          value: JSON.stringify(el.attrsList[i].value)
        };
      }
    } else if (!el.pre) {
      // non root node in pre blocks with no attributes
      el.plain = true;
    }
  }

  function processKey(el) {
    var exp = getBindingAttr(el, 'key');
    if (exp) {
      if ("development" !== 'production' && el.tag === 'template') {
        warn$2("<template> cannot be keyed. Place the key on real elements instead.");
      }
      el.key = exp;
    }
  }

  function processRef(el) {
    var ref = getBindingAttr(el, 'ref');
    if (ref) {
      el.ref = ref;
      el.refInFor = checkInFor(el);
    }
  }

  function processFor(el) {
    var exp;
    if (exp = getAndRemoveAttr(el, 'v-for')) {
      var inMatch = exp.match(forAliasRE);
      if (!inMatch) {
        "development" !== 'production' && warn$2("Invalid v-for expression: " + exp);
        return;
      }
      el.for = inMatch[2].trim();
      var alias = inMatch[1].trim();
      var iteratorMatch = alias.match(forIteratorRE);
      if (iteratorMatch) {
        el.alias = iteratorMatch[1].trim();
        el.iterator1 = iteratorMatch[2].trim();
        if (iteratorMatch[3]) {
          el.iterator2 = iteratorMatch[3].trim();
        }
      } else {
        el.alias = alias;
      }
    }
  }

  function processIf(el) {
    var exp = getAndRemoveAttr(el, 'v-if');
    if (exp) {
      el.if = exp;
      addIfCondition(el, {
        exp: exp,
        block: el
      });
    } else {
      if (getAndRemoveAttr(el, 'v-else') != null) {
        el.else = true;
      }
      var elseif = getAndRemoveAttr(el, 'v-else-if');
      if (elseif) {
        el.elseif = elseif;
      }
    }
  }

  function processIfConditions(el, parent) {
    var prev = findPrevElement(parent.children);
    if (prev && prev.if) {
      addIfCondition(prev, {
        exp: el.elseif,
        block: el
      });
    } else {
      warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
    }
  }

  function findPrevElement(children) {
    var i = children.length;
    while (i--) {
      if (children[i].type === 1) {
        return children[i];
      } else {
        if ("development" !== 'production' && children[i].text !== ' ') {
          warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
        }
        children.pop();
      }
    }
  }

  function addIfCondition(el, condition) {
    if (!el.ifConditions) {
      el.ifConditions = [];
    }
    el.ifConditions.push(condition);
  }

  function processOnce(el) {
    var once$$1 = getAndRemoveAttr(el, 'v-once');
    if (once$$1 != null) {
      el.once = true;
    }
  }

  function processSlot(el) {
    if (el.tag === 'slot') {
      el.slotName = getBindingAttr(el, 'name');
      if ("development" !== 'production' && el.key) {
        warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
      }
    } else {
      var slotTarget = getBindingAttr(el, 'slot');
      if (slotTarget) {
        el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
      }
      if (el.tag === 'template') {
        el.slotScope = getAndRemoveAttr(el, 'scope');
      }
    }
  }

  function processComponent(el) {
    var binding;
    if (binding = getBindingAttr(el, 'is')) {
      el.component = binding;
    }
    if (getAndRemoveAttr(el, 'inline-template') != null) {
      el.inlineTemplate = true;
    }
  }

  function processAttrs(el) {
    var list = el.attrsList;
    var i, l, name, rawName, value, modifiers, isProp;
    for (i = 0, l = list.length; i < l; i++) {
      name = rawName = list[i].name;
      value = list[i].value;
      if (dirRE.test(name)) {
        // mark element as dynamic
        el.hasBindings = true;
        // modifiers
        modifiers = parseModifiers(name);
        if (modifiers) {
          name = name.replace(modifierRE, '');
        }
        if (bindRE.test(name)) {
          // v-bind
          name = name.replace(bindRE, '');
          value = parseFilters(value);
          isProp = false;
          if (modifiers) {
            if (modifiers.prop) {
              isProp = true;
              name = camelize(name);
              if (name === 'innerHtml') {
                name = 'innerHTML';
              }
            }
            if (modifiers.camel) {
              name = camelize(name);
            }
            if (modifiers.sync) {
              addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
            }
          }
          if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
            addProp(el, name, value);
          } else {
            addAttr(el, name, value);
          }
        } else if (onRE.test(name)) {
          // v-on
          name = name.replace(onRE, '');
          addHandler(el, name, value, modifiers, false, warn$2);
        } else {
          // normal directives
          name = name.replace(dirRE, '');
          // parse arg
          var argMatch = name.match(argRE);
          var arg = argMatch && argMatch[1];
          if (arg) {
            name = name.slice(0, -(arg.length + 1));
          }
          addDirective(el, name, rawName, value, arg, modifiers);
          if ("development" !== 'production' && name === 'model') {
            checkForAliasModel(el, value);
          }
        }
      } else {
        // literal attribute
        {
          var expression = parseText(value, delimiters);
          if (expression) {
            warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
          }
        }
        addAttr(el, name, JSON.stringify(value));
      }
    }
  }

  function checkInFor(el) {
    var parent = el;
    while (parent) {
      if (parent.for !== undefined) {
        return true;
      }
      parent = parent.parent;
    }
    return false;
  }

  function parseModifiers(name) {
    var match = name.match(modifierRE);
    if (match) {
      var ret = {};
      match.forEach(function (m) {
        ret[m.slice(1)] = true;
      });
      return ret;
    }
  }

  function makeAttrsMap(attrs) {
    var map = {};
    for (var i = 0, l = attrs.length; i < l; i++) {
      if ("development" !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {
        warn$2('duplicate attribute: ' + attrs[i].name);
      }
      map[attrs[i].name] = attrs[i].value;
    }
    return map;
  }

  // for script (e.g. type="x/template") or style, do not decode content
  function isTextTag(el) {
    return el.tag === 'script' || el.tag === 'style';
  }

  function isForbiddenTag(el) {
    return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
  }

  var ieNSBug = /^xmlns:NS\d+/;
  var ieNSPrefix = /^NS\d+:/;

  /* istanbul ignore next */
  function guardIESVGBug(attrs) {
    var res = [];
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      if (!ieNSBug.test(attr.name)) {
        attr.name = attr.name.replace(ieNSPrefix, '');
        res.push(attr);
      }
    }
    return res;
  }

  function checkForAliasModel(el, value) {
    var _el = el;
    while (_el) {
      if (_el.for && _el.alias === value) {
        warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
      }
      _el = _el.parent;
    }
  }

  /*  */

  var isStaticKey;
  var isPlatformReservedTag;

  var genStaticKeysCached = cached(genStaticKeys$1);

  /**
   * Goal of the optimizer: walk the generated template AST tree
   * and detect sub-trees that are purely static, i.e. parts of
   * the DOM that never needs to change.
   *
   * Once we detect these sub-trees, we can:
   *
   * 1. Hoist them into constants, so that we no longer need to
   *    create fresh nodes for them on each re-render;
   * 2. Completely skip them in the patching process.
   */
  function optimize(root, options) {
    if (!root) {
      return;
    }
    isStaticKey = genStaticKeysCached(options.staticKeys || '');
    isPlatformReservedTag = options.isReservedTag || no;
    // first pass: mark all non-static nodes.
    markStatic$1(root);
    // second pass: mark static roots.
    markStaticRoots(root, false);
  }

  function genStaticKeys$1(keys) {
    return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
  }

  function markStatic$1(node) {
    node.static = isStatic(node);
    if (node.type === 1) {
      // do not make component slot content static. this avoids
      // 1. components not able to mutate slot nodes
      // 2. static slot content fails for hot-reloading
      if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
        return;
      }
      for (var i = 0, l = node.children.length; i < l; i++) {
        var child = node.children[i];
        markStatic$1(child);
        if (!child.static) {
          node.static = false;
        }
      }
      if (node.ifConditions) {
        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
          var block = node.ifConditions[i$1].block;
          markStatic$1(block);
          if (!block.static) {
            node.static = false;
          }
        }
      }
    }
  }

  function markStaticRoots(node, isInFor) {
    if (node.type === 1) {
      if (node.static || node.once) {
        node.staticInFor = isInFor;
      }
      // For a node to qualify as a static root, it should have children that
      // are not just static text. Otherwise the cost of hoisting out will
      // outweigh the benefits and it's better off to just always render it fresh.
      if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
        node.staticRoot = true;
        return;
      } else {
        node.staticRoot = false;
      }
      if (node.children) {
        for (var i = 0, l = node.children.length; i < l; i++) {
          markStaticRoots(node.children[i], isInFor || !!node.for);
        }
      }
      if (node.ifConditions) {
        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
          markStaticRoots(node.ifConditions[i$1].block, isInFor);
        }
      }
    }
  }

  function isStatic(node) {
    if (node.type === 2) {
      // expression
      return false;
    }
    if (node.type === 3) {
      // text
      return true;
    }
    return !!(node.pre || !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
  }

  function isDirectChildOfTemplateFor(node) {
    while (node.parent) {
      node = node.parent;
      if (node.tag !== 'template') {
        return false;
      }
      if (node.for) {
        return true;
      }
    }
    return false;
  }

  /*  */

  var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
  var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

  // keyCode aliases
  var keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    up: 38,
    left: 37,
    right: 39,
    down: 40,
    'delete': [8, 46]
  };

  // #4868: modifiers that prevent the execution of the listener
  // need to explicitly return null so that we can determine whether to remove
  // the listener for .once
  var genGuard = function genGuard(condition) {
    return "if(" + condition + ")return null;";
  };

  var modifierCode = {
    stop: '$event.stopPropagation();',
    prevent: '$event.preventDefault();',
    self: genGuard("$event.target !== $event.currentTarget"),
    ctrl: genGuard("!$event.ctrlKey"),
    shift: genGuard("!$event.shiftKey"),
    alt: genGuard("!$event.altKey"),
    meta: genGuard("!$event.metaKey"),
    left: genGuard("'button' in $event && $event.button !== 0"),
    middle: genGuard("'button' in $event && $event.button !== 1"),
    right: genGuard("'button' in $event && $event.button !== 2")
  };

  function genHandlers(events, isNative, warn) {
    var res = isNative ? 'nativeOn:{' : 'on:{';
    for (var name in events) {
      var handler = events[name];
      // #5330: warn click.right, since right clicks do not actually fire click events.
      if ("development" !== 'production' && name === 'click' && handler && handler.modifiers && handler.modifiers.right) {
        warn("Use \"contextmenu\" instead of \"click.right\" since right clicks " + "do not actually fire \"click\" events.");
      }
      res += "\"" + name + "\":" + genHandler(name, handler) + ",";
    }
    return res.slice(0, -1) + '}';
  }

  function genHandler(name, handler) {
    if (!handler) {
      return 'function(){}';
    }

    if (Array.isArray(handler)) {
      return "[" + handler.map(function (handler) {
        return genHandler(name, handler);
      }).join(',') + "]";
    }

    var isMethodPath = simplePathRE.test(handler.value);
    var isFunctionExpression = fnExpRE.test(handler.value);

    if (!handler.modifiers) {
      return isMethodPath || isFunctionExpression ? handler.value : "function($event){" + handler.value + "}"; // inline statement
    } else {
      var code = '';
      var genModifierCode = '';
      var keys = [];
      for (var key in handler.modifiers) {
        if (modifierCode[key]) {
          genModifierCode += modifierCode[key];
          // left/right
          if (keyCodes[key]) {
            keys.push(key);
          }
        } else {
          keys.push(key);
        }
      }
      if (keys.length) {
        code += genKeyFilter(keys);
      }
      // Make sure modifiers like prevent and stop get executed after key filtering
      if (genModifierCode) {
        code += genModifierCode;
      }
      var handlerCode = isMethodPath ? handler.value + '($event)' : isFunctionExpression ? "(" + handler.value + ")($event)" : handler.value;
      return "function($event){" + code + handlerCode + "}";
    }
  }

  function genKeyFilter(keys) {
    return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
  }

  function genFilterCode(key) {
    var keyVal = parseInt(key, 10);
    if (keyVal) {
      return "$event.keyCode!==" + keyVal;
    }
    var alias = keyCodes[key];
    return "_k($event.keyCode," + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + ")";
  }

  /*  */

  function on(el, dir) {
    if ("development" !== 'production' && dir.modifiers) {
      warn("v-on without argument does not support modifiers.");
    }
    el.wrapListeners = function (code) {
      return "_g(" + code + "," + dir.value + ")";
    };
  }

  /*  */

  function bind$1(el, dir) {
    el.wrapData = function (code) {
      return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
    };
  }

  /*  */

  var baseDirectives = {
    on: on,
    bind: bind$1,
    cloak: noop
  };

  /*  */

  var CodegenState = function CodegenState(options) {
    this.options = options;
    this.warn = options.warn || baseWarn;
    this.transforms = pluckModuleFunction(options.modules, 'transformCode');
    this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
    this.directives = extend(extend({}, baseDirectives), options.directives);
    var isReservedTag = options.isReservedTag || no;
    this.maybeComponent = function (el) {
      return !isReservedTag(el.tag);
    };
    this.onceId = 0;
    this.staticRenderFns = [];
  };

  function generate(ast, options) {
    var state = new CodegenState(options);
    var code = ast ? genElement(ast, state) : '_c("div")';
    return {
      render: "with(this){return " + code + "}",
      staticRenderFns: state.staticRenderFns
    };
  }

  function genElement(el, state) {
    if (el.staticRoot && !el.staticProcessed) {
      return genStatic(el, state);
    } else if (el.once && !el.onceProcessed) {
      return genOnce(el, state);
    } else if (el.for && !el.forProcessed) {
      return genFor(el, state);
    } else if (el.if && !el.ifProcessed) {
      return genIf(el, state);
    } else if (el.tag === 'template' && !el.slotTarget) {
      return genChildren(el, state) || 'void 0';
    } else if (el.tag === 'slot') {
      return genSlot(el, state);
    } else {
      // component or element
      var code;
      if (el.component) {
        code = genComponent(el.component, el, state);
      } else {
        var data = el.plain ? undefined : genData$2(el, state);

        var children = el.inlineTemplate ? null : genChildren(el, state, true);
        code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
      }
      // module transforms
      for (var i = 0; i < state.transforms.length; i++) {
        code = state.transforms[i](el, code);
      }
      return code;
    }
  }

  // hoist static sub-trees out
  function genStatic(el, state) {
    el.staticProcessed = true;
    state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
    return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
  }

  // v-once
  function genOnce(el, state) {
    el.onceProcessed = true;
    if (el.if && !el.ifProcessed) {
      return genIf(el, state);
    } else if (el.staticInFor) {
      var key = '';
      var parent = el.parent;
      while (parent) {
        if (parent.for) {
          key = parent.key;
          break;
        }
        parent = parent.parent;
      }
      if (!key) {
        "development" !== 'production' && state.warn("v-once can only be used inside v-for that is keyed. ");
        return genElement(el, state);
      }
      return "_o(" + genElement(el, state) + "," + state.onceId++ + (key ? "," + key : "") + ")";
    } else {
      return genStatic(el, state);
    }
  }

  function genIf(el, state, altGen, altEmpty) {
    el.ifProcessed = true; // avoid recursion
    return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
  }

  function genIfConditions(conditions, state, altGen, altEmpty) {
    if (!conditions.length) {
      return altEmpty || '_e()';
    }

    var condition = conditions.shift();
    if (condition.exp) {
      return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
    } else {
      return "" + genTernaryExp(condition.block);
    }

    // v-if with v-once should generate code like (a)?_m(0):_m(1)
    function genTernaryExp(el) {
      return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
    }
  }

  function genFor(el, state, altGen, altHelper) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
    var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

    if ("development" !== 'production' && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
      state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true /* tip */
      );
    }

    el.forProcessed = true; // avoid recursion
    return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
  }

  function genData$2(el, state) {
    var data = '{';

    // directives first.
    // directives may mutate the el's other properties before they are generated.
    var dirs = genDirectives(el, state);
    if (dirs) {
      data += dirs + ',';
    }

    // key
    if (el.key) {
      data += "key:" + el.key + ",";
    }
    // ref
    if (el.ref) {
      data += "ref:" + el.ref + ",";
    }
    if (el.refInFor) {
      data += "refInFor:true,";
    }
    // pre
    if (el.pre) {
      data += "pre:true,";
    }
    // record original tag name for components using "is" attribute
    if (el.component) {
      data += "tag:\"" + el.tag + "\",";
    }
    // module data generation functions
    for (var i = 0; i < state.dataGenFns.length; i++) {
      data += state.dataGenFns[i](el);
    }
    // attributes
    if (el.attrs) {
      data += "attrs:{" + genProps(el.attrs) + "},";
    }
    // DOM props
    if (el.props) {
      data += "domProps:{" + genProps(el.props) + "},";
    }
    // event handlers
    if (el.events) {
      data += genHandlers(el.events, false, state.warn) + ",";
    }
    if (el.nativeEvents) {
      data += genHandlers(el.nativeEvents, true, state.warn) + ",";
    }
    // slot target
    if (el.slotTarget) {
      data += "slot:" + el.slotTarget + ",";
    }
    // scoped slots
    if (el.scopedSlots) {
      data += genScopedSlots(el.scopedSlots, state) + ",";
    }
    // component v-model
    if (el.model) {
      data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
    }
    // inline-template
    if (el.inlineTemplate) {
      var inlineTemplate = genInlineTemplate(el, state);
      if (inlineTemplate) {
        data += inlineTemplate + ",";
      }
    }
    data = data.replace(/,$/, '') + '}';
    // v-bind data wrap
    if (el.wrapData) {
      data = el.wrapData(data);
    }
    // v-on data wrap
    if (el.wrapListeners) {
      data = el.wrapListeners(data);
    }
    return data;
  }

  function genDirectives(el, state) {
    var dirs = el.directives;
    if (!dirs) {
      return;
    }
    var res = 'directives:[';
    var hasRuntime = false;
    var i, l, dir, needRuntime;
    for (i = 0, l = dirs.length; i < l; i++) {
      dir = dirs[i];
      needRuntime = true;
      var gen = state.directives[dir.name];
      if (gen) {
        // compile-time directive that manipulates AST.
        // returns true if it also needs a runtime counterpart.
        needRuntime = !!gen(el, dir, state.warn);
      }
      if (needRuntime) {
        hasRuntime = true;
        res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
      }
    }
    if (hasRuntime) {
      return res.slice(0, -1) + ']';
    }
  }

  function genInlineTemplate(el, state) {
    var ast = el.children[0];
    if ("development" !== 'production' && (el.children.length > 1 || ast.type !== 1)) {
      state.warn('Inline-template components must have exactly one child element.');
    }
    if (ast.type === 1) {
      var inlineRenderFns = generate(ast, state.options);
      return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
        return "function(){" + code + "}";
      }).join(',') + "]}";
    }
  }

  function genScopedSlots(slots, state) {
    return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
      return genScopedSlot(key, slots[key], state);
    }).join(',') + "])";
  }

  function genScopedSlot(key, el, state) {
    if (el.for && !el.forProcessed) {
      return genForScopedSlot(key, el, state);
    }
    return "{key:" + key + ",fn:function(" + String(el.attrsMap.scope) + "){" + "return " + (el.tag === 'template' ? genChildren(el, state) || 'void 0' : genElement(el, state)) + "}}";
  }

  function genForScopedSlot(key, el, state) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
    var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
    el.forProcessed = true; // avoid recursion
    return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el, state) + '})';
  }

  function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
    var children = el.children;
    if (children.length) {
      var el$1 = children[0];
      // optimize single v-for
      if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
        return (altGenElement || genElement)(el$1, state);
      }
      var normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
      var gen = altGenNode || genNode;
      return "[" + children.map(function (c) {
        return gen(c, state);
      }).join(',') + "]" + (normalizationType ? "," + normalizationType : '');
    }
  }

  // determine the normalization needed for the children array.
  // 0: no normalization needed
  // 1: simple normalization needed (possible 1-level deep nested array)
  // 2: full normalization needed
  function getNormalizationType(children, maybeComponent) {
    var res = 0;
    for (var i = 0; i < children.length; i++) {
      var el = children[i];
      if (el.type !== 1) {
        continue;
      }
      if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
        return needsNormalization(c.block);
      })) {
        res = 2;
        break;
      }
      if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
        return maybeComponent(c.block);
      })) {
        res = 1;
      }
    }
    return res;
  }

  function needsNormalization(el) {
    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
  }

  function genNode(node, state) {
    if (node.type === 1) {
      return genElement(node, state);
    }if (node.type === 3 && node.isComment) {
      return genComment(node);
    } else {
      return genText(node);
    }
  }

  function genText(text) {
    return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
  }

  function genComment(comment) {
    return "_e(" + JSON.stringify(comment.text) + ")";
  }

  function genSlot(el, state) {
    var slotName = el.slotName || '"default"';
    var children = genChildren(el, state);
    var res = "_t(" + slotName + (children ? "," + children : '');
    var attrs = el.attrs && "{" + el.attrs.map(function (a) {
      return camelize(a.name) + ":" + a.value;
    }).join(',') + "}";
    var bind$$1 = el.attrsMap['v-bind'];
    if ((attrs || bind$$1) && !children) {
      res += ",null";
    }
    if (attrs) {
      res += "," + attrs;
    }
    if (bind$$1) {
      res += (attrs ? '' : ',null') + "," + bind$$1;
    }
    return res + ')';
  }

  // componentName is el.component, take it as argument to shun flow's pessimistic refinement
  function genComponent(componentName, el, state) {
    var children = el.inlineTemplate ? null : genChildren(el, state, true);
    return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
  }

  function genProps(props) {
    var res = '';
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
    }
    return res.slice(0, -1);
  }

  // #3895, #4268
  function transformSpecialNewlines(text) {
    return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
  }

  /*  */

  // these keywords should not appear inside expressions, but operators like
  // typeof, instanceof and in are allowed
  var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b');

  // these unary operators should not be used as property/method names
  var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

  // check valid identifier for v-for
  var identRE = /[A-Za-z_$][\w$]*/;

  // strip strings in expressions
  var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

  // detect problematic expressions in a template
  function detectErrors(ast) {
    var errors = [];
    if (ast) {
      checkNode(ast, errors);
    }
    return errors;
  }

  function checkNode(node, errors) {
    if (node.type === 1) {
      for (var name in node.attrsMap) {
        if (dirRE.test(name)) {
          var value = node.attrsMap[name];
          if (value) {
            if (name === 'v-for') {
              checkFor(node, "v-for=\"" + value + "\"", errors);
            } else if (onRE.test(name)) {
              checkEvent(value, name + "=\"" + value + "\"", errors);
            } else {
              checkExpression(value, name + "=\"" + value + "\"", errors);
            }
          }
        }
      }
      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          checkNode(node.children[i], errors);
        }
      }
    } else if (node.type === 2) {
      checkExpression(node.expression, node.text, errors);
    }
  }

  function checkEvent(exp, text, errors) {
    var stipped = exp.replace(stripStringRE, '');
    var keywordMatch = stipped.match(unaryOperatorsRE);
    if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
      errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
    }
    checkExpression(exp, text, errors);
  }

  function checkFor(node, text, errors) {
    checkExpression(node.for || '', text, errors);
    checkIdentifier(node.alias, 'v-for alias', text, errors);
    checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
    checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
  }

  function checkIdentifier(ident, type, text, errors) {
    if (typeof ident === 'string' && !identRE.test(ident)) {
      errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
    }
  }

  function checkExpression(exp, text, errors) {
    try {
      new Function("return " + exp);
    } catch (e) {
      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
      if (keywordMatch) {
        errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
      } else {
        errors.push("invalid expression: " + text.trim());
      }
    }
  }

  /*  */

  function createFunction(code, errors) {
    try {
      return new Function(code);
    } catch (err) {
      errors.push({ err: err, code: code });
      return noop;
    }
  }

  function createCompileToFunctionFn(compile) {
    var cache = Object.create(null);

    return function compileToFunctions(template, options, vm) {
      options = options || {};

      /* istanbul ignore if */
      {
        // detect possible CSP restriction
        try {
          new Function('return 1');
        } catch (e) {
          if (e.toString().match(/unsafe-eval|CSP/)) {
            warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
          }
        }
      }

      // check cache
      var key = options.delimiters ? String(options.delimiters) + template : template;
      if (cache[key]) {
        return cache[key];
      }

      // compile
      var compiled = compile(template, options);

      // check compilation errors/tips
      {
        if (compiled.errors && compiled.errors.length) {
          warn("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
        if (compiled.tips && compiled.tips.length) {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }

      // turn code into functions
      var res = {};
      var fnGenErrors = [];
      res.render = createFunction(compiled.render, fnGenErrors);
      res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
        return createFunction(code, fnGenErrors);
      });

      // check function generation errors.
      // this should only happen if there is a bug in the compiler itself.
      // mostly for codegen development use
      /* istanbul ignore if */
      {
        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
          warn("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return err.toString() + " in\n\n" + code + "\n";
          }).join('\n'), vm);
        }
      }

      return cache[key] = res;
    };
  }

  /*  */

  function createCompilerCreator(baseCompile) {
    return function createCompiler(baseOptions) {
      function compile(template, options) {
        var finalOptions = Object.create(baseOptions);
        var errors = [];
        var tips = [];
        finalOptions.warn = function (msg, tip) {
          (tip ? tips : errors).push(msg);
        };

        if (options) {
          // merge custom modules
          if (options.modules) {
            finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
          }
          // merge custom directives
          if (options.directives) {
            finalOptions.directives = extend(Object.create(baseOptions.directives), options.directives);
          }
          // copy other options
          for (var key in options) {
            if (key !== 'modules' && key !== 'directives') {
              finalOptions[key] = options[key];
            }
          }
        }

        var compiled = baseCompile(template, finalOptions);
        {
          errors.push.apply(errors, detectErrors(compiled.ast));
        }
        compiled.errors = errors;
        compiled.tips = tips;
        return compiled;
      }

      return {
        compile: compile,
        compileToFunctions: createCompileToFunctionFn(compile)
      };
    };
  }

  /*  */

  // `createCompilerCreator` allows creating compilers that use alternative
  // parser/optimizer/codegen, e.g the SSR optimizing compiler.
  // Here we just export a default compiler using the default parts.
  var createCompiler = createCompilerCreator(function baseCompile(template, options) {
    var ast = parse(template.trim(), options);
    optimize(ast, options);
    var code = generate(ast, options);
    return {
      ast: ast,
      render: code.render,
      staticRenderFns: code.staticRenderFns
    };
  });

  /*  */

  var ref$1 = createCompiler(baseOptions);
  var compileToFunctions = ref$1.compileToFunctions;

  /*  */

  var idToTemplate = cached(function (id) {
    var el = query(id);
    return el && el.innerHTML;
  });

  var mount = Vue$3.prototype.$mount;
  Vue$3.prototype.$mount = function (el, hydrating) {
    el = el && query(el);

    /* istanbul ignore if */
    if (el === document.body || el === document.documentElement) {
      "development" !== 'production' && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
      return this;
    }

    var options = this.$options;
    // resolve template/el and convert to render function
    if (!options.render) {
      var template = options.template;
      if (template) {
        if (typeof template === 'string') {
          if (template.charAt(0) === '#') {
            template = idToTemplate(template);
            /* istanbul ignore if */
            if ("development" !== 'production' && !template) {
              warn("Template element not found or is empty: " + options.template, this);
            }
          }
        } else if (template.nodeType) {
          template = template.innerHTML;
        } else {
          {
            warn('invalid template option:' + template, this);
          }
          return this;
        }
      } else if (el) {
        template = getOuterHTML(el);
      }
      if (template) {
        /* istanbul ignore if */
        if ("development" !== 'production' && config.performance && mark) {
          mark('compile');
        }

        var ref = compileToFunctions(template, {
          shouldDecodeNewlines: shouldDecodeNewlines,
          delimiters: options.delimiters,
          comments: options.comments
        }, this);
        var render = ref.render;
        var staticRenderFns = ref.staticRenderFns;
        options.render = render;
        options.staticRenderFns = staticRenderFns;

        /* istanbul ignore if */
        if ("development" !== 'production' && config.performance && mark) {
          mark('compile end');
          measure(this._name + " compile", 'compile', 'compile end');
        }
      }
    }
    return mount.call(this, el, hydrating);
  };

  /**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   */
  function getOuterHTML(el) {
    if (el.outerHTML) {
      return el.outerHTML;
    } else {
      var container = document.createElement('div');
      container.appendChild(el.cloneNode(true));
      return container.innerHTML;
    }
  }

  Vue$3.compile = compileToFunctions;

  return Vue$3;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZ1ZS5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIlZ1ZSIsImlzVW5kZWYiLCJ2IiwidW5kZWZpbmVkIiwiaXNEZWYiLCJpc1RydWUiLCJpc0ZhbHNlIiwiaXNQcmltaXRpdmUiLCJ2YWx1ZSIsImlzT2JqZWN0Iiwib2JqIiwiX3RvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiY2FsbCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJuIiwicGFyc2VGbG9hdCIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsIlN0cmluZyIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsIm1hcCIsImNyZWF0ZSIsImxpc3QiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJrZXkiLCJjYWNoZWQiLCJmbiIsImNhY2hlIiwiY2FjaGVkRm4iLCJoaXQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwiXyIsImMiLCJ0b1VwcGVyQ2FzZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJzbGljZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiYmluZCIsImN0eCIsImJvdW5kRm4iLCJhIiwibCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsIkFycmF5IiwiZXh0ZW5kIiwidG8iLCJfZnJvbSIsInRvT2JqZWN0IiwicmVzIiwibm9vcCIsImIiLCJubyIsImlkZW50aXR5IiwiZ2VuU3RhdGljS2V5cyIsIm1vZHVsZXMiLCJyZWR1Y2UiLCJrZXlzIiwibSIsImNvbmNhdCIsInN0YXRpY0tleXMiLCJqb2luIiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheSIsImlzQXJyYXlCIiwiZXZlcnkiLCJlIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJjYWxsZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJfbGlmZWN5Y2xlSG9va3MiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwiZW51bWVyYWJsZSIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJwYXJzZVBhdGgiLCJwYXRoIiwidGVzdCIsInNlZ21lbnRzIiwid2FybiIsInRpcCIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiY29uc29sZSIsImNsYXNzaWZ5UkUiLCJjbGFzc2lmeSIsIm1zZyIsInZtIiwidHJhY2UiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZXJyb3IiLCJpbmNsdWRlRmlsZSIsIiRyb290IiwibmFtZSIsIm9wdGlvbnMiLCJfaXNWdWUiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwibWF0Y2giLCJyZXBlYXQiLCIkcGFyZW50IiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsImxhc3QiLCJjb25zdHJ1Y3RvciIsInB1c2giLCJoYW5kbGVFcnJvciIsImVyciIsImluZm8iLCJpbkJyb3dzZXIiLCJoYXNQcm90byIsIndpbmRvdyIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJpc0Nocm9tZSIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9pc1NlcnZlciIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJoYXNTeW1ib2wiLCJTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIm5leHRUaWNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsInRpbWVyRnVuYyIsIm5leHRUaWNrSGFuZGxlciIsImNvcGllcyIsIlByb21pc2UiLCJwIiwicmVzb2x2ZSIsImxvZ0Vycm9yIiwidGhlbiIsImNhdGNoIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJxdWV1ZU5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsInJlamVjdCIsIl9TZXQiLCJTZXQiLCJzZXQiLCJoYXMiLCJhZGQiLCJjbGVhciIsInVpZCIsIkRlcCIsImlkIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsInRhcmdldCIsImFkZERlcCIsIm5vdGlmeSIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsIl90YXJnZXQiLCJwb3BUYXJnZXQiLCJwb3AiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwibXV0YXRvciIsImFyZ3MiLCJsZW4iLCJyZXN1bHQiLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9ic2VydmVyU3RhdGUiLCJzaG91bGRDb252ZXJ0IiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwiYXVnbWVudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsImRlZmluZVJlYWN0aXZlJCQxIiwiaXRlbXMiLCJzcmMiLCJfX3Byb3RvX18iLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsInByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0dGVyIiwic2V0dGVyIiwiY2hpbGRPYiIsInJlYWN0aXZlR2V0dGVyIiwiZGVwZW5kQXJyYXkiLCJyZWFjdGl2ZVNldHRlciIsIm5ld1ZhbCIsIm1heCIsImRlbCIsInN0cmF0cyIsImVsIiwicHJvcHNEYXRhIiwicGFyZW50IiwiY2hpbGQiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZURhdGEiLCJmcm9tIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwibWVyZ2VkRGF0YUZuIiwibWVyZ2VkSW5zdGFuY2VEYXRhRm4iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImhvb2siLCJtZXJnZUFzc2V0cyIsInR5cGUiLCJwcm9wcyIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJjaGVja0NvbXBvbmVudHMiLCJjb21wb25lbnRzIiwibG93ZXIiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJtZXJnZU9wdGlvbnMiLCJleHRlbmRzRnJvbSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wIiwiYWJzZW50IiwiaXNUeXBlIiwiQm9vbGVhbiIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkQ29udmVydCIsImFzc2VydFByb3AiLCJkZWZhdWx0IiwiX3Byb3BzIiwiZ2V0VHlwZSIsInJlcXVpcmVkIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsInZhbGlkYXRvciIsInNpbXBsZUNoZWNrUkUiLCJtYXJrIiwibWVhc3VyZSIsInBlcmYiLCJjbGVhck1hcmtzIiwiY2xlYXJNZWFzdXJlcyIsInRhZyIsInN0YXJ0VGFnIiwiZW5kVGFnIiwiaW5pdFByb3h5IiwiYWxsb3dlZEdsb2JhbHMiLCJ3YXJuTm9uUHJlc2VudCIsImhhc1Byb3h5IiwiUHJveHkiLCJpc0J1aWx0SW5Nb2RpZmllciIsImhhc0hhbmRsZXIiLCJpc0FsbG93ZWQiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5IiwiVk5vZGUiLCJjaGlsZHJlbiIsInRleHQiLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZnVuY3Rpb25hbENvbnRleHQiLCJjb21wb25lbnRJbnN0YW5jZSIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJjbG9uZVZOb2RlcyIsInZub2RlcyIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImN1ciIsIm9sZCIsImV2ZW50IiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImF0dHJzIiwiYWx0S2V5Iiwia2V5SW5Mb3dlckNhc2UiLCJjaGVja1Byb3AiLCJoYXNoIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsIl9pc1ZMaXN0IiwiZW5zdXJlQ3RvciIsImNvbXAiLCJiYXNlIiwiX19lc01vZHVsZSIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJiYXNlQ3RvciIsImVycm9yQ29tcCIsInJlc29sdmVkIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwiY29udGV4dHMiLCJzeW5jIiwiZm9yY2VSZW5kZXIiLCIkZm9yY2VVcGRhdGUiLCJyZWFzb24iLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiaW5pdEV2ZW50cyIsIl9ldmVudHMiLCJfaGFzSG9va0V2ZW50IiwibGlzdGVuZXJzIiwiX3BhcmVudExpc3RlbmVycyIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsIiRvbmNlIiwiJG9uIiwicmVtb3ZlJDEiLCIkb2ZmIiwib2xkTGlzdGVuZXJzIiwiZXZlbnRzTWl4aW4iLCJob29rUkUiLCJ0aGlzJDEiLCJpJDEiLCJjYnMiLCIkZW1pdCIsImxvd2VyQ2FzZUV2ZW50IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJkZWZhdWx0U2xvdCIsInNsb3QiLCJpc1doaXRlc3BhY2UiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJhY3RpdmVJbnN0YW5jZSIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsImluaXRMaWZlY3ljbGUiLCJhYnN0cmFjdCIsIiRjaGlsZHJlbiIsIiRyZWZzIiwiX3dhdGNoZXIiLCJfaW5hY3RpdmUiLCJfZGlyZWN0SW5hY3RpdmUiLCJfaXNNb3VudGVkIiwiX2lzRGVzdHJveWVkIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJoeWRyYXRpbmciLCJjYWxsSG9vayIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsIl92bm9kZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9wYXJlbnRFbG0iLCJfcmVmRWxtIiwiX192dWVfXyIsIiR2bm9kZSIsIiRkZXN0cm95IiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsIm1vdW50Q29tcG9uZW50IiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJfbmFtZSIsIl91aWQiLCJfcmVuZGVyIiwiV2F0Y2hlciIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImhhc0NoaWxkcmVuIiwiX3JlbmRlckNoaWxkcmVuIiwic2NvcGVkU2xvdHMiLCIkc2NvcGVkU2xvdHMiLCJfcGFyZW50Vm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCIkc2xvdHMiLCJpc0luSW5hY3RpdmVUcmVlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImoiLCJNQVhfVVBEQVRFX0NPVU5UIiwicXVldWUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwicmVzZXRTY2hlZHVsZXJTdGF0ZSIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwic29ydCIsInJ1biIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJjYWxsVXBkYXRlZEhvb2tzIiwiZW1pdCIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiZGVlcCIsImxhenkiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwidHJhdmVyc2UiLCJjbGVhbnVwRGVwcyIsInRtcCIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJzZWVuT2JqZWN0cyIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJkZXBJZCIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwicHJveHlHZXR0ZXIiLCJwcm94eVNldHRlciIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJjaGVja09wdGlvblR5cGUiLCJvcHRpb24iLCJwcm9wc09wdGlvbnMiLCJpc1Jvb3QiLCJsb29wIiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwidXNlckRlZiIsImRlZmluZUNvbXB1dGVkIiwiJGRhdGEiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNvbXB1dGVkR2V0dGVyIiwiaGFuZGxlciIsImNyZWF0ZVdhdGNoZXIiLCJrZXlPckZuIiwiJHdhdGNoIiwic3RhdGVNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIm5ld0RhdGEiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVud2F0Y2hGbiIsImluaXRQcm92aWRlIiwiX3Byb3ZpZGVkIiwiaW5pdEluamVjdGlvbnMiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInNvdXJjZSIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJtZXJnZVByb3BzIiwiX2NvbnRleHQiLCJoIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJpbmplY3Rpb25zIiwiZnVuY3Rpb25hbE9wdGlvbnMiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaW5pdCIsInBhcmVudEVsbSIsInJlZkVsbSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCIkbW91bnQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwib2xkVm5vZGUiLCJpbnNlcnQiLCJkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiX2Jhc2UiLCJjaWQiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImZ1bmN0aW9uYWwiLCJuYXRpdmVPbiIsIm1lcmdlSG9va3MiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfaXNDb21wb25lbnQiLCJpbmxpbmVUZW1wbGF0ZSIsInN0YXRpY1JlbmRlckZucyIsImZyb21QYXJlbnQiLCJvdXJzIiwibWVyZ2VIb29rJDEiLCJvbmUiLCJ0d28iLCJjYWxsYmFjayIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJfY3JlYXRlRWxlbWVudCIsImlzIiwiYXBwbHlOUyIsInJlbmRlckxpc3QiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwic2xvdE5vZGVzIiwiX3JlbmRlcmVkIiwicmVzb2x2ZUZpbHRlciIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluQWxpYXMiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJkb21Qcm9wcyIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJtYXJrU3RhdGljIiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsImluaXRSZW5kZXIiLCJyZW5kZXJDb250ZXh0IiwiX2MiLCIkY3JlYXRlRWxlbWVudCIsInBhcmVudERhdGEiLCJyZW5kZXJNaXhpbiIsIiRuZXh0VGljayIsInJlZiIsInJlbmRlckVycm9yIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfdCIsIl9xIiwiX2kiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwidWlkJDEiLCJpbml0TWl4aW4iLCJfaW5pdCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0IiwiZXh0ZW5kZWQiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwiZGVkdXBlIiwiVnVlJDMiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsIm1peGluIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJWdWVDb21wb25lbnQiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwiQ29tcCIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJwYXR0ZXJuVHlwZXMiLCJSZWdFeHAiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwiY3VycmVudCIsImZpbHRlciIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJidWlsdEluQ29tcG9uZW50cyIsImluaXRHbG9iYWxBUEkiLCJjb25maWdEZWYiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJkZWxldGUiLCJzc3JDb250ZXh0IiwidmVyc2lvbiIsImFjY2VwdFZhbHVlIiwiYXR0ciIsImlzRW51bWVyYXRlZEF0dHIiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJpc0ZhbHN5QXR0clZhbHVlIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInJlbmRlckNsYXNzIiwic3RhdGljQ2xhc3MiLCJjbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsImlzUHJlVGFnIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwicXVlcnkiLCJzZWxlY3RlZCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVFbGVtZW50JDEiLCJ0YWdOYW1lIiwibXVsdGlwbGUiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50TlMiLCJuYW1lc3BhY2UiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50Iiwibm9kZU9wcyIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwiaG9va3MiLCJzYW1lVm5vZGUiLCJzYW1lSW5wdXRUeXBlIiwidHlwZUEiLCJ0eXBlQiIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwiYmFja2VuZCIsImVtcHR5Tm9kZUF0IiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicmVtb3ZlTm9kZSIsImluUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwibmVzdGVkIiwicHJlIiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJfc2NvcGVJZCIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJybSIsInVwZGF0ZUNoaWxkcmVuIiwib2xkQ2giLCJuZXdDaCIsInJlbW92ZU9ubHkiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsImVsbVRvTW92ZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiaHlkcmF0ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiYmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsInBhdGNoIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwib2xkRWxtIiwicGFyZW50RWxtJDEiLCJfbGVhdmVDYiIsInVwZGF0ZURpcmVjdGl2ZXMiLCJ1bmJpbmREaXJlY3RpdmVzIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGREaXIiLCJkaXIiLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwia2xhc3MiLCJ2YWxpZERpdmlzaW9uQ2hhclJFIiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInByZXYiLCJmaWx0ZXJzIiwidHJpbSIsInB1c2hGaWx0ZXIiLCJ3cmFwRmlsdGVyIiwiYmFzZVdhcm4iLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImFkZEF0dHIiLCJhZGREaXJlY3RpdmUiLCJhcmciLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwicHJldmVudCIsImV2ZW50cyIsIm5hdGl2ZSIsIm5hdGl2ZUV2ZW50cyIsIm5ld0hhbmRsZXIiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsImF0dHJzTWFwIiwiYXR0cnNMaXN0IiwiZ2VuQ29tcG9uZW50TW9kZWwiLCJudW1iZXIiLCJiYXNlVmFsdWVFeHByZXNzaW9uIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsImdlbkFzc2lnbm1lbnRDb2RlIiwibW9kZWxScyIsInBhcnNlTW9kZWwiLCJpZHgiLCJjaHIiLCJpbmRleCQxIiwiZXhwcmVzc2lvblBvcyIsImV4cHJlc3Npb25FbmRQb3MiLCJsYXN0SW5kZXhPZiIsImVvZiIsIm5leHQiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJzdWJzdHJpbmciLCJpbkJyYWNrZXQiLCJzdHJpbmdRdW90ZSIsIndhcm4kMSIsIlJBTkdFX1RPS0VOIiwiQ0hFQ0tCT1hfUkFESU9fVE9LRU4iLCJfd2FybiIsImR5bmFtaWNUeXBlIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJzZWxlY3RlZFZhbCIsImNvZGUiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsIm5vcm1hbGl6ZUV2ZW50cyIsInRhcmdldCQxIiwiYWRkJDEiLCJvbGRIYW5kbGVyIiwiZXYiLCJyZW1vdmUkMiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsImlzRGlydHkiLCJpc0lucHV0Q2hhbmdlZCIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiX3ZNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJsaXN0RGVsaW1pdGVyIiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJzdHlsZSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZ2V0U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiZGVmJCQxIiwiY3NzIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJzIiwiTnVtYmVyIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiY2FuY2VsbGVkIiwiX2VudGVyQ2IiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJjaGVja0R1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwbGF0Zm9ybU1vZHVsZXMiLCJpc1RleHRJbnB1dFR5cGUiLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwibW9kZWwkMSIsImJpbmRpbmciLCJzZXRTZWxlY3RlZCIsIl92T3B0aW9ucyIsImdldFZhbHVlIiwib25Db21wb3NpdGlvbkVuZCIsIm9uQ29tcG9zaXRpb25TdGFydCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJvIiwiaXNNdWx0aXBsZSIsInNlbGVjdGVkSW5kZXgiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJrZXkkMSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiaXNTYW1lQ2hpbGQiLCJvbGRDaGlsZCIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiVHJhbnNpdGlvbkdyb3VwIiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsImtlcHQiLCJyZW1vdmVkIiwiYyQxIiwicG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYmVmb3JlVXBkYXRlIiwidXBkYXRlZCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsImJvZHkiLCJmIiwib2Zmc2V0SGVpZ2h0IiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZSIsImNsb25lTm9kZSIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwicGxhdGZvcm1Db21wb25lbnRzIiwic2hvdWxkRGVjb2RlIiwiY29udGVudCIsImVuY29kZWQiLCJkaXYiLCJpbm5lckhUTUwiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsIm9wZW4iLCJjbG9zZSIsInBhcnNlVGV4dCIsInRhZ1JFIiwidG9rZW5zIiwibGFzdEluZGV4IiwiZXhlYyIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwia2xhc3MkMSIsInRyYW5zZm9ybU5vZGUkMSIsInN0eWxlQmluZGluZyIsImdlbkRhdGEkMSIsInN0eWxlJDEiLCJtb2R1bGVzJDEiLCJodG1sIiwiZGlyZWN0aXZlcyQxIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYmFzZU9wdGlvbnMiLCJleHBlY3RIVE1MIiwiZGVjb2RlciIsImhlIiwiZGVjb2RlIiwic2luZ2xlQXR0cklkZW50aWZpZXIiLCJzaW5nbGVBdHRyQXNzaWduIiwic2luZ2xlQXR0clZhbHVlcyIsImF0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsIklTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4iLCJnIiwiaXNQbGFpblRleHRFbGVtZW50IiwicmVDYWNoZSIsImRlY29kaW5nTWFwIiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJyZSIsInBhcnNlSFRNTCIsInN0YWNrIiwiaXNVbmFyeVRhZyQkMSIsImNhbkJlTGVmdE9wZW5UYWckJDEiLCJsYXN0VGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJwYXJzZUVuZFRhZyIsInN0YXJ0VGFnTWF0Y2giLCJwYXJzZVN0YXJ0VGFnIiwiaGFuZGxlU3RhcnRUYWciLCJyZXN0IiwiY2hhcnMiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCQxIiwiYWxsIiwidW5hcnlTbGFzaCIsInVuYXJ5IiwibG93ZXJDYXNlZFRhZyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwib25SRSIsImRpclJFIiwiZm9yQWxpYXNSRSIsImZvckl0ZXJhdG9yUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJkZWNvZGVIVE1MQ2FjaGVkIiwid2FybiQyIiwidHJhbnNmb3JtcyIsInByZVRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInBsYXRmb3JtSXNQcmVUYWciLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJwYXJzZSIsInByZXNlcnZlV2hpdGVzcGFjZSIsInJvb3QiLCJjdXJyZW50UGFyZW50IiwiaW5WUHJlIiwid2FybmVkIiwid2Fybk9uY2UiLCJlbmRQcmUiLCJlbGVtZW50IiwiY29tbWVudHMiLCJndWFyZElFU1ZHQnVnIiwibWFrZUF0dHJzTWFwIiwiaXNGb3JiaWRkZW5UYWciLCJmb3JiaWRkZW4iLCJwcm9jZXNzUHJlIiwicHJvY2Vzc1Jhd0F0dHJzIiwicHJvY2Vzc0ZvciIsInByb2Nlc3NJZiIsInByb2Nlc3NPbmNlIiwicHJvY2Vzc0tleSIsInBsYWluIiwicHJvY2Vzc1JlZiIsInByb2Nlc3NTbG90IiwicHJvY2Vzc0NvbXBvbmVudCIsInByb2Nlc3NBdHRycyIsImNoZWNrUm9vdENvbnN0cmFpbnRzIiwiaWYiLCJlbHNlaWYiLCJlbHNlIiwiYWRkSWZDb25kaXRpb24iLCJibG9jayIsInByb2Nlc3NJZkNvbmRpdGlvbnMiLCJzbG90U2NvcGUiLCJzbG90VGFyZ2V0IiwiaSQyIiwibGFzdE5vZGUiLCJpc1RleHRUYWciLCJjaGVja0luRm9yIiwiaW5NYXRjaCIsImZvciIsImFsaWFzIiwiaXRlcmF0b3JNYXRjaCIsIml0ZXJhdG9yMSIsIml0ZXJhdG9yMiIsImZpbmRQcmV2RWxlbWVudCIsImNvbmRpdGlvbiIsImlmQ29uZGl0aW9ucyIsInNsb3ROYW1lIiwiaXNQcm9wIiwiaGFzQmluZGluZ3MiLCJwYXJzZU1vZGlmaWVycyIsImNhbWVsIiwiYXJnTWF0Y2giLCJjaGVja0ZvckFsaWFzTW9kZWwiLCJpZU5TQnVnIiwiaWVOU1ByZWZpeCIsIl9lbCIsImlzU3RhdGljS2V5IiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwiZ2VuU3RhdGljS2V5c0NhY2hlZCIsImdlblN0YXRpY0tleXMkMSIsIm9wdGltaXplIiwibWFya1N0YXRpYyQxIiwibWFya1N0YXRpY1Jvb3RzIiwic3RhdGljIiwibCQxIiwic3RhdGljSW5Gb3IiLCJzdGF0aWNSb290IiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJmbkV4cFJFIiwic2ltcGxlUGF0aFJFIiwiZXNjIiwidGFiIiwic3BhY2UiLCJ1cCIsInJpZ2h0IiwiZG93biIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwic3RvcCIsInNlbGYiLCJjdHJsIiwic2hpZnQiLCJhbHQiLCJtZXRhIiwibWlkZGxlIiwiZ2VuSGFuZGxlcnMiLCJnZW5IYW5kbGVyIiwiaXNNZXRob2RQYXRoIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJnZW5Nb2RpZmllckNvZGUiLCJnZW5LZXlGaWx0ZXIiLCJoYW5kbGVyQ29kZSIsImdlbkZpbHRlckNvZGUiLCJrZXlWYWwiLCJwYXJzZUludCIsIndyYXBMaXN0ZW5lcnMiLCJiaW5kJDEiLCJ3cmFwRGF0YSIsImJhc2VEaXJlY3RpdmVzIiwiY2xvYWsiLCJDb2RlZ2VuU3RhdGUiLCJkYXRhR2VuRm5zIiwibWF5YmVDb21wb25lbnQiLCJvbmNlSWQiLCJnZW5lcmF0ZSIsImFzdCIsInN0YXRlIiwiZ2VuRWxlbWVudCIsInN0YXRpY1Byb2Nlc3NlZCIsImdlblN0YXRpYyIsIm9uY2VQcm9jZXNzZWQiLCJnZW5PbmNlIiwiZm9yUHJvY2Vzc2VkIiwiZ2VuRm9yIiwiaWZQcm9jZXNzZWQiLCJnZW5JZiIsImdlbkNoaWxkcmVuIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEkMiIsImFsdEdlbiIsImFsdEVtcHR5IiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJhbHRIZWxwZXIiLCJnZW5EaXJlY3RpdmVzIiwiZ2VuUHJvcHMiLCJnZW5TY29wZWRTbG90cyIsImdlbklubGluZVRlbXBsYXRlIiwiaGFzUnVudGltZSIsIm5lZWRSdW50aW1lIiwiZ2VuIiwiaW5saW5lUmVuZGVyRm5zIiwiZ2VuU2NvcGVkU2xvdCIsImdlbkZvclNjb3BlZFNsb3QiLCJzY29wZSIsImNoZWNrU2tpcCIsImFsdEdlbkVsZW1lbnQiLCJhbHRHZW5Ob2RlIiwiZWwkMSIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsImdlbkNvbW1lbnQiLCJnZW5UZXh0IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiYmluZCQkMSIsImNvbXBvbmVudE5hbWUiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidW5hcnlPcGVyYXRvcnNSRSIsImlkZW50UkUiLCJzdHJpcFN0cmluZ1JFIiwiZGV0ZWN0RXJyb3JzIiwiZXJyb3JzIiwiY2hlY2tOb2RlIiwiY2hlY2tGb3IiLCJjaGVja0V2ZW50IiwiY2hlY2tFeHByZXNzaW9uIiwic3RpcHBlZCIsImtleXdvcmRNYXRjaCIsImNoZWNrSWRlbnRpZmllciIsImlkZW50IiwiRnVuY3Rpb24iLCJjcmVhdGVGdW5jdGlvbiIsImNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4iLCJjb21waWxlIiwiY29tcGlsZVRvRnVuY3Rpb25zIiwiY29tcGlsZWQiLCJ0aXBzIiwiZm5HZW5FcnJvcnMiLCJjcmVhdGVDb21waWxlckNyZWF0b3IiLCJiYXNlQ29tcGlsZSIsImNyZWF0ZUNvbXBpbGVyIiwiZmluYWxPcHRpb25zIiwicmVmJDEiLCJpZFRvVGVtcGxhdGUiLCJtb3VudCIsImRvY3VtZW50RWxlbWVudCIsImdldE91dGVySFRNTCIsIm91dGVySFRNTCIsImNvbnRhaW5lciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztBQUtDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzNCLFVBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBbkIsSUFBK0IsT0FBT0MsTUFBUCxLQUFrQixXQUFqRCxHQUErREEsT0FBT0QsT0FBUCxHQUFpQkQsU0FBaEYsR0FDQSxPQUFPRyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxPQUFPQyxHQUF2QyxHQUE2Q0QsT0FBT0gsT0FBUCxDQUE3QyxHQUNDRCxPQUFPTSxHQUFQLEdBQWFMLFNBRmQ7QUFHQSxDQUpBLGFBSVEsWUFBWTtBQUFFOztBQUV2Qjs7QUFFQTtBQUNBOztBQUNBLFdBQVNNLE9BQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ25CLFdBQU9BLE1BQU1DLFNBQU4sSUFBbUJELE1BQU0sSUFBaEM7QUFDRDs7QUFFRCxXQUFTRSxLQUFULENBQWdCRixDQUFoQixFQUFtQjtBQUNqQixXQUFPQSxNQUFNQyxTQUFOLElBQW1CRCxNQUFNLElBQWhDO0FBQ0Q7O0FBRUQsV0FBU0csTUFBVCxDQUFpQkgsQ0FBakIsRUFBb0I7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QUFULENBQXVCdHNDLEVBQXZCLEVBQTJCO0FBQ3pCLFFBQUlBLEdBQUd1c0MsU0FBUCxFQUFrQjtBQUNoQixhQUFPdnNDLEdBQUd1c0MsU0FBVjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQUlDLFlBQVlweEMsU0FBUzBaLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQTAzQixnQkFBVXZyQixXQUFWLENBQXNCamhCLEdBQUdxNkIsU0FBSCxDQUFhLElBQWIsQ0FBdEI7QUFDQSxhQUFPbVMsVUFBVXZSLFNBQWpCO0FBQ0Q7QUFDRjs7QUFFRHhmLFFBQU1nd0IsT0FBTixHQUFnQkMsa0JBQWhCOztBQUVBLFNBQU9qd0IsS0FBUDtBQUVDLENBeDFUQSxDQUFEIiwiZmlsZSI6InZ1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVnVlLmpzIHYyLjQuMlxuICogKGMpIDIwMTQtMjAxNyBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuVnVlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgaGVscGVycyBwcm9kdWNlcyBiZXR0ZXIgdm0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZ1xuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IHR5cGVvZiB2YWwgPT09ICdvYmplY3QnXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXlcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvKFteLV0pKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuICovXG5mdW5jdGlvbiBiaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIGZuIGxlbmd0aFxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKipcbiAqIFJldHVybiBzYW1lIHZhbHVlXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RhdGljIGtleXMgc3RyaW5nIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykge1xuICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGtleXMsIG0pIHtcbiAgICByZXR1cm4ga2V5cy5jb25jYXQobS5zdGF0aWNLZXlzIHx8IFtdKVxuICB9LCBbXSkuam9pbignLCcpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSAvW15cXHcuJF0vO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG51bGwpOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG5cbntcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBuYW1lID0gdHlwZW9mIHZtID09PSAnc3RyaW5nJ1xuICAgICAgPyB2bVxuICAgICAgOiB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0ub3B0aW9uc1xuICAgICAgICA/IHZtLm9wdGlvbnMubmFtZVxuICAgICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICAgID8gdm0uJG9wdGlvbnMubmFtZSB8fCB2bS4kb3B0aW9ucy5fY29tcG9uZW50VGFnXG4gICAgICAgICAgOiB2bS5uYW1lO1xuXG4gICAgdmFyIGZpbGUgPSB2bS5faXNWdWUgJiYgdm0uJG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgdmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pO1xuICB9IGVsc2Uge1xuICAgIHtcbiAgICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaW5Ccm93c2VyICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE11dGF0aW9uT2JzZXJ2ZXIgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMDtcbnZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcblxuLy8gRmlyZWZpeCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG4vKipcbiAqIERlZmVyIGEgdGFzayB0byBleGVjdXRlIGl0IGFzeW5jaHJvbm91c2x5LlxuICovXG52YXIgbmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGJhY2tzID0gW107XG4gIHZhciBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciB0aW1lckZ1bmM7XG5cbiAgZnVuY3Rpb24gbmV4dFRpY2tIYW5kbGVyICgpIHtcbiAgICBwZW5kaW5nID0gZmFsc2U7XG4gICAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29waWVzW2ldKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gdGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbiAgLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4gIC8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuICAvLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuICAvLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4gIC8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB9O1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHAudGhlbihuZXh0VGlja0hhbmRsZXIpLmNhdGNoKGxvZ0Vycm9yKTtcbiAgICAgIC8vIGluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gICAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gICAgTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ1xuICApKSB7XG4gICAgLy8gdXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgICAvLyBlLmcuIFBoYW50b21KUyBJRTExLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAgIHZhciBjb3VudGVyID0gMTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihuZXh0VGlja0hhbmRsZXIpO1xuICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFjayB0byBzZXRUaW1lb3V0XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRUaW1lb3V0KG5leHRUaWNrSGFuZGxlciwgMCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBxdWV1ZU5leHRUaWNrIChjYiwgY3R4KSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjYikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgdGltZXJGdW5jKCk7XG4gICAgfVxuICAgIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSkoKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyB0aGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG9ubHkgb25lXG4vLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKF90YXJnZXQpIHtcbiAgaWYgKERlcC50YXJnZXQpIHsgdGFyZ2V0U3RhY2sucHVzaChEZXAudGFyZ2V0KTsgfVxuICBEZXAudGFyZ2V0ID0gX3RhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrLnBvcCgpO1xufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1tcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl1cbi5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCB3aGVuIGEgcmVhY3RpdmUgcHJvcGVydHkgaXMgc2V0LCB0aGUgbmV3IHZhbHVlIGlzXG4gKiBhbHNvIGNvbnZlcnRlZCB0byBiZWNvbWUgcmVhY3RpdmUuIEhvd2V2ZXIgd2hlbiBwYXNzaW5nIGRvd24gcHJvcHMsXG4gKiB3ZSBkb24ndCB3YW50IHRvIGZvcmNlIGNvbnZlcnNpb24gYmVjYXVzZSB0aGUgdmFsdWUgbWF5IGJlIGEgbmVzdGVkIHZhbHVlXG4gKiB1bmRlciBhIGZyb3plbiBkYXRhIHN0cnVjdHVyZS4gQ29udmVydGluZyBpdCB3b3VsZCBkZWZlYXQgdGhlIG9wdGltaXphdGlvbi5cbiAqL1xudmFyIG9ic2VydmVyU3RhdGUgPSB7XG4gIHNob3VsZENvbnZlcnQ6IHRydWVcbn07XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBhcmUgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoZXMgdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YXIgYXVnbWVudCA9IGhhc1Byb3RvXG4gICAgICA/IHByb3RvQXVnbWVudFxuICAgICAgOiBjb3B5QXVnbWVudDtcbiAgICBhdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGVhY2ggcHJvcGVydHkgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSwgb2JqW2tleXNbaV1dKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xue1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyb20pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHRvVmFsKSAmJiBpc1BsYWluT2JqZWN0KGZyb21WYWwpKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJlbnRWYWwgfHwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbi5jYWxsKHRoaXMsIHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICByZXR1cm4gY2hpbGRWYWxcbiAgICA/IGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICAgIDogcmVzXG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5XTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5XSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhciBsb3dlciA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChpc0J1aWx0SW5UYWcobG93ZXIpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKGxvd2VyKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAgICdpZDogJyArIGtleVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMpIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSBpbmplY3RbaV07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmLCB1cGRhdGU6IGRlZiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQpO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQpO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcbiAgdmFyIGV4dGVuZHNGcm9tID0gY2hpbGQuZXh0ZW5kcztcbiAgaWYgKGV4dGVuZHNGcm9tKSB7XG4gICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgZXh0ZW5kc0Zyb20sIHZtKTtcbiAgfVxuICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICB9XG4gIH1cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGhhbmRsZSBib29sZWFuIHByb3BzXG4gIGlmIChpc1R5cGUoQm9vbGVhbiwgcHJvcC50eXBlKSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzVHlwZShTdHJpbmcsIHByb3AudHlwZSkgJiYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XG4gICAgICB2YWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkQ29udmVydCA9IG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydDtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHByZXZTaG91bGRDb252ZXJ0O1xuICB9XG4gIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyArXG4gICAgICAnIEV4cGVjdGVkICcgKyBleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpICtcbiAgICAgICcsIGdvdCAnICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgKyAnLicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xufVxuXG5mdW5jdGlvbiBpc1R5cGUgKHR5cGUsIGZuKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShmbikpIHtcbiAgICByZXR1cm4gZ2V0VHlwZShmbikgPT09IGdldFR5cGUodHlwZSlcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZm4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZ2V0VHlwZShmbltpXSkgPT09IGdldFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxue1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSk7XG4gICAgfTtcbiAgfVxufVxuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxue1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgIFwicmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdG8gZGVjbGFyZSByZWFjdGl2ZSBkYXRhIFwiICtcbiAgICAgIFwicHJvcGVydGllcyBpbiB0aGUgZGF0YSBvcHRpb24uXCIsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIFByb3h5LnRvU3RyaW5nKCkubWF0Y2goL25hdGl2ZSBjb2RlLyk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YScpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mdW5jdGlvbmFsQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHt9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuZnVuY3Rpb24gY2xvbmVWTm9kZXMgKHZub2Rlcykge1xuICB2YXIgbGVuID0gdm5vZGVzLmxlbmd0aDtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcmVzW2ldID0gY2xvbmVWTm9kZSh2bm9kZXNbaV0pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMpIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNsb25lZFtpXS5hcHBseShudWxsLCBhcmd1bWVudHMkMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gZm5zLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1cik7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5vbmNlLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3QgPSByZXNbcmVzLmxlbmd0aCAtIDFdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSkpO1xuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgKGxhc3QpLnRleHQgKz0gU3RyaW5nKGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW3Jlcy5sZW5ndGggLSAxXSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoY29tcC5fX2VzTW9kdWxlICYmIGNvbXAuZGVmYXVsdCkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkuY29udGV4dHMpKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb250ZXh0cyA9IGZhY3RvcnkuY29udGV4dHMgPSBbY29udGV4dF07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjb250ZXh0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29udGV4dHNbaV0uJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlJCQxKSB7XG4gIGlmIChvbmNlJCQxKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcyQxLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB0aGlzJDEuJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNic1tpXS5hcHBseSh2bSwgYXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgdmFyIGRlZmF1bHRTbG90ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mdW5jdGlvbmFsQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGNoaWxkLmRhdGEgJiYgY2hpbGQuZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gY2hpbGQuZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmF1bHRTbG90LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgd2hpdGVzcGFjZVxuICBpZiAoIWRlZmF1bHRTbG90LmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICBzbG90cy5kZWZhdWx0ID0gZGVmYXVsdFNsb3Q7XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXNcbikge1xuICByZXMgPSByZXMgfHwge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zW2ldKSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKGZuc1tpXSwgcmVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2Zuc1tpXS5rZXldID0gZm5zW2ldLmZuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICB9XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKFxuICAgICAgICB2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8sXG4gICAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0sXG4gICAgICAgIHZtLiRvcHRpb25zLl9yZWZFbG1cbiAgICAgICk7XG4gICAgICAvLyBubyBuZWVkIGZvciB0aGUgcmVmIG5vZGVzIGFmdGVyIGluaXRpYWwgcGF0Y2hcbiAgICAgIC8vIHRoaXMgcHJldmVudHMga2VlcGluZyBhIGRldGFjaGVkIERPTSB0cmVlIGluIG1lbW9yeSAoIzU4NTEpXG4gICAgICB2bS4kb3B0aW9ucy5fcGFyZW50RWxtID0gdm0uJG9wdGlvbnMuX3JlZkVsbSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICB2bS4kb3B0aW9ucy5lbCB8fCBlbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgobmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKG5hbWUgKyBcIiBwYXRjaFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgdm0uX3dhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlblxuICB2YXIgaGFzQ2hpbGRyZW4gPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgLy8gaGFzIG5ldyBzY29wZWQgc2xvdHNcbiAgICB2bS4kc2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0IC8vIGhhcyBvbGQgc2NvcGVkIHNsb3RzXG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuc2VycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhICYmIHBhcmVudFZub2RlLmRhdGEuYXR0cnM7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCB2bS4kb3B0aW9ucy5wcm9wcywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICAgIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG4gIH1cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKGhhc0NoaWxkcmVuKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlcnNbaV0uY2FsbCh2bSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoaG9vayArIFwiIGhvb2tcIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9uc1xuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gZXhwT3JGbi50b1N0cmluZygpO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gZnVuY3Rpb24gKCkge307XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWwpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tPcHRpb25UeXBlICh2bSwgbmFtZSkge1xuICB2YXIgb3B0aW9uID0gdm0uJG9wdGlvbnNbbmFtZV07XG4gIGlmICghaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XG4gICAgd2FybihcbiAgICAgIChcImNvbXBvbmVudCBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIiBzaG91bGQgYmUgYW4gb2JqZWN0LlwiKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XG4gIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBpc1Jvb3Q7XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGtleSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLiRwYXJlbnQgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGVja09wdGlvblR5cGUodm0sICdjb21wdXRlZCcpO1xuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIodm0sIGdldHRlciB8fCBub29wLCBub29wLCBjb21wdXRlZFdhdGNoZXJPcHRpb25zKTtcblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKHRhcmdldCwga2V5LCB1c2VyRGVmKSB7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiB1c2VyRGVmLmdldFxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldFxuICAgICAgPyB1c2VyRGVmLnNldFxuICAgICAgOiBub29wO1xuICB9XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgY2hlY2tPcHRpb25UeXBlKHZtLCAnbWV0aG9kcycpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICB2bVtrZXldID0gbWV0aG9kc1trZXldID09IG51bGwgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgICB7XG4gICAgICBpZiAobWV0aG9kc1trZXldID09IG51bGwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIm1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFuIHVuZGVmaW5lZCB2YWx1ZSBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoZWNrT3B0aW9uVHlwZSh2bSwgJ3dhdGNoJyk7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAga2V5T3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goa2V5T3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uIChuZXdEYXRhKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV07XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIHByb3ZpZGVLZXkgaW4gc291cmNlLl9wcm92aWRlZCkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzb3VyY2UpIHtcbiAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwge30pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIF9jb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcbiAgdmFyIGggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChfY29udGV4dCwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG4gIHZhciB2bm9kZSA9IEN0b3Iub3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCBoLCB7XG4gICAgZGF0YTogZGF0YSxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHBhcmVudDogY29udGV4dCxcbiAgICBsaXN0ZW5lcnM6IGRhdGEub24gfHwge30sXG4gICAgaW5qZWN0aW9uczogcmVzb2x2ZUluamVjdChDdG9yLm9wdGlvbnMuaW5qZWN0LCBjb250ZXh0KSxcbiAgICBzbG90czogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBjb250ZXh0KTsgfVxuICB9KTtcbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICB2bm9kZS5mdW5jdGlvbmFsQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgdm5vZGUuZnVuY3Rpb25hbE9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gICAgaWYgKGRhdGEuc2xvdCkge1xuICAgICAgKHZub2RlLmRhdGEgfHwgKHZub2RlLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAoXG4gICAgdm5vZGUsXG4gICAgaHlkcmF0aW5nLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG1cbiAgKSB7XG4gICAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlLFxuICAgICAgICBwYXJlbnRFbG0sXG4gICAgICAgIHJlZkVsbVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IsIGNvbnRleHQpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIG1lcmdlIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgbWVyZ2VIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50LCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbiAgcGFyZW50RWxtLFxuICByZWZFbG1cbikge1xuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIHByb3BzRGF0YTogdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YSxcbiAgICBfY29tcG9uZW50VGFnOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgX3BhcmVudExpc3RlbmVyczogdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycyxcbiAgICBfcmVuZGVyQ2hpbGRyZW46IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbixcbiAgICBfcGFyZW50RWxtOiBwYXJlbnRFbG0gfHwgbnVsbCxcbiAgICBfcmVmRWxtOiByZWZFbG0gfHwgbnVsbFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZUNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2tzIChkYXRhKSB7XG4gIGlmICghZGF0YS5ob29rKSB7XG4gICAgZGF0YS5ob29rID0ge307XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBmcm9tUGFyZW50ID0gZGF0YS5ob29rW2tleV07XG4gICAgdmFyIG91cnMgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgZGF0YS5ob29rW2tleV0gPSBmcm9tUGFyZW50ID8gbWVyZ2VIb29rJDEob3VycywgZnJvbVBhcmVudCkgOiBvdXJzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICBvbmUoYSwgYiwgYywgZCk7XG4gICAgdHdvKGEsIGIsIGMsIGQpO1xuICB9XG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7KGRhdGEucHJvcHMgfHwgKGRhdGEucHJvcHMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgaWYgKGlzRGVmKG9uW2V2ZW50XSkpIHtcbiAgICBvbltldmVudF0gPSBbZGF0YS5tb2RlbC5jYWxsYmFja10uY29uY2F0KG9uW2V2ZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKG5zKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIGlzVW5kZWYoY2hpbGQubnMpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzRGVmKHJldCkpIHtcbiAgICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFja1xuICB9IGVsc2Uge1xuICAgIHZhciBzbG90Tm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXTtcbiAgICAvLyB3YXJuIGR1cGxpY2F0ZSBzbG90IHVzYWdlXG4gICAgaWYgKHNsb3ROb2RlcyAmJiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCAmJiB3YXJuKFxuICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICBcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzbG90Tm9kZXMgfHwgZmFsbGJhY2tcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbkFsaWFzXG4pIHtcbiAgdmFyIGtleUNvZGVzID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbkFsaWFzO1xuICBpZiAoQXJyYXkuaXNBcnJheShrZXlDb2RlcykpIHtcbiAgICByZXR1cm4ga2V5Q29kZXMuaW5kZXhPZihldmVudEtleUNvZGUpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBrZXlDb2RlcyAhPT0gZXZlbnRLZXlDb2RlXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShrZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciB0cmVlID0gdGhpcy5fc3RhdGljVHJlZXNbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUgYnkgZG9pbmcgYSBzaGFsbG93IGNsb25lLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRyZWUpXG4gICAgICA/IGNsb25lVk5vZGVzKHRyZWUpXG4gICAgICA6IGNsb25lVk5vZGUodHJlZSlcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF0gPVxuICAgIHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5KTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQob3VycywgZXhpc3RpbmcpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHModm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuICAgICAgLy8gY2xvbmUgc2xvdCBub2RlcyBvbiByZS1yZW5kZXJzXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdm0uJHNsb3RzKSB7XG4gICAgICAgIHZtLiRzbG90c1trZXldID0gY2xvbmVWTm9kZXModm0uJHNsb3RzW2tleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZtLiRzY29wZWRTbG90cyA9IChfcGFyZW50Vm5vZGUgJiYgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMpIHx8IGVtcHR5T2JqZWN0O1xuXG4gICAgaWYgKHN0YXRpY1JlbmRlckZucyAmJiAhdm0uX3N0YXRpY1RyZWVzKSB7XG4gICAgICB2bS5fc3RhdGljVHJlZXMgPSBbXTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXIgZnVuY3Rpb25cIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAge1xuICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yXG4gICAgICAgICAgPyB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpXG4gICAgICAgICAgOiB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG5cbiAgLy8gaW50ZXJuYWwgcmVuZGVyIGhlbHBlcnMuXG4gIC8vIHRoZXNlIGFyZSBleHBvc2VkIG9uIHRoZSBpbnN0YW5jZSBwcm90b3R5cGUgdG8gcmVkdWNlIGdlbmVyYXRlZCByZW5kZXJcbiAgLy8gY29kZSBzaXplLlxuICBWdWUucHJvdG90eXBlLl9vID0gbWFya09uY2U7XG4gIFZ1ZS5wcm90b3R5cGUuX24gPSB0b051bWJlcjtcbiAgVnVlLnByb3RvdHlwZS5fcyA9IHRvU3RyaW5nO1xuICBWdWUucHJvdG90eXBlLl9sID0gcmVuZGVyTGlzdDtcbiAgVnVlLnByb3RvdHlwZS5fdCA9IHJlbmRlclNsb3Q7XG4gIFZ1ZS5wcm90b3R5cGUuX3EgPSBsb29zZUVxdWFsO1xuICBWdWUucHJvdG90eXBlLl9pID0gbG9vc2VJbmRleE9mO1xuICBWdWUucHJvdG90eXBlLl9tID0gcmVuZGVyU3RhdGljO1xuICBWdWUucHJvdG90eXBlLl9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgVnVlLnByb3RvdHlwZS5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIFZ1ZS5wcm90b3R5cGUuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIFZ1ZS5wcm90b3R5cGUuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIFZ1ZS5wcm90b3R5cGUuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICBWdWUucHJvdG90eXBlLl91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICBWdWUucHJvdG90eXBlLl9nID0gYmluZE9iamVjdExpc3RlbmVycztcbn1cblxuLyogICovXG5cbnZhciB1aWQkMSA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDErKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLWluaXQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKCh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLnByb3BzRGF0YSA9IG9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIGV4dGVuZGVkID0gQ3Rvci5leHRlbmRPcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gZGVkdXBlKGxhdGVzdFtrZXldLCBleHRlbmRlZFtrZXldLCBzZWFsZWRba2V5XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBkZWR1cGUgKGxhdGVzdCwgZXh0ZW5kZWQsIHNlYWxlZCkge1xuICAvLyBjb21wYXJlIGxhdGVzdCBhbmQgc2VhbGVkIHRvIGVuc3VyZSBsaWZlY3ljbGUgaG9va3Mgd29uJ3QgYmUgZHVwbGljYXRlZFxuICAvLyBiZXR3ZWVuIG1lcmdlc1xuICBpZiAoQXJyYXkuaXNBcnJheShsYXRlc3QpKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHNlYWxlZCA9IEFycmF5LmlzQXJyYXkoc2VhbGVkKSA/IHNlYWxlZCA6IFtzZWFsZWRdO1xuICAgIGV4dGVuZGVkID0gQXJyYXkuaXNBcnJheShleHRlbmRlZCkgPyBleHRlbmRlZCA6IFtleHRlbmRlZF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRlc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIHB1c2ggb3JpZ2luYWwgb3B0aW9ucyBhbmQgbm90IHNlYWxlZCBvcHRpb25zIHRvIGV4Y2x1ZGUgZHVwbGljYXRlZCBvcHRpb25zXG4gICAgICBpZiAoZXh0ZW5kZWQuaW5kZXhPZihsYXRlc3RbaV0pID49IDAgfHwgc2VhbGVkLmluZGV4T2YobGF0ZXN0W2ldKSA8IDApIHtcbiAgICAgICAgcmVzLnB1c2gobGF0ZXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsYXRlc3RcbiAgfVxufVxuXG5mdW5jdGlvbiBWdWUkMyAob3B0aW9ucykge1xuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUkMylcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUkMyk7XG5zdGF0ZU1peGluKFZ1ZSQzKTtcbmV2ZW50c01peGluKFZ1ZSQzKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSQzKTtcbnJlbmRlck1peGluKFZ1ZSQzKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAge1xuICAgICAgaWYgKCEvXlthLXpBLVpdW1xcdy1dKiQvLnRlc3QobmFtZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgICAgICdjYW4gb25seSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFuZCB0aGUgaHlwaGVuLCAnICtcbiAgICAgICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBjb25maWcuaXNSZXNlcnZlZFRhZyhpZCkpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgICAgICAgICAnaWQ6ICcgKyBpZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChjYWNoZSwgY3VycmVudCwgZmlsdGVyKSB7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIGlmIChjYWNoZWROb2RlICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlZE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlW2tleV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKHZub2RlKSB7XG4gIGlmICh2bm9kZSkge1xuICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbn1cblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXNcbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcyQxLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcyQxLmNhY2hlW2tleV0pO1xuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGluY2x1ZGU6IGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzLmNhY2hlLCB0aGlzLl92bm9kZSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSxcbiAgICBleGNsdWRlOiBmdW5jdGlvbiBleGNsdWRlICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcy5jYWNoZSwgdGhpcy5fdm5vZGUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAoXG4gICAgICAgICh0aGlzLmluY2x1ZGUgJiYgIW1hdGNoZXModGhpcy5pbmNsdWRlLCBuYW1lKSkgfHxcbiAgICAgICAgKHRoaXMuZXhjbHVkZSAmJiBtYXRjaGVzKHRoaXMuZXhjbHVkZSwgbmFtZSkpXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKHRoaXMuY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgfVxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUkMyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUkMy5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG5WdWUkMy52ZXJzaW9uID0gJzIuNC4yJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0Jyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1ByZVRhZyA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHRhZyA9PT0gJ3ByZSc7IH07XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUgKG5vZGUsIGtleSwgdmFsKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKGtleSwgdmFsKTtcbn1cblxuXG52YXIgbm9kZU9wcyA9IE9iamVjdC5mcmVlemUoe1xuXHRjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG5cdGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuXHRjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG5cdGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG5cdGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuXHRyZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG5cdGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcblx0cGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcblx0bmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuXHR0YWdOYW1lOiB0YWdOYW1lLFxuXHRzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cdHNldEF0dHJpYnV0ZTogc2V0QXR0cmlidXRlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICgha2V5KSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcblxuLypcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8vIFNvbWUgYnJvd3NlcnMgZG8gbm90IHN1cHBvcnQgZHluYW1pY2FsbHkgY2hhbmdpbmcgdHlwZSBmb3IgPGlucHV0PlxuLy8gc28gdGhleSBuZWVkIHRvIGJlIHRyZWF0ZWQgYXMgZGlmZmVyZW50IG5vZGVzXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluUHJlID0gMDtcbiAgZnVuY3Rpb24gY3JlYXRlRWxtICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgbmVzdGVkKSB7XG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBpblByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaW5QcmUgJiZcbiAgICAgICAgICAhdm5vZGUubnMgJiZcbiAgICAgICAgICAhKGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuaW5kZXhPZih0YWcpID4gLTEpICYmXG4gICAgICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodGFnKVxuICAgICAgICApIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGluUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChyZWYkJDEucGFyZW50Tm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICBub2RlT3BzLnNldEF0dHJpYnV0ZSh2bm9kZS5lbG0sIGksICcnKTtcbiAgICAgIH1cbiAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCBlbG1Ub01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSkgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV0gOiBudWxsO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxtVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAhZWxtVG9Nb3ZlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAnSXQgc2VlbXMgdGhlcmUgYXJlIGR1cGxpY2F0ZSBrZXlzIHRoYXQgaXMgY2F1c2luZyBhbiB1cGRhdGUgZXJyb3IuICcgK1xuICAgICAgICAgICAgICAnTWFrZSBzdXJlIGVhY2ggdi1mb3IgaXRlbSBoYXMgYSB1bmlxdWUga2V5LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzYW1lVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgZWxtVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLHN0eWxlLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBlbG07XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IGVsbTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAhYmFpbGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgYmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fFxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgLy8gY29tcG9uZW50IHJvb3QgZWxlbWVudCByZXBsYWNlZC5cbiAgICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCB2bm9kZS5wYXJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0kMSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2sgfHwgKHZub2RlLmRhdGEuaG9vayA9IHt9KSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUU5ICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBrZXkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbnZhciB2YWxpZERpdmlzaW9uQ2hhclJFID0gL1tcXHcpLitcXC1fJFxcXV0vO1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgXCIsXCIgKyBhcmdzKVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnKSB7XG4gIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSBjb21waWxlcl06IFwiICsgbXNnKSk7XG59XG5cbmZ1bmN0aW9uIHBsdWNrTW9kdWxlRnVuY3Rpb24gKFxuICBtb2R1bGVzLFxuICBrZXlcbikge1xuICByZXR1cm4gbW9kdWxlc1xuICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSkge1xuICAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCByYXdOYW1lOiByYXdOYW1lLCB2YWx1ZTogdmFsdWUsIGFyZzogYXJnLCBtb2RpZmllcnM6IG1vZGlmaWVycyB9KTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlciAoXG4gIGVsLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzLFxuICBpbXBvcnRhbnQsXG4gIHdhcm5cbikge1xuICAvLyB3YXJuIHByZXZlbnQgYW5kIHBhc3NpdmUgbW9kaWZpZXJcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuICYmXG4gICAgbW9kaWZpZXJzICYmIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICkge1xuICAgIHdhcm4oXG4gICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgJ1Bhc3NpdmUgaGFuZGxlciBjYW5cXCd0IHByZXZlbnQgZGVmYXVsdCBldmVudC4nXG4gICAgKTtcbiAgfVxuICAvLyBjaGVjayBjYXB0dXJlIG1vZGlmaWVyXG4gIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9ICchJyArIG5hbWU7IC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG4gIH1cbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gJ34nICsgbmFtZTsgLy8gbWFyayB0aGUgZXZlbnQgYXMgb25jZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAobW9kaWZpZXJzICYmIG1vZGlmaWVycy5wYXNzaXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5wYXNzaXZlO1xuICAgIG5hbWUgPSAnJicgKyBuYW1lOyAvLyBtYXJrIHRoZSBldmVudCBhcyBwYXNzaXZlXG4gIH1cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubmF0aXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgZXZlbnRzID0gZWwubmF0aXZlRXZlbnRzIHx8IChlbC5uYXRpdmVFdmVudHMgPSB7fSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gIH1cbiAgdmFyIG5ld0hhbmRsZXIgPSB7IHZhbHVlOiB2YWx1ZSwgbW9kaWZpZXJzOiBtb2RpZmllcnMgfTtcbiAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChlbCwgbmFtZSkge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlIGdlbmVyYXRpb24gZm9yIGNvbXBvbmVudCB2LW1vZGVsXG4gKi9cbmZ1bmN0aW9uIGdlbkNvbXBvbmVudE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcblxuICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnO1xuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gYmFzZVZhbHVlRXhwcmVzc2lvbjtcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPVxuICAgICAgXCIodHlwZW9mIFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiID09PSAnc3RyaW5nJ1wiICtcbiAgICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgICAgXCI6IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBlbC5tb2RlbCA9IHtcbiAgICB2YWx1ZTogKFwiKFwiICsgdmFsdWUgKyBcIilcIiksXG4gICAgZXhwcmVzc2lvbjogKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksXG4gICAgY2FsbGJhY2s6IChcImZ1bmN0aW9uIChcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIikge1wiICsgYXNzaWdubWVudCArIFwifVwiKVxuICB9O1xufVxuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGVnZW4gaGVscGVyIGZvciBnZW5lcmF0aW5nIHYtbW9kZWwgdmFsdWUgYXNzaWdubWVudCBjb2RlLlxuICovXG5mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAoXG4gIHZhbHVlLFxuICBhc3NpZ25tZW50XG4pIHtcbiAgdmFyIG1vZGVsUnMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKG1vZGVsUnMuaWR4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiJHNldChcIiArIChtb2RlbFJzLmV4cCkgKyBcIiwgXCIgKyAobW9kZWxScy5pZHgpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICB9XG59XG5cbi8qKlxuICogcGFyc2UgZGlyZWN0aXZlIG1vZGVsIHRvIGRvIHRoZSBhcnJheSB1cGRhdGUgdHJhbnNmb3JtLiBhW2lkeF0gPSB2YWwgPT4gJCRhLnNwbGljZSgkJGlkeCwgMSwgdmFsKVxuICpcbiAqIGZvciBsb29wIHBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2lkeF1cbiAqIC0gdGVzdFt0ZXN0MVtpZHhdXVxuICogLSB0ZXN0W1wiYVwiXVtpZHhdXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFbaWR4XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtpZHhdXVxuICpcbiAqL1xuXG52YXIgbGVuO1xudmFyIHN0cjtcbnZhciBjaHI7XG52YXIgaW5kZXgkMTtcbnZhciBleHByZXNzaW9uUG9zO1xudmFyIGV4cHJlc3Npb25FbmRQb3M7XG5cbmZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICBzdHIgPSB2YWw7XG4gIGxlbiA9IHN0ci5sZW5ndGg7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuICAgIHJldHVybiB7XG4gICAgICBleHA6IHZhbCxcbiAgICAgIGlkeDogbnVsbFxuICAgIH1cbiAgfVxuXG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gMHg1Qikge1xuICAgICAgcGFyc2VCcmFja2V0KGNocik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHA6IHZhbC5zdWJzdHJpbmcoMCwgZXhwcmVzc2lvblBvcyksXG4gICAgaWR4OiB2YWwuc3Vic3RyaW5nKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHdhcm4kMTtcblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbmZ1bmN0aW9uIG1vZGVsIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDEgPSBfd2FybjtcbiAgdmFyIHZhbHVlID0gZGlyLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgdmFyIHRhZyA9IGVsLnRhZztcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIHtcbiAgICB2YXIgZHluYW1pY1R5cGUgPSBlbC5hdHRyc01hcFsndi1iaW5kOnR5cGUnXSB8fCBlbC5hdHRyc01hcFsnOnR5cGUnXTtcbiAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIGR5bmFtaWNUeXBlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPGlucHV0IDp0eXBlPVxcXCJcIiArIGR5bmFtaWNUeXBlICsgXCJcXFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OlxcblwiICtcbiAgICAgICAgXCJ2LW1vZGVsIGRvZXMgbm90IHN1cHBvcnQgZHluYW1pYyBpbnB1dCB0eXBlcy4gVXNlIHYtaWYgYnJhbmNoZXMgaW5zdGVhZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gaW5wdXRzIHdpdGggdHlwZT1cImZpbGVcIiBhcmUgcmVhZCBvbmx5IGFuZCBzZXR0aW5nIHRoZSBpbnB1dCdzXG4gICAgLy8gdmFsdWUgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdmaWxlJykge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuICAgICAgICBcIkZpbGUgaW5wdXRzIGFyZSByZWFkIG9ubHkuIFVzZSBhIHYtb246Y2hhbmdlIGxpc3RlbmVyIGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICBnZW5TZWxlY3QoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAndGV4dGFyZWEnKSB7XG4gICAgZ2VuRGVmYXVsdE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICghY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2Uge1xuICAgIHdhcm4kMShcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgXCJ2LW1vZGVsIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBlbGVtZW50IHR5cGUuIFwiICtcbiAgICAgICdJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBjb250ZW50ZWRpdGFibGUsIGl0XFwncyByZWNvbW1lbmRlZCB0byAnICtcbiAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LidcbiAgICApO1xuICB9XG5cbiAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhciB0cnVlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0cnVlLXZhbHVlJykgfHwgJ3RydWUnO1xuICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIFwiQXJyYXkuaXNBcnJheShcIiArIHZhbHVlICsgXCIpXCIgK1xuICAgICAgXCI/X2koXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpPi0xXCIgKyAoXG4gICAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuICAgICAgICAgID8gKFwiOihcIiArIHZhbHVlICsgXCIpXCIpXG4gICAgICAgICAgOiAoXCI6X3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKVwiKVxuICAgICAgKVxuICApO1xuICBhZGRIYW5kbGVyKGVsLCBDSEVDS0JPWF9SQURJT19UT0tFTixcbiAgICBcInZhciAkJGE9XCIgKyB2YWx1ZSArIFwiLFwiICtcbiAgICAgICAgJyQkZWw9JGV2ZW50LnRhcmdldCwnICtcbiAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICdpZihBcnJheS5pc0FycmF5KCQkYSkpeycgK1xuICAgICAgXCJ2YXIgJCR2PVwiICsgKG51bWJlciA/ICdfbignICsgdmFsdWVCaW5kaW5nICsgJyknIDogdmFsdWVCaW5kaW5nKSArIFwiLFwiICtcbiAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgXCJpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoXCIgKyB2YWx1ZSArIFwiPSQkYS5jb25jYXQoJCR2KSl9XCIgK1xuICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgdmFsdWUgKyBcIj0kJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKSl9XCIgK1xuICAgIFwifWVsc2V7XCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGMnKSkgKyBcIn1cIixcbiAgICBudWxsLCB0cnVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlblJhZGlvTW9kZWwgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsIChcIl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIENIRUNLQk9YX1JBRElPX1RPS0VOLCBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVCaW5kaW5nKSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlblNlbGVjdCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgc2VsZWN0ZWRWYWwgPSBcIkFycmF5LnByb3RvdHlwZS5maWx0ZXJcIiArXG4gICAgXCIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KVwiICtcbiAgICBcIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFxcXCJfdmFsdWVcXFwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKG51bWJlciA/ICdfbih2YWwpJyA6ICd2YWwnKSArIFwifSlcIjtcblxuICB2YXIgYXNzaWdubWVudCA9ICckZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0nO1xuICB2YXIgY29kZSA9IFwidmFyICQkc2VsZWN0ZWRWYWwgPSBcIiArIHNlbGVjdGVkVmFsICsgXCI7XCI7XG4gIGNvZGUgPSBjb2RlICsgXCIgXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGNvZGUsIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIGxhenkgPSByZWYubGF6eTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7XG4gIHZhciBldmVudCA9IGxhenlcbiAgICA/ICdjaGFuZ2UnXG4gICAgOiB0eXBlID09PSAncmFuZ2UnXG4gICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICA6ICdpbnB1dCc7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9ICckZXZlbnQudGFyZ2V0LnZhbHVlJztcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIiRldmVudC50YXJnZXQudmFsdWUudHJpbSgpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG4gIGlmIChuZWVkQ29tcG9zaXRpb25HdWFyZCkge1xuICAgIGNvZGUgPSBcImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIiArIGNvZGU7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgdmFyIGV2ZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIC8vIENocm9tZSBmaXJlcyBtaWNyb3Rhc2tzIGluIGJldHdlZW4gY2xpY2svY2hhbmdlLCBsZWFkcyB0byAjNDUyMVxuICAgIGV2ZW50ID0gaXNDaHJvbWUgPyAnY2xpY2snIDogJ2NoYW5nZSc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgb25jZSQkMSxcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIGlmIChvbmNlJCQxKSB7XG4gICAgdmFyIG9sZEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gICAgaGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgPyBvbGRIYW5kbGVyKGV2KVxuICAgICAgICA6IG9sZEhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmVtb3ZlJDIoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBldmVudCxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCB2bm9kZS5jb250ZXh0KTtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKGlzVW5kZWYocHJvcHNba2V5XSkpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgdm5vZGUsIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKFxuICBlbG0sXG4gIHZub2RlLFxuICBjaGVja1ZhbFxuKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIHZub2RlLnRhZyA9PT0gJ29wdGlvbicgfHxcbiAgICBpc0RpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNJbnB1dENoYW5nZWQoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzSW5wdXRDaGFuZ2VkIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSAmJiBtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICB9XG4gIGlmIChpc0RlZihtb2RpZmllcnMpICYmIG1vZGlmaWVycy50cmltKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGNoaWxkTm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKSkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrbGV5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gIDogc2V0VGltZW91dDtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBtb2RlbCQxID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICB2YXIgY2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH07XG4gICAgICBjYigpO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICAgICAgc2V0VGltZW91dChjYiwgMCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgaWYgKCFpc0FuZHJvaWQpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh2YWx1ZSA9PT0gb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IG1vZGVsJDEsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuLy8gc3VwcG9ydHMgdHJhbnNpdGlvbiBtb2RlIChvdXQtaW4gLyBpbi1vdXQpXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW47XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkICYmIChvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGxpc3QgaXRlbXMuXG4vLyBzdXBwb3J0cyBtb3ZlIHRyYW5zaXRpb25zIHVzaW5nIHRoZSBGTElQIHRlY2huaXF1ZS5cblxuLy8gQmVjYXVzZSB0aGUgdmRvbSdzIGNoaWxkcmVuIHVwZGF0ZSBhbGdvcml0aG0gaXMgXCJ1bnN0YWJsZVwiIC0gaS5lLlxuLy8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG4vLyB3ZSBmb3JjZSB0cmFuc2l0aW9uLWdyb3VwIHRvIHVwZGF0ZSBpdHMgY2hpbGRyZW4gaW50byB0d28gcGFzc2VzOlxuLy8gaW4gdGhlIGZpcnN0IHBhc3MsIHdlIHJlbW92ZSBhbGwgbm9kZXMgdGhhdCBuZWVkIHRvIGJlIHJlbW92ZWQsXG4vLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuLy8gaW50byB0aGUgZmluYWwgZGVzaXJlZCBzdGF0ZS4gVGhpcyB3YXkgaW4gdGhlIHNlY29uZCBwYXNzIHJlbW92ZWRcbi8vIG5vZGVzIHdpbGwgcmVtYWluIHdoZXJlIHRoZXkgc2hvdWxkIGJlLlxuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGYgPSBib2R5Lm9mZnNldEhlaWdodDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZSQzLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlJDMuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlJDMuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUkMy5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlJDMuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUkMy5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlJDMub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUkMy5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgIGlmIChkZXZ0b29scykge1xuICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSQzKTtcbiAgICB9IGVsc2UgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzQ2hyb21lKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgIGluQnJvd3NlciAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgKSB7XG4gICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICApO1xuICB9XG59LCAwKTtcblxuLyogICovXG5cbi8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG5mdW5jdGlvbiBzaG91bGREZWNvZGUgKGNvbnRlbnQsIGVuY29kZWQpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gXCI8ZGl2IGE9XFxcIlwiICsgY29udGVudCArIFwiXFxcIi8+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoZW5jb2RlZCkgPiAwXG59XG5cbi8vICMzNjYzXG4vLyBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBzaG91bGREZWNvZGUoJ1xcbicsICcmIzEwOycpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxcbikrPylcXH1cXH0vZztcbnZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcblxudmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgdmFyIG1hdGNoLCBpbmRleDtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgdmFyIGV4cCA9IHBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO1xuICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0ZXh0LnNsaWNlKGxhc3RJbmRleCkpKTtcbiAgfVxuICByZXR1cm4gdG9rZW5zLmpvaW4oJysnKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgc3RhdGljQ2xhc3MpIHtcbiAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgd2FybihcbiAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICBlbC5zdGF0aWNDbGFzcyA9IEpTT04uc3RyaW5naWZ5KHN0YXRpY0NsYXNzKTtcbiAgfVxuICB2YXIgY2xhc3NCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdjbGFzcycsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChjbGFzc0JpbmRpbmcpIHtcbiAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGFcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDEgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAge1xuICAgICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5zdGF0aWNTdHlsZSA9IEpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7XG4gIH1cblxuICB2YXIgc3R5bGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzdHlsZScsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChzdHlsZUJpbmRpbmcpIHtcbiAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcbiAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIgc3R5bGUkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNTdHlsZSddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMVxuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICd0ZXh0Q29udGVudCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIikpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBodG1sIChlbCwgZGlyKSB7XG4gIGlmIChkaXIudmFsdWUpIHtcbiAgICBhZGRQcm9wKGVsLCAnaW5uZXJIVE1MJywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSk7XG4gIH1cbn1cblxudmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgbW9kZWw6IG1vZGVsLFxuICB0ZXh0OiB0ZXh0LFxuICBodG1sOiBodG1sXG59O1xuXG4vKiAgKi9cblxudmFyIGlzVW5hcnlUYWcgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicidcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxudmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBtYWtlTWFwKFxuICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSdcbik7XG5cbi8vIEhUTUw1IHRhZ3MgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sI2VsZW1lbnRzLTNcbi8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxudmFyIGlzTm9uUGhyYXNpbmdUYWcgPSBtYWtlTWFwKFxuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLCcgK1xuICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAnaDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsJyArXG4gICdvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsJyArXG4gICd0aXRsZSx0cix0cmFjaydcbik7XG5cbi8qICAqL1xuXG52YXIgYmFzZU9wdGlvbnMgPSB7XG4gIGV4cGVjdEhUTUw6IHRydWUsXG4gIG1vZHVsZXM6IG1vZHVsZXMkMSxcbiAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICBpc1ByZVRhZzogaXNQcmVUYWcsXG4gIGlzVW5hcnlUYWc6IGlzVW5hcnlUYWcsXG4gIG11c3RVc2VQcm9wOiBtdXN0VXNlUHJvcCxcbiAgY2FuQmVMZWZ0T3BlblRhZzogY2FuQmVMZWZ0T3BlblRhZyxcbiAgaXNSZXNlcnZlZFRhZzogaXNSZXNlcnZlZFRhZyxcbiAgZ2V0VGFnTmFtZXNwYWNlOiBnZXRUYWdOYW1lc3BhY2UsXG4gIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKVxufTtcblxuLyogICovXG5cbnZhciBkZWNvZGVyO1xuXG52YXIgaGUgPSB7XG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gICAgZGVjb2RlciA9IGRlY29kZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGVjb2Rlci5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG4gIH1cbn07XG5cbi8qKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gKi9cblxuLyohXG4gKiBIVE1MIFBhcnNlciBCeSBKb2huIFJlc2lnIChlam9obi5vcmcpXG4gKiBNb2RpZmllZCBieSBKdXJpeSBcImthbmdheFwiIFpheXRzZXZcbiAqIE9yaWdpbmFsIGNvZGUgYnkgRXJpayBBcnZpZHNzb24sIE1vemlsbGEgUHVibGljIExpY2Vuc2VcbiAqIGh0dHA6Ly9lcmlrLmVhZS5uZXQvc2ltcGxlaHRtbHBhcnNlci9zaW1wbGVodG1scGFyc2VyLmpzXG4gKi9cblxuLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG52YXIgc2luZ2xlQXR0cklkZW50aWZpZXIgPSAvKFteXFxzXCInPD4vPV0rKS87XG52YXIgc2luZ2xlQXR0ckFzc2lnbiA9IC8oPzo9KS87XG52YXIgc2luZ2xlQXR0clZhbHVlcyA9IFtcbiAgLy8gYXR0ciB2YWx1ZSBkb3VibGUgcXVvdGVzXG4gIC9cIihbXlwiXSopXCIrLy5zb3VyY2UsXG4gIC8vIGF0dHIgdmFsdWUsIHNpbmdsZSBxdW90ZXNcbiAgLycoW14nXSopJysvLnNvdXJjZSxcbiAgLy8gYXR0ciB2YWx1ZSwgbm8gcXVvdGVzXG4gIC8oW15cXHNcIic9PD5gXSspLy5zb3VyY2Vcbl07XG52YXIgYXR0cmlidXRlID0gbmV3IFJlZ0V4cChcbiAgJ15cXFxccyonICsgc2luZ2xlQXR0cklkZW50aWZpZXIuc291cmNlICtcbiAgJyg/OlxcXFxzKignICsgc2luZ2xlQXR0ckFzc2lnbi5zb3VyY2UgKyAnKScgK1xuICAnXFxcXHMqKD86JyArIHNpbmdsZUF0dHJWYWx1ZXMuam9pbignfCcpICsgJykpPydcbik7XG5cbi8vIGNvdWxkIHVzZSBodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9SRUMteG1sLW5hbWVzLTE5OTkwMTE0LyNOVC1RTmFtZVxuLy8gYnV0IGZvciBWdWUgdGVtcGxhdGVzIHdlIGNhbiBlbmZvcmNlIGEgc2ltcGxlIGNoYXJzZXRcbnZhciBuY25hbWUgPSAnW2EtekEtWl9dW1xcXFx3XFxcXC1cXFxcLl0qJztcbnZhciBxbmFtZUNhcHR1cmUgPSAnKCg/OicgKyBuY25hbWUgKyAnXFxcXDopPycgKyBuY25hbWUgKyAnKSc7XG52YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgnXjwnICsgcW5hbWVDYXB0dXJlKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgnXjxcXFxcLycgKyBxbmFtZUNhcHR1cmUgKyAnW14+XSo+Jyk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xudmFyIGNvbW1lbnQgPSAvXjwhLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG52YXIgSVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTiA9IGZhbHNlO1xuJ3gnLnJlcGxhY2UoL3goLik/L2csIGZ1bmN0aW9uIChtLCBnKSB7XG4gIElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gPSBnID09PSAnJztcbn0pO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1BsYWluVGV4dEVsZW1lbnQgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJ1xufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXApOy9nO1xudmFyIGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMTApOy9nO1xuXG4vLyAjNTk5MlxudmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHNob3VsZElnbm9yZUZpcnN0TmV3bGluZSA9IGZ1bmN0aW9uICh0YWcsIGh0bWwpIHsgcmV0dXJuIHRhZyAmJiBpc0lnbm9yZU5ld2xpbmVUYWcodGFnKSAmJiBodG1sWzBdID09PSAnXFxuJzsgfTtcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gZGVjb2RpbmdNYXBbbWF0Y2hdOyB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGNhbkJlTGVmdE9wZW5UYWckJDEgPSBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1BsYWluVGV4dEVsZW1lbnQobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKGxhc3RUYWcsIGh0bWwpKSB7XG4gICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgICBhZHZhbmNlKHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICAgIGh0bWwgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY2hhcnMgJiYgdGV4dCkge1xuICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0RWxlbWVudChzdGFja2VkVGFnKSAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L2csICckMScpXG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLCAnJDEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YWNrZWRUYWcsIHRleHQpKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnMpIHtcbiAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfSk7XG4gICAgICBpbmRleCArPSBodG1sLmxlbmd0aCAtIHJlc3QkMS5sZW5ndGg7XG4gICAgICBodG1sID0gcmVzdCQxO1xuICAgICAgcGFyc2VFbmRUYWcoc3RhY2tlZFRhZywgaW5kZXggLSBlbmRUYWdMZW5ndGgsIGluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoaHRtbCA9PT0gbGFzdCkge1xuICAgICAgb3B0aW9ucy5jaGFycyAmJiBvcHRpb25zLmNoYXJzKGh0bWwpO1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgIG9wdGlvbnMud2FybigoXCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFxcXCJcIiArIGh0bWwgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goYXR0cmlidXRlKSkpIHtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnJCQxKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICAvLyBoYWNraXNoIHdvcmsgYXJvdW5kIEZGIGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zNjk3NzhcbiAgICAgIGlmIChJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOICYmIGFyZ3NbMF0uaW5kZXhPZignXCJcIicpID09PSAtMSkge1xuICAgICAgICBpZiAoYXJnc1szXSA9PT0gJycpIHsgZGVsZXRlIGFyZ3NbM107IH1cbiAgICAgICAgaWYgKGFyZ3NbNF0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzRdOyB9XG4gICAgICAgIGlmIChhcmdzWzVdID09PSAnJykgeyBkZWxldGUgYXJnc1s1XTsgfVxuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIoXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc1xuICAgICAgICApXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBmb3IgKHBvcyA9IHN0YWNrLmxlbmd0aCAtIDE7IHBvcyA+PSAwOyBwb3MtLSkge1xuICAgICAgICBpZiAoc3RhY2tbcG9zXS5sb3dlckNhc2VkVGFnID09PSBsb3dlckNhc2VkVGFnTmFtZSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm8gdGFnIG5hbWUgaXMgcHJvdmlkZWQsIGNsZWFuIHNob3BcbiAgICAgIHBvcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAvLyBDbG9zZSBhbGwgdGhlIG9wZW4gZWxlbWVudHMsIHVwIHRoZSBzdGFja1xuICAgICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gcG9zOyBpLS0pIHtcbiAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgKGkgPiBwb3MgfHwgIXRhZ05hbWUpICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgZGlyUkUgPSAvXnYtfF5AfF46LztcbnZhciBmb3JBbGlhc1JFID0gLyguKj8pXFxzKyg/OmlufG9mKVxccysoLiopLztcbnZhciBmb3JJdGVyYXRvclJFID0gL1xcKChcXHtbXn1dKlxcfXxbXixdKiksKFteLF0qKSg/OiwoW14sXSopKT9cXCkvO1xuXG52YXIgYXJnUkUgPSAvOiguKikkLztcbnZhciBiaW5kUkUgPSAvXjp8XnYtYmluZDovO1xudmFyIG1vZGlmaWVyUkUgPSAvXFwuW14uXSsvZztcblxudmFyIGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoaGUuZGVjb2RlKTtcblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQyO1xudmFyIGRlbGltaXRlcnM7XG52YXIgdHJhbnNmb3JtcztcbnZhciBwcmVUcmFuc2Zvcm1zO1xudmFyIHBvc3RUcmFuc2Zvcm1zO1xudmFyIHBsYXRmb3JtSXNQcmVUYWc7XG52YXIgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbnZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcblxuLyoqXG4gKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcblxuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciByb290O1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmFyIGluVlByZSA9IGZhbHNlO1xuICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2cpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHdhcm4kMihtc2cpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZFByZSAoZWxlbWVudCkge1xuICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICB3YXJuOiB3YXJuJDIsXG4gICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICBjYW5CZUxlZnRPcGVuVGFnOiBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSkge1xuICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICB2YXIgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAgIHR5cGU6IDEsXG4gICAgICAgIHRhZzogdGFnLFxuICAgICAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgICAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICAgICAgcGFyZW50OiBjdXJyZW50UGFyZW50LFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH07XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDIoXG4gICAgICAgICAgJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcgK1xuICAgICAgICAgICdVSS4gQXZvaWQgcGxhY2luZyB0YWdzIHdpdGggc2lkZS1lZmZlY3RzIGluIHlvdXIgdGVtcGxhdGVzLCBzdWNoIGFzICcgK1xuICAgICAgICAgIFwiPFwiICsgdGFnICsgXCI+XCIgKyAnLCBhcyB0aGV5IHdpbGwgbm90IGJlIHBhcnNlZC4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IHByZS10cmFuc2Zvcm1zXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZVRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpblZQcmUpIHtcbiAgICAgICAgcHJvY2Vzc1ByZShlbGVtZW50KTtcbiAgICAgICAgaWYgKGVsZW1lbnQucHJlKSB7XG4gICAgICAgICAgaW5WUHJlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICAgIGluUHJlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpblZQcmUpIHtcbiAgICAgICAgcHJvY2Vzc1Jhd0F0dHJzKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0tleShlbGVtZW50KTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgcGxhaW4gZWxlbWVudCBhZnRlclxuICAgICAgICAvLyByZW1vdmluZyBzdHJ1Y3R1cmFsIGF0dHJpYnV0ZXNcbiAgICAgICAgZWxlbWVudC5wbGFpbiA9ICFlbGVtZW50LmtleSAmJiAhYXR0cnMubGVuZ3RoO1xuXG4gICAgICAgIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NTbG90KGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0cmFuc2Zvcm1zLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICB0cmFuc2Zvcm1zW2kkMV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGVja1Jvb3RDb25zdHJhaW50cyAoZWwpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgfSBlbHNlIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICAgIGFkZElmQ29uZGl0aW9uKHJvb3QsIHtcbiAgICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgICBibG9jazogZWxlbWVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgICAgXCJ1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7XG4gICAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnNsb3RTY29wZSkgeyAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQucGxhaW4gPSBmYWxzZTtcbiAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnXCJkZWZhdWx0XCInOyhjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzIHx8IChjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzID0ge30pKVtuYW1lXSA9IGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZFByZShlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICBwb3N0VHJhbnNmb3Jtc1tpJDJdKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAoKSB7XG4gICAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBsYXN0Tm9kZSA9IGVsZW1lbnQuY2hpbGRyZW5bZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChsYXN0Tm9kZSAmJiBsYXN0Tm9kZS50eXBlID09PSAzICYmIGxhc3ROb2RlLnRleHQgPT09ICcgJyAmJiAhaW5QcmUpIHtcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgIH1cbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBlbmRQcmUoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAodGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh0ZXh0ID0gdGV4dC50cmltKCkpKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgKFwidGV4dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIG91dHNpZGUgcm9vdCBlbGVtZW50IHdpbGwgYmUgaWdub3JlZC5cIilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gSUUgdGV4dGFyZWEgcGxhY2Vob2xkZXIgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQuYXR0cnNNYXAucGxhY2Vob2xkZXIgPT09IHRleHRcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICB0ZXh0ID0gaW5QcmUgfHwgdGV4dC50cmltKClcbiAgICAgICAgPyBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KVxuICAgICAgICAvLyBvbmx5IHByZXNlcnZlIHdoaXRlc3BhY2UgaWYgaXRzIG5vdCByaWdodCBhZnRlciBhIHN0YXJ0aW5nIHRhZ1xuICAgICAgICA6IHByZXNlcnZlV2hpdGVzcGFjZSAmJiBjaGlsZHJlbi5sZW5ndGggPyAnICcgOiAnJztcbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIHZhciBleHByZXNzaW9uO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKGV4cHJlc3Npb24gPSBwYXJzZVRleHQodGV4dCwgZGVsaW1pdGVycykpKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAyLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgIWNoaWxkcmVuLmxlbmd0aCB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgIHR5cGU6IDMsXG4gICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGwgPSBlbC5hdHRyc0xpc3QubGVuZ3RoO1xuICBpZiAobCkge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogZWwuYXR0cnNMaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShlbC5hdHRyc0xpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm4kMihcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gICAgaWYgKCFpbk1hdGNoKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDIoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApXG4gICAgICApO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVsLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICAgIHZhciBhbGlhcyA9IGluTWF0Y2hbMV0udHJpbSgpO1xuICAgIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICAgIGVsLmFsaWFzID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgICBlbC5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzJdLnRyaW0oKTtcbiAgICAgIGlmIChpdGVyYXRvck1hdGNoWzNdKSB7XG4gICAgICAgIGVsLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbM10udHJpbSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5hbGlhcyA9IGFsaWFzO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWYgKGVsKSB7XG4gIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuICBpZiAoZXhwKSB7XG4gICAgZWwuaWYgPSBleHA7XG4gICAgYWRkSWZDb25kaXRpb24oZWwsIHtcbiAgICAgIGV4cDogZXhwLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnKSAhPSBudWxsKSB7XG4gICAgICBlbC5lbHNlID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGVsc2VpZiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnKTtcbiAgICBpZiAoZWxzZWlmKSB7XG4gICAgICBlbC5lbHNlaWYgPSBlbHNlaWY7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMgKGVsLCBwYXJlbnQpIHtcbiAgdmFyIHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgaWYgKHByZXYgJiYgcHJldi5pZikge1xuICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHtcbiAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgd2FybiQyKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5baV1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UkJDEgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTbG90IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5rZXkpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gICAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcbiAgICB9XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgZWwuc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGlzUHJvcDtcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lKTtcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNQcm9wID0gZmFsc2U7XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3ApIHtcbiAgICAgICAgICAgIGlzUHJvcCA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7XG4gICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgIGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvcCB8fCAoXG4gICAgICAgICAgIWVsLmNvbXBvbmVudCAmJiBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSlcbiAgICAgICAgKSkge1xuICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIpO1xuICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShkaXJSRSwgJycpO1xuICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIHZhciBhcmcgPSBhcmdNYXRjaCAmJiBhcmdNYXRjaFsxXTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyk7XG4gICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgaWQ9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDppZD1cInZhbFwiPi4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgdmFyIHBhcmVudCA9IGVsO1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgdmFyIG1hdGNoID0gbmFtZS5tYXRjaChtb2RpZmllclJFKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0W20uc2xpY2UoMSldID0gdHJ1ZTsgfSk7XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSk7XG4gICAgfVxuICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuLy8gZm9yIHNjcmlwdCAoZS5nLiB0eXBlPVwieC90ZW1wbGF0ZVwiKSBvciBzdHlsZSwgZG8gbm90IGRlY29kZSBjb250ZW50XG5mdW5jdGlvbiBpc1RleHRUYWcgKGVsKSB7XG4gIHJldHVybiBlbC50YWcgPT09ICdzY3JpcHQnIHx8IGVsLnRhZyA9PT0gJ3N0eWxlJ1xufVxuXG5mdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHtcbiAgcmV0dXJuIChcbiAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcbiAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoXG4gICAgICAhZWwuYXR0cnNNYXAudHlwZSB8fFxuICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICApKVxuICApXG59XG5cbnZhciBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xudmFyIGllTlNQcmVmaXggPSAvXk5TXFxkKzovO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICByZXMucHVzaChhdHRyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICB2YXIgX2VsID0gZWw7XG4gIHdoaWxlIChfZWwpIHtcbiAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG4gICAgICAgIFwiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgXCIgK1xuICAgICAgICBcIndyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIFwiICtcbiAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgX2VsID0gX2VsLnBhcmVudDtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGlzU3RhdGljS2V5O1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxudmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gIG1hcmtTdGF0aWMkMShyb290KTtcbiAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEgKGtleXMpIHtcbiAgcmV0dXJuIG1ha2VNYXAoXG4gICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyQxKGNoaWxkKTtcbiAgICAgIGlmICghY2hpbGQuc3RhdGljKSB7XG4gICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIHZhciBibG9jayA9IG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2s7XG4gICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7XG4gICAgICAgIGlmICghYmxvY2suc3RhdGljKSB7XG4gICAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaywgaXNJbkZvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dFxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuICEhKG5vZGUucHJlIHx8IChcbiAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluXG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSlcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IgKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIGlmIChub2RlLnRhZyAhPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmZvcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG52YXIgZm5FeHBSRSA9IC9eXFxzKihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvblxccypcXCgvO1xudmFyIHNpbXBsZVBhdGhSRSA9IC9eXFxzKltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJy4qPyddfFxcW1wiLio/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqXFxzKiQvO1xuXG4vLyBrZXlDb2RlIGFsaWFzZXNcbnZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNwYWNlOiAzMixcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgJ2RlbGV0ZSc6IFs4LCA0Nl1cbn07XG5cbi8vICM0ODY4OiBtb2RpZmllcnMgdGhhdCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGxpc3RlbmVyXG4vLyBuZWVkIHRvIGV4cGxpY2l0bHkgcmV0dXJuIG51bGwgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmVtb3ZlXG4vLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG52YXIgZ2VuR3VhcmQgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiAoXCJpZihcIiArIGNvbmRpdGlvbiArIFwiKXJldHVybiBudWxsO1wiKTsgfTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogZ2VuR3VhcmQoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxcbiAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gIHNoaWZ0OiBnZW5HdWFyZChcIiEkZXZlbnQuc2hpZnRLZXlcIiksXG4gIGFsdDogZ2VuR3VhcmQoXCIhJGV2ZW50LmFsdEtleVwiKSxcbiAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gIGxlZnQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDBcIiksXG4gIG1pZGRsZTogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxcbiAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZSxcbiAgd2FyblxuKSB7XG4gIHZhciByZXMgPSBpc05hdGl2ZSA/ICduYXRpdmVPbjp7JyA6ICdvbjp7JztcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICB2YXIgaGFuZGxlciA9IGV2ZW50c1tuYW1lXTtcbiAgICAvLyAjNTMzMDogd2FybiBjbGljay5yaWdodCwgc2luY2UgcmlnaHQgY2xpY2tzIGRvIG5vdCBhY3R1YWxseSBmaXJlIGNsaWNrIGV2ZW50cy5cbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG5hbWUgPT09ICdjbGljaycgJiZcbiAgICAgIGhhbmRsZXIgJiYgaGFuZGxlci5tb2RpZmllcnMgJiYgaGFuZGxlci5tb2RpZmllcnMucmlnaHRcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiVXNlIFxcXCJjb250ZXh0bWVudVxcXCIgaW5zdGVhZCBvZiBcXFwiY2xpY2sucmlnaHRcXFwiIHNpbmNlIHJpZ2h0IGNsaWNrcyBcIiArXG4gICAgICAgIFwiZG8gbm90IGFjdHVhbGx5IGZpcmUgXFxcImNsaWNrXFxcIiBldmVudHMuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJlcyArPSBcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCI6XCIgKyAoZ2VuSGFuZGxlcihuYW1lLCBoYW5kbGVyKSkgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICd9J1xufVxuXG5mdW5jdGlvbiBnZW5IYW5kbGVyIChcbiAgbmFtZSxcbiAgaGFuZGxlclxuKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiAnZnVuY3Rpb24oKXt9J1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKG5hbWUsIGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG4gIH1cblxuICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgcmV0dXJuIGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgPyBoYW5kbGVyLnZhbHVlXG4gICAgICA6IChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgICAvLyBsZWZ0L3JpZ2h0XG4gICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHtcbiAgICAgIGNvZGUgKz0gZ2VuTW9kaWZpZXJDb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gaGFuZGxlci52YWx1ZSArICcoJGV2ZW50KSdcbiAgICAgIDogaXNGdW5jdGlvbkV4cHJlc3Npb25cbiAgICAgICAgPyAoXCIoXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIikoJGV2ZW50KVwiKVxuICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyBjb2RlICsgaGFuZGxlckNvZGUgKyBcIn1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcImlmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmXCIgKyAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm4gbnVsbDtcIilcbn1cblxuZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICB9XG4gIHZhciBhbGlhcyA9IGtleUNvZGVzW2tleV07XG4gIHJldHVybiAoXCJfaygkZXZlbnQua2V5Q29kZSxcIiArIChKU09OLnN0cmluZ2lmeShrZXkpKSArIChhbGlhcyA/ICcsJyArIEpTT04uc3RyaW5naWZ5KGFsaWFzKSA6ICcnKSArIFwiKVwiKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gb24gKGVsLCBkaXIpIHtcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRpci5tb2RpZmllcnMpIHtcbiAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgfVxuICBlbC53cmFwTGlzdGVuZXJzID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcIl9nKFwiICsgY29kZSArIFwiLFwiICsgKGRpci52YWx1ZSkgKyBcIilcIik7IH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgXCIsXCIgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAndHJ1ZScgOiAnZmFsc2UnKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMuc3luYyA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgb246IG9uLFxuICBiaW5kOiBiaW5kJDEsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxudmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgdGhpcy5kaXJlY3RpdmVzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZURpcmVjdGl2ZXMpLCBvcHRpb25zLmRpcmVjdGl2ZXMpO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcbiAgdGhpcy5vbmNlSWQgPSAwO1xuICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xufTtcblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCwgc3RhdGUpIDogJ19jKFwiZGl2XCIpJztcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkge1xuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3ZvaWQgMCdcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIHJldHVybiBnZW5TbG90KGVsLCBzdGF0ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGF0YSA9IGVsLnBsYWluID8gdW5kZWZpbmVkIDogZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICBjb2RlID0gXCJfYygnXCIgKyAoZWwudGFnKSArIFwiJ1wiICsgKGRhdGEgPyAoXCIsXCIgKyBkYXRhKSA6ICcnKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiO1xuICAgIH1cbiAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUudHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29kZSA9IHN0YXRlLnRyYW5zZm9ybXNbaV0oZWwsIGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29kZVxuICB9XG59XG5cbi8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0XG5mdW5jdGlvbiBnZW5TdGF0aWMgKGVsLCBzdGF0ZSkge1xuICBlbC5zdGF0aWNQcm9jZXNzZWQgPSB0cnVlO1xuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0ZS53YXJuKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgICB9XG4gICAgcmV0dXJuIChcIl9vKFwiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIixcIiArIChzdGF0ZS5vbmNlSWQrKykgKyAoa2V5ID8gKFwiLFwiICsga2V5KSA6IFwiXCIpICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSlcbn1cblxuZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChcbiAgY29uZGl0aW9ucyxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsdEVtcHR5IHx8ICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucywgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSlcbiAgfVxuXG4gIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcbiAgICByZXR1cm4gYWx0R2VuXG4gICAgICA/IGFsdEdlbihlbCwgc3RhdGUpXG4gICAgICA6IGVsLm9uY2VcbiAgICAgICAgPyBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5Gb3IgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0SGVscGVyXG4pIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSAmJlxuICAgIGVsLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgZWwudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgIWVsLmtleVxuICApIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtZm9yPVxcXCJcIiArIGFsaWFzICsgXCIgaW4gXCIgKyBleHAgKyBcIlxcXCI+OiBjb21wb25lbnQgbGlzdHMgcmVuZGVyZWQgd2l0aCBcIiArXG4gICAgICBcInYtZm9yIHNob3VsZCBoYXZlIGV4cGxpY2l0IGtleXMuIFwiICtcbiAgICAgIFwiU2VlIGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2xpc3QuaHRtbCNrZXkgZm9yIG1vcmUgaW5mby5cIixcbiAgICAgIHRydWUgLyogdGlwICovXG4gICAgKTtcbiAgfVxuXG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRhdGEgPSAneyc7XG5cbiAgLy8gZGlyZWN0aXZlcyBmaXJzdC5cbiAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC5cbiAgdmFyIGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsLCBzdGF0ZSk7XG4gIGlmIChkaXJzKSB7IGRhdGEgKz0gZGlycyArICcsJzsgfVxuXG4gIC8vIGtleVxuICBpZiAoZWwua2V5KSB7XG4gICAgZGF0YSArPSBcImtleTpcIiArIChlbC5rZXkpICsgXCIsXCI7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwucmVmSW5Gb3IpIHtcbiAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgfVxuICAvLyBwcmVcbiAgaWYgKGVsLnByZSkge1xuICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBcInRhZzpcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIjtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IHN0YXRlLmRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBcImF0dHJzOntcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCJ9LFwiO1xuICB9XG4gIC8vIERPTSBwcm9wc1xuICBpZiAoZWwucHJvcHMpIHtcbiAgICBkYXRhICs9IFwiZG9tUHJvcHM6e1wiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyBcIn0sXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UsIHN0YXRlLndhcm4pKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUsIHN0YXRlLndhcm4pKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIGlmIChlbC5zbG90VGFyZ2V0KSB7XG4gICAgZGF0YSArPSBcInNsb3Q6XCIgKyAoZWwuc2xvdFRhcmdldCkgKyBcIixcIjtcbiAgfVxuICAvLyBzY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwuc2NvcGVkU2xvdHMsIHN0YXRlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBjb21wb25lbnQgdi1tb2RlbFxuICBpZiAoZWwubW9kZWwpIHtcbiAgICBkYXRhICs9IFwibW9kZWw6e3ZhbHVlOlwiICsgKGVsLm1vZGVsLnZhbHVlKSArIFwiLGNhbGxiYWNrOlwiICsgKGVsLm1vZGVsLmNhbGxiYWNrKSArIFwiLGV4cHJlc3Npb246XCIgKyAoZWwubW9kZWwuZXhwcmVzc2lvbikgKyBcIn0sXCI7XG4gIH1cbiAgLy8gaW5saW5lLXRlbXBsYXRlXG4gIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsLCBzdGF0ZSk7XG4gICAgaWYgKGlubGluZVRlbXBsYXRlKSB7XG4gICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICAvLyB2LW9uIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcExpc3RlbmVycykge1xuICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgc3RhdGUud2Fybik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1J1bnRpbWUpIHtcbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCwgc3RhdGUpIHtcbiAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdO1xuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgYXN0LnR5cGUgIT09IDFcbiAgKSkge1xuICAgIHN0YXRlLndhcm4oJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicpO1xuICB9XG4gIGlmIChhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgc3RhdGVcbikge1xuICByZXR1cm4gKFwic2NvcGVkU2xvdHM6X3UoW1wiICsgKE9iamVjdC5rZXlzKHNsb3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGdlblNjb3BlZFNsb3Qoa2V5LCBzbG90c1trZXldLCBzdGF0ZSlcbiAgICB9KS5qb2luKCcsJykpICsgXCJdKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAga2V5LFxuICBlbCxcbiAgc3RhdGVcbikge1xuICBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yU2NvcGVkU2xvdChrZXksIGVsLCBzdGF0ZSlcbiAgfVxuICByZXR1cm4gXCJ7a2V5OlwiICsga2V5ICsgXCIsZm46ZnVuY3Rpb24oXCIgKyAoU3RyaW5nKGVsLmF0dHJzTWFwLnNjb3BlKSkgKyBcIil7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgPyBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd2b2lkIDAnXG4gICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIn19XCJcbn1cblxuZnVuY3Rpb24gZ2VuRm9yU2NvcGVkU2xvdCAoXG4gIGtleSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIFwiX2woKFwiICsgZXhwICsgXCIpLFwiICtcbiAgICBcImZ1bmN0aW9uKFwiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyBcIil7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAoZ2VuU2NvcGVkU2xvdChrZXksIGVsLCBzdGF0ZSkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkNoaWxkcmVuIChcbiAgZWwsXG4gIHN0YXRlLFxuICBjaGVja1NraXAsXG4gIGFsdEdlbkVsZW1lbnQsXG4gIGFsdEdlbk5vZGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgZWwkMS5mb3IgJiZcbiAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnXG4gICAgKSB7XG4gICAgICByZXR1cm4gKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpXG4gICAgfVxuICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSA9IGNoZWNrU2tpcFxuICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpXG4gICAgICA6IDA7XG4gICAgdmFyIGdlbiA9IGFsdEdlbk5vZGUgfHwgZ2VuTm9kZTtcbiAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gZ2VuKGMsIHN0YXRlKTsgfSkuam9pbignLCcpKSArIFwiXVwiICsgKG5vcm1hbGl6YXRpb25UeXBlID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUpIDogJycpKVxuICB9XG59XG5cbi8vIGRldGVybWluZSB0aGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgZm9yIHRoZSBjaGlsZHJlbiBhcnJheS5cbi8vIDA6IG5vIG5vcm1hbGl6YXRpb24gbmVlZGVkXG4vLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG4vLyAyOiBmdWxsIG5vcm1hbGl6YXRpb24gbmVlZGVkXG5mdW5jdGlvbiBnZXROb3JtYWxpemF0aW9uVHlwZSAoXG4gIGNoaWxkcmVuLFxuICBtYXliZUNvbXBvbmVudFxuKSB7XG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGVsLnR5cGUgIT09IDEpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChuZWVkc05vcm1hbGl6YXRpb24oZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG5lZWRzTm9ybWFsaXphdGlvbihjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAyO1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKG1heWJlQ29tcG9uZW50KGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBtYXliZUNvbXBvbmVudChjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5lZWRzTm9ybWFsaXphdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGVsLmZvciAhPT0gdW5kZWZpbmVkIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyB8fCBlbC50YWcgPT09ICdzbG90J1xufVxuXG5mdW5jdGlvbiBnZW5Ob2RlIChub2RlLCBzdGF0ZSkge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGdlbkVsZW1lbnQobm9kZSwgc3RhdGUpXG4gIH0gaWYgKG5vZGUudHlwZSA9PT0gMyAmJiBub2RlLmlzQ29tbWVudCkge1xuICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblRleHQobm9kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG4gIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNvbW1lbnQgKGNvbW1lbnQpIHtcbiAgcmV0dXJuIChcIl9lKFwiICsgKEpTT04uc3RyaW5naWZ5KGNvbW1lbnQudGV4dCkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblNsb3QgKGVsLCBzdGF0ZSkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCwgc3RhdGUpO1xuICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICB2YXIgYXR0cnMgPSBlbC5hdHRycyAmJiAoXCJ7XCIgKyAoZWwuYXR0cnMubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiAoKGNhbWVsaXplKGEubmFtZSkpICsgXCI6XCIgKyAoYS52YWx1ZSkpOyB9KS5qb2luKCcsJykpICsgXCJ9XCIpO1xuICB2YXIgYmluZCQkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQnXTtcbiAgaWYgKChhdHRycyB8fCBiaW5kJCQxKSAmJiAhY2hpbGRyZW4pIHtcbiAgICByZXMgKz0gXCIsbnVsbFwiO1xuICB9XG4gIGlmIChhdHRycykge1xuICAgIHJlcyArPSBcIixcIiArIGF0dHJzO1xuICB9XG4gIGlmIChiaW5kJCQxKSB7XG4gICAgcmVzICs9IChhdHRycyA/ICcnIDogJyxudWxsJykgKyBcIixcIiArIGJpbmQkJDE7XG4gIH1cbiAgcmV0dXJuIHJlcyArICcpJ1xufVxuXG4vLyBjb21wb25lbnROYW1lIGlzIGVsLmNvbXBvbmVudCwgdGFrZSBpdCBhcyBhcmd1bWVudCB0byBzaHVuIGZsb3cncyBwZXNzaW1pc3RpYyByZWZpbmVtZW50XG5mdW5jdGlvbiBnZW5Db21wb25lbnQgKFxuICBjb21wb25lbnROYW1lLFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICByZXR1cm4gKFwiX2MoXCIgKyBjb21wb25lbnROYW1lICsgXCIsXCIgKyAoZ2VuRGF0YSQyKGVsLCBzdGF0ZSkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblByb3BzIChwcm9wcykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHJlcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgKHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKSkgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxufVxuXG4vLyAjMzg5NSwgIzQyNjhcbmZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKVxuICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxufVxuXG4vKiAgKi9cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuXG4vLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xudmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkZWxldGUsdHlwZW9mLHZvaWQnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuLy8gY2hlY2sgdmFsaWQgaWRlbnRpZmllciBmb3Igdi1mb3JcbnZhciBpZGVudFJFID0gL1tBLVphLXpfJF1bXFx3JF0qLztcblxuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0KSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgaWYgKGFzdCkge1xuICAgIGNoZWNrTm9kZShhc3QsIGVycm9ycyk7XG4gIH1cbiAgcmV0dXJuIGVycm9yc1xufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIGVycm9ycykge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIGVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGNoZWNrRXZlbnQodmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIGVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgZXJyb3JzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgZXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCBlcnJvcnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXZlbnQgKGV4cCwgdGV4dCwgZXJyb3JzKSB7XG4gIHZhciBzdGlwcGVkID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpO1xuICB2YXIga2V5d29yZE1hdGNoID0gc3RpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdGlwcGVkLmNoYXJBdChrZXl3b3JkTWF0Y2guaW5kZXggLSAxKSAhPT0gJyQnKSB7XG4gICAgZXJyb3JzLnB1c2goXG4gICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKVxuICAgICk7XG4gIH1cbiAgY2hlY2tFeHByZXNzaW9uKGV4cCwgdGV4dCwgZXJyb3JzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIGVycm9ycykge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIGVycm9ycyk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCBlcnJvcnMpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIGVycm9ycyk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgZXJyb3JzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyIChpZGVudCwgdHlwZSwgdGV4dCwgZXJyb3JzKSB7XG4gIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnICYmICFpZGVudFJFLnRlc3QoaWRlbnQpKSB7XG4gICAgZXJyb3JzLnB1c2goKFwiaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgZXJyb3JzKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICBlcnJvcnMucHVzaChcbiAgICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiIGluIGV4cHJlc3Npb24gXCIgKyAodGV4dC50cmltKCkpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvcnMucHVzaCgoXCJpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSkpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24gKGNvZGUsIGVycm9ycykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICByZXR1cm4gbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4gKGNvbXBpbGUpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zLFxuICAgIHZtXG4gICkge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAge1xuICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgICAnVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGNhbm5vdCB3b3JrIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyICcgK1xuICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjaGVjayBjYWNoZVxuICAgIHZhciBrZXkgPSBvcHRpb25zLmRlbGltaXRlcnNcbiAgICAgID8gU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVycykgKyB0ZW1wbGF0ZVxuICAgICAgOiB0ZW1wbGF0ZTtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIGNhY2hlW2tleV1cbiAgICB9XG5cbiAgICAvLyBjb21waWxlXG4gICAgdmFyIGNvbXBpbGVkID0gY29tcGlsZSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAvLyBjaGVjayBjb21waWxhdGlvbiBlcnJvcnMvdGlwc1xuICAgIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICBjb21waWxlZC5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoXCItIFwiICsgZSk7IH0pLmpvaW4oJ1xcbicpICsgJ1xcbicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21waWxlZC50aXBzICYmIGNvbXBpbGVkLnRpcHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbXBpbGVkLnRpcHMuZm9yRWFjaChmdW5jdGlvbiAobXNnKSB7IHJldHVybiB0aXAobXNnLCB2bSk7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIHtcbiAgICAgIGlmICgoIWNvbXBpbGVkLmVycm9ycyB8fCAhY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkgJiYgZm5HZW5FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmVuZGVyIGZ1bmN0aW9uOlxcblxcblwiICtcbiAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGVyciA9IHJlZi5lcnI7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHJlZi5jb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXJDcmVhdG9yIChiYXNlQ29tcGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXIgKGJhc2VPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciBmaW5hbE9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zKTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0aXBzID0gW107XG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IGZ1bmN0aW9uIChtc2csIHRpcCkge1xuICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChtc2cpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIG1vZHVsZXNcbiAgICAgICAgaWYgKG9wdGlvbnMubW9kdWxlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5tb2R1bGVzID1cbiAgICAgICAgICAgIChiYXNlT3B0aW9ucy5tb2R1bGVzIHx8IFtdKS5jb25jYXQob3B0aW9ucy5tb2R1bGVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gZGlyZWN0aXZlc1xuICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLmRpcmVjdGl2ZXMgPSBleHRlbmQoXG4gICAgICAgICAgICBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zLmRpcmVjdGl2ZXMpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY29tcGlsZWQgPSBiYXNlQ29tcGlsZSh0ZW1wbGF0ZSwgZmluYWxPcHRpb25zKTtcbiAgICAgIHtcbiAgICAgICAgZXJyb3JzLnB1c2guYXBwbHkoZXJyb3JzLCBkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0KSk7XG4gICAgICB9XG4gICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICBjb21waWxlZC50aXBzID0gdGlwcztcbiAgICAgIHJldHVybiBjb21waWxlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBjb21waWxlLFxuICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBgY3JlYXRlQ29tcGlsZXJDcmVhdG9yYCBhbGxvd3MgY3JlYXRpbmcgY29tcGlsZXJzIHRoYXQgdXNlIGFsdGVybmF0aXZlXG4vLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4vLyBIZXJlIHdlIGp1c3QgZXhwb3J0IGEgZGVmYXVsdCBjb21waWxlciB1c2luZyB0aGUgZGVmYXVsdCBwYXJ0cy5cbnZhciBjcmVhdGVDb21waWxlciA9IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcihmdW5jdGlvbiBiYXNlQ29tcGlsZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4vKiAgKi9cblxudmFyIGlkVG9UZW1wbGF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIGVsID0gcXVlcnkoaWQpO1xuICByZXR1cm4gZWwgJiYgZWwuaW5uZXJIVE1MXG59KTtcblxudmFyIG1vdW50ID0gVnVlJDMucHJvdG90eXBlLiRtb3VudDtcblZ1ZSQzLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIHF1ZXJ5KGVsKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5IHx8IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgKFwiVGVtcGxhdGUgZWxlbWVudCBub3QgZm91bmQgb3IgaXMgZW1wdHk6IFwiICsgKG9wdGlvbnMudGVtcGxhdGUpKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5pbm5lckhUTUw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnModGVtcGxhdGUsIHtcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgICBkZWxpbWl0ZXJzOiBvcHRpb25zLmRlbGltaXRlcnMsXG4gICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKCgodGhpcy5fbmFtZSkgKyBcIiBjb21waWxlXCIpLCAnY29tcGlsZScsICdjb21waWxlIGVuZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLyoqXG4gKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICogb2YgU1ZHIGVsZW1lbnRzIGluIElFIGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgaWYgKGVsLm91dGVySFRNTCkge1xuICAgIHJldHVybiBlbC5vdXRlckhUTUxcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgfVxufVxuXG5WdWUkMy5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5yZXR1cm4gVnVlJDM7XG5cbn0pKSk7XG4iXX0=
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],33:[function(require,module,exports){
(function (process){
/**
 * vuex v2.4.0
 * (c) 2017 Evan You
 * @license MIT
 */
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var applyMixin = function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};

      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit() {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function' ? options.store() : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
};

var devtoolHook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {
    return;
  }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */

/**
 * forEach for object
 */
function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {
    return fn(obj[key], key);
  });
}

function isObject(obj) {
  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {
    throw new Error("[vuex] " + msg);
  }
}

var Module = function Module(rawModule, runtime) {
  this.runtime = runtime;
  this._children = Object.create(null);
  this._rawModule = rawModule;
  var rawState = rawModule.state;
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors$1 = { namespaced: {} };

prototypeAccessors$1.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors$1);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if (process.env.NODE_ENV !== 'production') {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  if (!parent.getChild(key).runtime) {
    return;
  }

  parent.removeChild(key);
};

function update(path, targetModule, newModule) {
  if (process.env.NODE_ENV !== 'production') {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (process.env.NODE_ENV !== 'production') {
          console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
        }
        return;
      }
      update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
  }
}

function assertRawModule(path, rawModule) {
  ['getters', 'actions', 'mutations'].forEach(function (key) {
    if (!rawModule[key]) {
      return;
    }

    forEachValue(rawModule[key], function (value, type) {
      assert(typeof value === 'function', makeAssertionMessage(path, key, type, value));
    });
  });
}

function makeAssertionMessage(path, key, type, value) {
  var buf = key + " should be function but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }
  buf += " is " + JSON.stringify(value) + ".";

  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {};

  if (process.env.NODE_ENV !== 'production') {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "Store must be called with the new operator.");
  }

  var plugins = options.plugins;if (plugins === void 0) plugins = [];
  var strict = options.strict;if (strict === void 0) strict = false;

  var state = options.state;if (state === void 0) state = {};
  if (typeof state === 'function') {
    state = state();
  }

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };
  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  };

  // strict mode
  this.strict = strict;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) {
    return plugin(this$1);
  });

  if (Vue.config.devtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors = { state: {} };

prototypeAccessors.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors.state.set = function (v) {
  if (process.env.NODE_ENV !== 'production') {
    assert(false, "Use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if (process.env.NODE_ENV !== 'production') {
      console.error("[vuex] unknown mutation type: " + type);
    }
    return;
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });
  this._subscribers.forEach(function (sub) {
    return sub(mutation, this$1.state);
  });

  if (process.env.NODE_ENV !== 'production' && options && options.silent) {
    console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;

  var entry = this._actions[type];
  if (!entry) {
    if (process.env.NODE_ENV !== 'production') {
      console.error("[vuex] unknown action type: " + type);
    }
    return;
  }
  return entry.length > 1 ? Promise.all(entry.map(function (handler) {
    return handler(payload);
  })) : entry[0](payload);
};

Store.prototype.subscribe = function subscribe(fn) {
  var subs = this._subscribers;
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  };
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if (process.env.NODE_ENV !== 'production') {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () {
    return getter(this$1.state, this$1.getters);
  }, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule) {
  if (typeof path === 'string') {
    path = [path];
  }

  if (process.env.NODE_ENV !== 'production') {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path));
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {
    path = [path];
  }

  if (process.env.NODE_ENV !== 'production') {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors);

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    computed[key] = function () {
      return fn(store);
    };
    Object.defineProperty(store.getters, key, {
      get: function get() {
        return store._vm[key];
      },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () {
      return oldVm.$destroy();
    });
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var namespacedType = namespace + key;
    registerAction(store, namespacedType, action, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (process.env.NODE_ENV !== 'production' && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (process.env.NODE_ENV !== 'production' && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace ? function () {
        return store.getters;
      } : function () {
        return makeLocalGetters(store, namespace);
      }
    },
    state: {
      get: function get() {
        return getNestedState(store.state, path);
      }
    }
  });

  return local;
}

function makeLocalGetters(store, namespace) {
  var gettersProxy = {};

  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) {
      return;
    }

    // extract local getter type
    var localType = type.slice(splitPos);

    // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.
    Object.defineProperty(gettersProxy, localType, {
      get: function get() {
        return store.getters[type];
      },
      enumerable: true
    });
  });

  return gettersProxy;
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (process.env.NODE_ENV !== 'production') {
      console.error("[vuex] duplicate getter key: " + type);
    }
    return;
  }
  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {
    return this._data.$$state;
  }, function () {
    if (process.env.NODE_ENV !== 'production') {
      assert(store._committing, "Do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState(state, path) {
  return path.length ? path.reduce(function (state, key) {
    return state[key];
  }, state) : state;
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (process.env.NODE_ENV !== 'production') {
    assert(typeof type === 'string', "Expects string as the type, but found " + (typeof type === 'undefined' ? 'undefined' : _typeof(type)) + ".");
  }

  return { type: type, payload: payload, options: options };
}

function install(_Vue) {
  if (Vue) {
    if (process.env.NODE_ENV !== 'production') {
      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');
    }
    return;
  }
  Vue = _Vue;
  applyMixin(Vue);
}

// auto install in dist mode
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return;
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function' ? val.call(this, state, getters) : state[val];
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res;
});

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    val = namespace + val;
    res[key] = function mappedMutation() {
      var args = [],
          len = arguments.length;
      while (len--) {
        args[len] = arguments[len];
      }if (namespace && !getModuleByNamespace(this.$store, 'mapMutations', namespace)) {
        return;
      }
      return this.$store.commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    val = namespace + val;
    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }
      if (process.env.NODE_ENV !== 'production' && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }
      return this.$store.getters[val];
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res;
});

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    val = namespace + val;
    res[key] = function mappedAction() {
      var args = [],
          len = arguments.length;
      while (len--) {
        args[len] = arguments[len];
      }if (namespace && !getModuleByNamespace(this.$store, 'mapActions', namespace)) {
        return;
      }
      return this.$store.dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});

var createNamespacedHelpers = function createNamespacedHelpers(namespace) {
  return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  };
};

function normalizeMap(map) {
  return Array.isArray(map) ? map.map(function (key) {
    return { key: key, val: key };
  }) : Object.keys(map).map(function (key) {
    return { key: key, val: map[key] };
  });
}

function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map);
  };
}

function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (process.env.NODE_ENV !== 'production' && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }
  return module;
}

var index = {
  Store: Store,
  install: install,
  version: '2.4.0',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};

module.exports = index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("e/U+97"))
},{"e/U+97":29}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.api = exports.base_url = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

require('url-search-params-polyfill');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base URL to make request to.
 * 
 * @type {String}
 */
var base_url = exports.base_url = _config2.default.database.server;

/**
 * Create a new axios instance.
 * 
 * @type {axios}
 */
var api = exports.api = _axios2.default.create({
    baseURL: base_url,
    timeout: 1000
});

var Request = function () {
    /**
     * Create a new instance.
     * 
     * @param  {String} resource 
     * @constructor
     */
    function Request(resource) {
        _classCallCheck(this, Request);

        this._params = new URLSearchParams();

        this._resource = resource;

        this._id = false;

        this._data = {};
    }

    /**
     * Set a resource id.
     * 
     * @param {Boolean|Integer} id
     */


    _createClass(Request, [{
        key: 'id',
        value: function id() {
            var _id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            this._id = _id;

            return this;
        }

        /**
         * Add a constraint to query.
         * 
         * @param  {String} attribute 
         * @param  {String} condition 
         * @param  {mixed} value     
         * @return {Request}     
         */

    }, {
        key: 'where',
        value: function where(attribute) {
            var condition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (condition !== false && value === false) {
                value = condition;
                condition = false;
            }

            if (condition == '>=') {
                this.param(attribute + '_gte', value);
            } else if (condition == '<=') {
                this.param(attribute + '_lte', value);
            } else if (condition == '!=') {
                this.param(attribute + '_ne', value);
            } else if (condition == 'like') {
                this.param(attribute + '_like', value);
            } else {
                this.param(attribute, value);
            }

            return this;
        }

        /**
         * Add a param.
         * 
         * @param  {String} attribute 
         * @param  {mixed} value     
         * @return {Request}           
         */

    }, {
        key: 'param',
        value: function param(attribute, value) {
            this._params.append(attribute, value);

            return this;
        }

        /**
         * Add params.
         * 
         * @param  {Array} params
         * @return {Request}
         */

    }, {
        key: 'params',
        value: function params() {
            for (var i = 0, l = arguments.length - 1; i < l; i += 2) {
                this._params.append(arguments.length <= i ? undefined : arguments[i], arguments.length <= i + 1 ? undefined : arguments[i + 1]);
            }

            return this;
        }

        /**
         * Set resource.
         * 
         * @param {String} value
         * @return {Request} 
         */

    }, {
        key: 'resource',
        value: function resource(value) {
            this._resource = value;

            return this;
        }

        /**
         * Set data.
         * 
         * @param {Object} value
         * @return {Request}
         */

    }, {
        key: 'data',
        value: function data() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this._data = value;

            return this;
        }

        /**
         * Set a relation
         * 
         * @param  {Boolean|String} value
         * @return {Request}
         */

    }, {
        key: 'with',
        value: function _with() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            this._params.set('_embed', value);

            return this;
        }

        /**
         * Sort by the field
         * 
         * @param  {String} field
         * @param  {String} type
         * @return {Request}
         */

    }, {
        key: 'order',
        value: function order(field) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';

            this._params.set('_sort', field);

            this._params.set('_order', type);

            return this;
        }

        /**
         * Set the limit.
         * 
         * @param  {Number} limits
         * @return {Request}
         */

    }, {
        key: 'limit',
        value: function limit() {
            var limits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;

            this._params.set('_limit', limits);

            return this;
        }

        /**
         * Set the start the records should be fetched from.
         * 
         * @param  {Number} from
         * @return {Request}      
         */

    }, {
        key: 'from',
        value: function from() {
            var _from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            this._params.set('_start', _from);

            return this;
        }

        /**
         * Set the finish the records should be fetched to.
         * 
         * @param  {Number} to 
         * @return {Request}    
         */

    }, {
        key: 'to',
        value: function to() {
            var _to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;

            this._params.set('_end', _to);

            return this;
        }

        /**
         * Make a get request.
         * 
         * @return {Promise} 
         */

    }, {
        key: 'get',
        value: function get() {
            return this.query('get');
        }

        /**
         * Make a post request.
         * 
         * @return {Promise} 
         */

    }, {
        key: 'create',
        value: function create() {
            return this.query('post');
        }

        /**
         * Make a delete request.
         * 
         * @return {Promise} 
         */

    }, {
        key: 'delete',
        value: function _delete() {
            return this.query('delete');
        }

        /**
         * Make a put request.
         * 
         * @return {Promise} 
         */

    }, {
        key: 'edit',
        value: function edit() {
            return this.query('put');
        }

        /**
         * Make a request.
         *
         * @param {String} type 
         * @return {Promise} 
         */

    }, {
        key: 'query',
        value: function query(type) {
            return api[type](this.getURL(), this._data);
        }

        /**
         * Get a request url.
         * 
         * @return {String} 
         */

    }, {
        key: 'getURL',
        value: function getURL() {
            var url = this._resource;

            if (this._id) {
                url += '/' + this._id;
            }

            return url + '?' + this._params.toString();
        }

        /**
         * Create an instance.
         * 
         * @return {Request} 
         */

    }], [{
        key: 'create',
        value: function create() {
            return new this();
        }
    }]);

    return Request;
}();

exports.default = Request;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./config":41,"axios":1,"url-search-params-polyfill":30}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _api = require('../../api');

var _api2 = _interopRequireDefault(_api);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = {
    template: '#message-create-template',

    props: ['fingerprint', 'postId'],

    data: function data() {
        return {
            form: {
                name: '',
                text: '',
                userId: null,
                postId: this.postId
            },
            errors: [],
            rendered: false,
            busy: false
        };
    },
    created: function created() {
        if (!this.fingerprint) {
            return this.getFingerPrint();
        }

        this.form.userId = this.fingerprint;
    },


    watch: _defineProperty({}, 'form.userId', function formUserId(val) {
        this.rendered = true;
    }),

    methods: {
        /**
         * A submitting handler. Validate data and if there's no errors, make the request.
         * 
         * @return {avoid} 
         */
        submit: function submit() {
            this.errors = [];

            if (this.form.name.trim() == '') {
                this.errors.push('The input name is required.');
            }
            if (this.form.text.trim() == '') {
                this.errors.push('The input name is required.');
            }
            if (typeof this.form.postId === 'undefined') {
                this.errors.push('The post id is required.');
            }

            if (!this.errors.length) {
                this.post();
            }
        },


        /**
         * Make a request to create a new comment.
         * 
         * @return {avoid} 
         */
        post: function post() {
            var _this = this;

            this.bust = true;

            _api2.default.create().resource('comments').data(this.form).create().then(function (_ref) {
                var data = _ref.data;

                _this.$emit('commentCreated', data);

                _this.busy = false;

                _this.form.name = '';
                _this.form.text = '';
            }).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Get fingerprint of the user's browser.
         * 
         * @return {avoid} 
         */
        getFingerPrint: function getFingerPrint() {
            var _this2 = this;

            _helpers.Fingerprint.get(function (fingerprint) {
                _this2.form.userId = fingerprint;
            });
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS5qcyJdLCJuYW1lcyI6WyJ0ZW1wbGF0ZSIsInByb3BzIiwiZGF0YSIsImZvcm0iLCJuYW1lIiwidGV4dCIsInVzZXJJZCIsInBvc3RJZCIsImVycm9ycyIsInJlbmRlcmVkIiwiYnVzeSIsImNyZWF0ZWQiLCJmaW5nZXJwcmludCIsImdldEZpbmdlclByaW50Iiwid2F0Y2giLCJ2YWwiLCJtZXRob2RzIiwic3VibWl0IiwidHJpbSIsInB1c2giLCJsZW5ndGgiLCJwb3N0IiwiYnVzdCIsImNyZWF0ZSIsInJlc291cmNlIiwidGhlbiIsIiRlbWl0IiwiY2F0Y2giLCJnZXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztrQkFFZTtBQUNYQSxjQUFVLDBCQURDOztBQUdYQyxXQUFPLENBQUMsYUFBRCxFQUFnQixRQUFoQixDQUhJOztBQUtYQyxRQUxXLGtCQUtIO0FBQ0osZUFBTztBQUNIQyxrQkFBTTtBQUNGQyxzQkFBTSxFQURKO0FBRUZDLHNCQUFNLEVBRko7QUFHRkMsd0JBQVEsSUFITjtBQUlGQyx3QkFBUSxLQUFLQTtBQUpYLGFBREg7QUFPSEMsb0JBQVEsRUFQTDtBQVFIQyxzQkFBVSxLQVJQO0FBU0hDLGtCQUFNO0FBVEgsU0FBUDtBQVdILEtBakJVO0FBbUJYQyxXQW5CVyxxQkFtQkE7QUFDUCxZQUFHLENBQUMsS0FBS0MsV0FBVCxFQUFzQjtBQUNsQixtQkFBTyxLQUFLQyxjQUFMLEVBQVA7QUFDSDs7QUFFRCxhQUFLVixJQUFMLENBQVVHLE1BQVYsR0FBbUIsS0FBS00sV0FBeEI7QUFDSCxLQXpCVTs7O0FBMkJYRSwrQkFDSyxhQURMLHNCQUNxQkMsR0FEckIsRUFDMEI7QUFDbEIsYUFBS04sUUFBTCxHQUFnQixJQUFoQjtBQUNILEtBSEwsQ0EzQlc7O0FBaUNYTyxhQUFTO0FBQ0w7Ozs7O0FBS0FDLGNBTkssb0JBTUs7QUFDTixpQkFBS1QsTUFBTCxHQUFjLEVBQWQ7O0FBRUEsZ0JBQUcsS0FBS0wsSUFBTCxDQUFVQyxJQUFWLENBQWVjLElBQWYsTUFBeUIsRUFBNUIsRUFBZ0M7QUFDNUIscUJBQUtWLE1BQUwsQ0FBWVcsSUFBWixDQUFpQiw2QkFBakI7QUFDSDtBQUNELGdCQUFHLEtBQUtoQixJQUFMLENBQVVFLElBQVYsQ0FBZWEsSUFBZixNQUF5QixFQUE1QixFQUFnQztBQUM1QixxQkFBS1YsTUFBTCxDQUFZVyxJQUFaLENBQWlCLDZCQUFqQjtBQUNIO0FBQ0QsZ0JBQUcsT0FBTyxLQUFLaEIsSUFBTCxDQUFVSSxNQUFqQixLQUE0QixXQUEvQixFQUE0QztBQUN4QyxxQkFBS0MsTUFBTCxDQUFZVyxJQUFaLENBQWlCLDBCQUFqQjtBQUNIOztBQUVELGdCQUFHLENBQUMsS0FBS1gsTUFBTCxDQUFZWSxNQUFoQixFQUF3QjtBQUNwQixxQkFBS0MsSUFBTDtBQUNIO0FBQ0osU0F0Qkk7OztBQXdCTDs7Ozs7QUFLQUEsWUE3Qkssa0JBNkJHO0FBQUE7O0FBQ0osaUJBQUtDLElBQUwsR0FBWSxJQUFaOztBQUVBLDBCQUFRQyxNQUFSLEdBQ0tDLFFBREwsQ0FDYyxVQURkLEVBRUt0QixJQUZMLENBRVUsS0FBS0MsSUFGZixFQUdLb0IsTUFITCxHQUlLRSxJQUpMLENBSVUsZ0JBQVk7QUFBQSxvQkFBVnZCLElBQVUsUUFBVkEsSUFBVTs7QUFDZCxzQkFBS3dCLEtBQUwsQ0FBVyxnQkFBWCxFQUE2QnhCLElBQTdCOztBQUVBLHNCQUFLUSxJQUFMLEdBQVksS0FBWjs7QUFFQSxzQkFBS1AsSUFBTCxDQUFVQyxJQUFWLEdBQWlCLEVBQWpCO0FBQ0Esc0JBQUtELElBQUwsQ0FBVUUsSUFBVixHQUFpQixFQUFqQjtBQUNILGFBWEwsRUFZS3NCLEtBWkwsQ0FZVyxzQ0FaWDtBQWFILFNBN0NJOzs7QUErQ0w7Ozs7O0FBS0FkLHNCQXBESyw0QkFvRGE7QUFBQTs7QUFDZCxpQ0FBWWUsR0FBWixDQUFnQix1QkFBZTtBQUMzQix1QkFBS3pCLElBQUwsQ0FBVUcsTUFBVixHQUFtQk0sV0FBbkI7QUFDSCxhQUZEO0FBR0g7QUF4REk7QUFqQ0UsQyIsImZpbGUiOiJjcmVhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVxdWVzdCBmcm9tICcuLi8uLi9hcGknXHJcbmltcG9ydCB7IEZpbmdlcnByaW50LCBzaG91bGRDYXRjaFRocm93bkVycm9yIH0gZnJvbSAnLi4vLi4vaGVscGVycydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHRlbXBsYXRlOiAnI21lc3NhZ2UtY3JlYXRlLXRlbXBsYXRlJyxcclxuXHJcbiAgICBwcm9wczogWydmaW5nZXJwcmludCcsICdwb3N0SWQnXSxcclxuXHJcbiAgICBkYXRhICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmb3JtOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgdXNlcklkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcG9zdElkOiB0aGlzLnBvc3RJZFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcnM6IFtdLFxyXG4gICAgICAgICAgICByZW5kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGJ1c3k6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVkICgpIHtcclxuICAgICAgICBpZighdGhpcy5maW5nZXJwcmludCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGaW5nZXJQcmludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mb3JtLnVzZXJJZCA9IHRoaXMuZmluZ2VycHJpbnQ7XHJcbiAgICB9LFxyXG5cclxuICAgIHdhdGNoOiB7XHJcbiAgICAgICAgWydmb3JtLnVzZXJJZCddICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBzdWJtaXR0aW5nIGhhbmRsZXIuIFZhbGlkYXRlIGRhdGEgYW5kIGlmIHRoZXJlJ3Mgbm8gZXJyb3JzLCBtYWtlIHRoZSByZXF1ZXN0LlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4ge2F2b2lkfSBcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJtaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5mb3JtLm5hbWUudHJpbSgpID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKCdUaGUgaW5wdXQgbmFtZSBpcyByZXF1aXJlZC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0aGlzLmZvcm0udGV4dC50cmltKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goJ1RoZSBpbnB1dCBuYW1lIGlzIHJlcXVpcmVkLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLmZvcm0ucG9zdElkID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaCgnVGhlIHBvc3QgaWQgaXMgcmVxdWlyZWQuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmVycm9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFrZSBhIHJlcXVlc3QgdG8gY3JlYXRlIGEgbmV3IGNvbW1lbnQuXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiB7YXZvaWR9IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvc3QgKCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1c3QgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgUmVxdWVzdC5jcmVhdGUoKVxyXG4gICAgICAgICAgICAgICAgLnJlc291cmNlKCdjb21tZW50cycpXHJcbiAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLmZvcm0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjb21tZW50Q3JlYXRlZCcsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtLm5hbWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0udGV4dCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChzaG91bGRDYXRjaFRocm93bkVycm9yKCkpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0IGZpbmdlcnByaW50IG9mIHRoZSB1c2VyJ3MgYnJvd3Nlci5cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIHthdm9pZH0gXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RmluZ2VyUHJpbnQgKCkge1xyXG4gICAgICAgICAgICBGaW5nZXJwcmludC5nZXQoZmluZ2VycHJpbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtLnVzZXJJZCA9IGZpbmdlcnByaW50O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==
},{"../../api":34,"../../helpers":43}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _api = require('../../api');

var _api2 = _interopRequireDefault(_api);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    template: '#message-template',

    props: ['comment', 'fingerprint'],

    data: function data() {
        return {
            mode: 'show',
            form: {
                text: this.comment.text,
                error: false
            },
            deleting: false,
            updating: false,
            userId: null
        };
    },


    computed: {
        /**
         * Determine if the comment belongs to the user.
         * 
         * @return {Boolean} 
         */
        belongsToMe: function belongsToMe() {
            return this.userId == this.comment.userId;
        },


        /**
         * Determine if the comment in the seeable mode.
         * 
         * @return {Boolean} 
         */
        seeable: function seeable() {
            return this.mode == 'show';
        },


        /**
         * Determine if the comment in the editable mode.
         * 
         * @return {[type]} [description]
         */
        editable: function editable() {
            return this.mode == 'edit';
        }
    },

    created: function created() {
        if (!this.fingerprint) {
            return this.getFingerPrint();
        }

        this.userId = this.fingerprint;
    },


    methods: {
        /**
         * Handler of the comment's updating requests.
         * 
         * @return {avoid} 
         */
        edit: function edit() {
            this.form.error = false;

            if (this.form.text.trim() == '') {
                return this.form.error = true;
            }

            this.updating = true;

            this.update();
        },


        /**
         * Make a request to update the comment.
         * 
         * @return {avoid} 
         */
        update: function update() {
            _api2.default.create().resource('comments').id(this.comment.id).data(_extends({}, this.comment, {
                text: this.form.text
            })).edit().then(this.updated).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Called when a request is successfully done.
         * 
         * @param  {Object} options.data 
         * @return {avoid}              
         */
        updated: function updated(_ref) {
            var data = _ref.data;

            this.$emit('commentChanged', data);

            this.mode = 'show';

            this.updating = false;
        },


        /**
         * Handler of removing requests.
         * 
         * @return {avoid} 
         */
        remove: function remove() {
            if (confirm('Are you sure?') === false) {
                return false;
            }

            this.deleting = true;

            _api2.default.create().resource('comments').id(this.comment.id).delete().then(this.removed).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Called when the commen has been deleted.
         * 
         * @return {avoid} 
         */
        removed: function removed() {
            this.deleting = false;

            this.$emit('commentDeleted', this.comment);
        },


        /**
         * Keys handler.
         * 
         * @param  {Object} e
         * @return {avoid}
         */
        submit: function submit(e) {
            if (e.keyCode === 13 && !e.shiftKey) {
                e.preventDefault();

                this.edit();
            }
        },


        /**
         * Switch to show mode and set the message to the previous value.
         * 
         * @param  {Object} e 
         * @return {avoid}   
         */
        clear: function clear(e) {
            e.preventDefault();

            this.form.text = this.comment.text;

            this.mode = 'show';
        },


        /**
         * Get a fingerprint of the user's browser.
         * 
         * @return {avoid} 
         */
        getFingerPrint: function getFingerPrint() {
            var _this = this;

            _helpers.Fingerprint.get(function (fingerprint) {
                _this.userId = fingerprint;
            });
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../api":34,"../../helpers":43}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _vuex = require('vuex');

exports.default = {
    template: '#feed-template',

    data: function data() {
        return {
            new_posts: false,
            loaded: false,
            busy: false
        };
    },
    mounted: function mounted() {
        if (this.state.posts.length) {
            return this.onLoaded();
        }

        this.busy = true;

        this.getNextPage().then(this.onLoaded);
    },


    methods: _extends({
        onLoaded: function onLoaded() {
            this.$store.commit('loading/disable');

            this.loaded = true;

            this.busy = false;
        },
        nextPage: function nextPage() {
            var _this = this;

            this.busy = true;

            this.getNextPage().then(function () {
                return _this.busy = false;
            });
        }
    }, (0, _vuex.mapActions)({
        'getNextPage': 'posts/getNextPage'
    })),

    computed: _extends({}, (0, _vuex.mapState)({
        state: function state(_state) {
            return _state.posts;
        }
    }))
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlZWQuanMiXSwibmFtZXMiOlsidGVtcGxhdGUiLCJkYXRhIiwibmV3X3Bvc3RzIiwibG9hZGVkIiwiYnVzeSIsIm1vdW50ZWQiLCJzdGF0ZSIsInBvc3RzIiwibGVuZ3RoIiwib25Mb2FkZWQiLCJnZXROZXh0UGFnZSIsInRoZW4iLCJtZXRob2RzIiwiJHN0b3JlIiwiY29tbWl0IiwibmV4dFBhZ2UiLCJjb21wdXRlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7a0JBRWU7QUFDWEEsY0FBVSxnQkFEQzs7QUFHWEMsUUFIVyxrQkFHSDtBQUNKLGVBQU87QUFDSEMsdUJBQVcsS0FEUjtBQUVIQyxvQkFBUSxLQUZMO0FBR0hDLGtCQUFNO0FBSEgsU0FBUDtBQUtILEtBVFU7QUFXWEMsV0FYVyxxQkFXQTtBQUNQLFlBQUcsS0FBS0MsS0FBTCxDQUFXQyxLQUFYLENBQWlCQyxNQUFwQixFQUE0QjtBQUN4QixtQkFBTyxLQUFLQyxRQUFMLEVBQVA7QUFDSDs7QUFFRCxhQUFLTCxJQUFMLEdBQVksSUFBWjs7QUFFQSxhQUFLTSxXQUFMLEdBQ0tDLElBREwsQ0FDVSxLQUFLRixRQURmO0FBRUgsS0FwQlU7OztBQXNCWEc7QUFDSUgsZ0JBREosc0JBQ2dCO0FBQ1IsaUJBQUtJLE1BQUwsQ0FBWUMsTUFBWixDQUFtQixpQkFBbkI7O0FBRUEsaUJBQUtYLE1BQUwsR0FBYyxJQUFkOztBQUVBLGlCQUFLQyxJQUFMLEdBQVksS0FBWjtBQUNILFNBUEw7QUFTSVcsZ0JBVEosc0JBU2dCO0FBQUE7O0FBQ1IsaUJBQUtYLElBQUwsR0FBWSxJQUFaOztBQUVBLGlCQUFLTSxXQUFMLEdBQ0tDLElBREwsQ0FDVTtBQUFBLHVCQUFNLE1BQUtQLElBQUwsR0FBWSxLQUFsQjtBQUFBLGFBRFY7QUFFSDtBQWRMLE9BZ0JPLHNCQUFXO0FBQ1YsdUJBQWU7QUFETCxLQUFYLENBaEJQLENBdEJXOztBQTJDWFksMkJBQ08sb0JBQVM7QUFDUlYsZUFBTztBQUFBLG1CQUFTQSxPQUFNQyxLQUFmO0FBQUE7QUFEQyxLQUFULENBRFA7QUEzQ1csQyIsImZpbGUiOiJmZWVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwU3RhdGUsIG1hcEdldHRlcnMsIG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgdGVtcGxhdGU6ICcjZmVlZC10ZW1wbGF0ZScsXHJcblxyXG4gICAgZGF0YSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmV3X3Bvc3RzOiBmYWxzZSxcclxuICAgICAgICAgICAgbG9hZGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgYnVzeTogZmFsc2UsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBtb3VudGVkICgpIHtcclxuICAgICAgICBpZih0aGlzLnN0YXRlLnBvc3RzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vbkxvYWRlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5nZXROZXh0UGFnZSgpXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMub25Mb2FkZWQpXHJcbiAgICB9LFxyXG5cclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBvbkxvYWRlZCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnbG9hZGluZy9kaXNhYmxlJylcclxuXHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5leHRQYWdlICgpIHtcclxuICAgICAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0TmV4dFBhZ2UoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5idXN5ID0gZmFsc2UpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLi4ubWFwQWN0aW9ucyh7XHJcbiAgICAgICAgICAgICdnZXROZXh0UGFnZSc6ICdwb3N0cy9nZXROZXh0UGFnZSdcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuXHJcbiAgICBjb21wdXRlZDoge1xyXG4gICAgICAgIC4uLm1hcFN0YXRlKHtcclxuICAgICAgICAgICAgc3RhdGU6IHN0YXRlID0+IHN0YXRlLnBvc3RzXHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcbn0iXX0=
},{"vuex":33}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dynamics = require('dynamics.js');

var _dynamics2 = _interopRequireDefault(_dynamics);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    data: function data() {
        return {
            opened: this.$store.state.loading.busy,
            queue: new _helpers.Queue()
        };
    },


    computed: {
        loading: function loading() {
            return this.$store.state.loading.busy;
        }
    },

    mounted: function mounted() {
        var _this = this;

        this.$nextTick(function () {
            return _this.boot();
        });
    },


    watch: {
        loading: function loading() {
            var _this2 = this;

            this.$nextTick(function () {
                return _this2.boot();
            });
        }
    },

    methods: {
        /**
         * Called when the 'loading' variable changed.
         * 
         * @return {avoid} 
         */
        boot: function boot() {
            scrollTo(0, 0);

            if (this.loading) {
                return this.open();
            }

            this.close();
        },


        /**
         * Called when the 'loading' set to true.
         * 
         * @return {avoid} 
         */
        open: function open() {
            var _this3 = this;

            this.opened = true;

            this.queue.add(function (done) {
                return _this3.logoPopUp(done);
            });
        },


        /**
         * Called when the 'loading' variable set to false.
         * 
         * @return {avoid} 
         */
        close: function close() {
            var _this4 = this;

            this.queue.add(function (done) {
                return _this4.logoPopOut(done);
            });
        },


        /**
         * Pop up the logo.
         * 
         * @param  {Function} done
         * @return {avoid}        
         */
        logoPopUp: function logoPopUp(done) {
            _dynamics2.default.animate(this.$el.getElementsByTagName('figure')[0], {
                scale: 1.6
            }, {
                type: _dynamics2.default.spring,
                duration: 500,
                complete: done
            });
        },


        /**
         * Pop out the logo.
         * 
         * @param  {Function} done
         * @return {avoid}
         */
        logoPopOut: function logoPopOut(done) {
            var _this5 = this;

            _dynamics2.default.animate(this.$el.getElementsByTagName('figure')[0], {
                scale: 1
            }, {
                type: _dynamics2.default.easeIn,
                duration: 400,
                complete: function complete() {
                    return done(_this5.opened = false);
                }
            });
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ28uanMiXSwibmFtZXMiOlsiZGF0YSIsIm9wZW5lZCIsIiRzdG9yZSIsInN0YXRlIiwibG9hZGluZyIsImJ1c3kiLCJxdWV1ZSIsImNvbXB1dGVkIiwibW91bnRlZCIsIiRuZXh0VGljayIsImJvb3QiLCJ3YXRjaCIsIm1ldGhvZHMiLCJzY3JvbGxUbyIsIm9wZW4iLCJjbG9zZSIsImFkZCIsImxvZ29Qb3BVcCIsImRvbmUiLCJsb2dvUG9wT3V0IiwiYW5pbWF0ZSIsIiRlbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NhbGUiLCJ0eXBlIiwic3ByaW5nIiwiZHVyYXRpb24iLCJjb21wbGV0ZSIsImVhc2VJbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztrQkFFZTtBQUNYQSxRQURXLGtCQUNIO0FBQ0osZUFBTztBQUNIQyxvQkFBUSxLQUFLQyxNQUFMLENBQVlDLEtBQVosQ0FBa0JDLE9BQWxCLENBQTBCQyxJQUQvQjtBQUVIQyxtQkFBTztBQUZKLFNBQVA7QUFJSCxLQU5VOzs7QUFRWEMsY0FBVTtBQUNOSCxlQURNLHFCQUNLO0FBQ1AsbUJBQU8sS0FBS0YsTUFBTCxDQUFZQyxLQUFaLENBQWtCQyxPQUFsQixDQUEwQkMsSUFBakM7QUFDSDtBQUhLLEtBUkM7O0FBY1hHLFdBZFcscUJBY0E7QUFBQTs7QUFDUCxhQUFLQyxTQUFMLENBQWU7QUFBQSxtQkFBTSxNQUFLQyxJQUFMLEVBQU47QUFBQSxTQUFmO0FBQ0gsS0FoQlU7OztBQWtCWEMsV0FBTztBQUNIUCxlQURHLHFCQUNRO0FBQUE7O0FBQ1AsaUJBQUtLLFNBQUwsQ0FBZTtBQUFBLHVCQUFNLE9BQUtDLElBQUwsRUFBTjtBQUFBLGFBQWY7QUFDSDtBQUhFLEtBbEJJOztBQXdCWEUsYUFBUztBQUNMOzs7OztBQUtBRixZQU5LLGtCQU1HO0FBQ0pHLHFCQUFTLENBQVQsRUFBWSxDQUFaOztBQUVBLGdCQUFHLEtBQUtULE9BQVIsRUFBaUI7QUFDYix1QkFBTyxLQUFLVSxJQUFMLEVBQVA7QUFDSDs7QUFFRCxpQkFBS0MsS0FBTDtBQUNILFNBZEk7OztBQWdCTDs7Ozs7QUFLQUQsWUFyQkssa0JBcUJHO0FBQUE7O0FBQ0osaUJBQUtiLE1BQUwsR0FBYyxJQUFkOztBQUVBLGlCQUFLSyxLQUFMLENBQVdVLEdBQVgsQ0FBZTtBQUFBLHVCQUFRLE9BQUtDLFNBQUwsQ0FBZUMsSUFBZixDQUFSO0FBQUEsYUFBZjtBQUNILFNBekJJOzs7QUEyQkw7Ozs7O0FBS0FILGFBaENLLG1CQWdDSTtBQUFBOztBQUNMLGlCQUFLVCxLQUFMLENBQVdVLEdBQVgsQ0FBZTtBQUFBLHVCQUFRLE9BQUtHLFVBQUwsQ0FBZ0JELElBQWhCLENBQVI7QUFBQSxhQUFmO0FBQ0gsU0FsQ0k7OztBQW9DTDs7Ozs7O0FBTUFELGlCQTFDSyxxQkEwQ01DLElBMUNOLEVBMENZO0FBQ2IsK0JBQVNFLE9BQVQsQ0FBaUIsS0FBS0MsR0FBTCxDQUFTQyxvQkFBVCxDQUE4QixRQUE5QixFQUF3QyxDQUF4QyxDQUFqQixFQUE2RDtBQUN6REMsdUJBQU87QUFEa0QsYUFBN0QsRUFFRztBQUNDQyxzQkFBTSxtQkFBU0MsTUFEaEI7QUFFQ0MsMEJBQVUsR0FGWDtBQUdDQywwQkFBVVQ7QUFIWCxhQUZIO0FBT0gsU0FsREk7OztBQW9ETDs7Ozs7O0FBTUFDLGtCQTFESyxzQkEwRE9ELElBMURQLEVBMERhO0FBQUE7O0FBQ2QsK0JBQVNFLE9BQVQsQ0FBaUIsS0FBS0MsR0FBTCxDQUFTQyxvQkFBVCxDQUE4QixRQUE5QixFQUF3QyxDQUF4QyxDQUFqQixFQUE2RDtBQUN6REMsdUJBQU87QUFEa0QsYUFBN0QsRUFFRztBQUNDQyxzQkFBTSxtQkFBU0ksTUFEaEI7QUFFQ0YsMEJBQVUsR0FGWDtBQUdDQywwQkFBVTtBQUFBLDJCQUFNVCxLQUFLLE9BQUtqQixNQUFMLEdBQWMsS0FBbkIsQ0FBTjtBQUFBO0FBSFgsYUFGSDtBQU9IO0FBbEVJO0FBeEJFLEMiLCJmaWxlIjoibG9nby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkeW5hbWljcyBmcm9tICdkeW5hbWljcy5qcydcclxuaW1wb3J0IHsgUXVldWUgfSBmcm9tICcuLi9oZWxwZXJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgZGF0YSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb3BlbmVkOiB0aGlzLiRzdG9yZS5zdGF0ZS5sb2FkaW5nLmJ1c3ksXHJcbiAgICAgICAgICAgIHF1ZXVlOiBuZXcgUXVldWUoKSxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgbG9hZGluZyAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5sb2FkaW5nLmJ1c3k7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBtb3VudGVkICgpIHtcclxuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLmJvb3QoKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHdhdGNoOiB7XHJcbiAgICAgICAgbG9hZGluZyAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHRoaXMuYm9vdCgpKTtcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlICdsb2FkaW5nJyB2YXJpYWJsZSBjaGFuZ2VkLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4ge2F2b2lkfSBcclxuICAgICAgICAgKi9cclxuICAgICAgICBib290ICgpIHtcclxuICAgICAgICAgICAgc2Nyb2xsVG8oMCwgMCk7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLmxvYWRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW4oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSAnbG9hZGluZycgc2V0IHRvIHRydWUuXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiB7YXZvaWR9IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wZW4gKCkge1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5lZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmFkZChkb25lID0+IHRoaXMubG9nb1BvcFVwKGRvbmUpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgJ2xvYWRpbmcnIHZhcmlhYmxlIHNldCB0byBmYWxzZS5cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIHthdm9pZH0gXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xvc2UgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmFkZChkb25lID0+IHRoaXMubG9nb1BvcE91dChkb25lKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUG9wIHVwIHRoZSBsb2dvLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBkb25lXHJcbiAgICAgICAgICogQHJldHVybiB7YXZvaWR9ICAgICAgICBcclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2dvUG9wVXAgKGRvbmUpIHtcclxuICAgICAgICAgICAgZHluYW1pY3MuYW5pbWF0ZSh0aGlzLiRlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZmlndXJlJylbMF0sIHtcclxuICAgICAgICAgICAgICAgIHNjYWxlOiAxLjYsXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGR5bmFtaWNzLnNwcmluZyxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZG9uZVxyXG4gICAgICAgICAgICB9KSBcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQb3Agb3V0IHRoZSBsb2dvLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBkb25lXHJcbiAgICAgICAgICogQHJldHVybiB7YXZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbG9nb1BvcE91dCAoZG9uZSkge1xyXG4gICAgICAgICAgICBkeW5hbWljcy5hbmltYXRlKHRoaXMuJGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmaWd1cmUnKVswXSwge1xyXG4gICAgICAgICAgICAgICAgc2NhbGU6IDEsXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGR5bmFtaWNzLmVhc2VJbixcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA0MDAsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT4gZG9uZSh0aGlzLm9wZW5lZCA9IGZhbHNlKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==
},{"../helpers":43,"dynamics.js":26}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _api = require('../../api');

var _api2 = _interopRequireDefault(_api);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = {
    template: '#post-create-template',

    data: function data() {
        return {
            form: {
                title: '',
                text: '',
                userId: ''
            },
            loading: false,
            errors: []
        };
    },


    watch: _defineProperty({}, 'form.userId', function formUserId() {
        this.$store.commit('loading/disable');
    }),

    methods: {
        /**
         * Handler of the user's request to create a post.
         * 
         * @return {avoid} 
         */
        post: function post() {
            this.$set(this, 'errors', []);

            if (this.form.title.trim() == '') {
                this.errors.push('The title input is required.');
            }

            if (this.form.text.trim() == '') {
                this.errors.push('The text input is required.');
            }

            if (!this.errors.length) {
                this.request();
            }
        },


        /**
         * Make a request to create a new post.
         * 
         * @return {avoid} 
         */
        request: function request() {
            var _this = this;

            this.loading = true;

            _api2.default.create().resource('posts').data(this.form).create().then(function (_ref) {
                var data = _ref.data;

                _this.loading = false;

                _this.$store.commit('posts/push', data);

                _this.$router.push({ path: '/post/' + data.id });
            }).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Register a fingerprint of the user's browser.
         * 
         * @return {avoid} 
         */
        signUp: function signUp() {
            var _this2 = this;

            _helpers.Fingerprint.get(function (fingerprint) {
                _this2.form.userId = fingerprint;
            });
        }
    },

    created: function created() {
        this.signUp();
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS5qcyJdLCJuYW1lcyI6WyJ0ZW1wbGF0ZSIsImRhdGEiLCJmb3JtIiwidGl0bGUiLCJ0ZXh0IiwidXNlcklkIiwibG9hZGluZyIsImVycm9ycyIsIndhdGNoIiwiJHN0b3JlIiwiY29tbWl0IiwibWV0aG9kcyIsInBvc3QiLCIkc2V0IiwidHJpbSIsInB1c2giLCJsZW5ndGgiLCJyZXF1ZXN0IiwiY3JlYXRlIiwicmVzb3VyY2UiLCJ0aGVuIiwiJHJvdXRlciIsInBhdGgiLCJpZCIsImNhdGNoIiwic2lnblVwIiwiZ2V0IiwiZmluZ2VycHJpbnQiLCJjcmVhdGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7a0JBRWU7QUFDWEEsY0FBVSx1QkFEQzs7QUFHWEMsUUFIVyxrQkFHSDtBQUNKLGVBQU87QUFDSEMsa0JBQU07QUFDRkMsdUJBQU8sRUFETDtBQUVGQyxzQkFBTSxFQUZKO0FBR0ZDLHdCQUFRO0FBSE4sYUFESDtBQU1IQyxxQkFBUyxLQU5OO0FBT0hDLG9CQUFRO0FBUEwsU0FBUDtBQVNILEtBYlU7OztBQWVYQywrQkFDSyxhQURMLHdCQUN1QjtBQUNmLGFBQUtDLE1BQUwsQ0FBWUMsTUFBWixDQUFtQixpQkFBbkI7QUFDSCxLQUhMLENBZlc7O0FBcUJYQyxhQUFTO0FBQ0w7Ozs7O0FBS0FDLFlBTkssa0JBTUc7QUFDSixpQkFBS0MsSUFBTCxDQUFVLElBQVYsRUFBZ0IsUUFBaEIsRUFBMEIsRUFBMUI7O0FBRUEsZ0JBQUcsS0FBS1gsSUFBTCxDQUFVQyxLQUFWLENBQWdCVyxJQUFoQixNQUEwQixFQUE3QixFQUFpQztBQUM3QixxQkFBS1AsTUFBTCxDQUFZUSxJQUFaLENBQWlCLDhCQUFqQjtBQUNIOztBQUVELGdCQUFHLEtBQUtiLElBQUwsQ0FBVUUsSUFBVixDQUFlVSxJQUFmLE1BQXlCLEVBQTVCLEVBQWdDO0FBQzVCLHFCQUFLUCxNQUFMLENBQVlRLElBQVosQ0FBaUIsNkJBQWpCO0FBQ0g7O0FBRUQsZ0JBQUcsQ0FBQyxLQUFLUixNQUFMLENBQVlTLE1BQWhCLEVBQXdCO0FBQ3BCLHFCQUFLQyxPQUFMO0FBQ0g7QUFDSixTQXBCSTs7O0FBc0JMOzs7OztBQUtBQSxlQTNCSyxxQkEyQk07QUFBQTs7QUFDUCxpQkFBS1gsT0FBTCxHQUFlLElBQWY7O0FBRUEsMEJBQVFZLE1BQVIsR0FDS0MsUUFETCxDQUNjLE9BRGQsRUFFS2xCLElBRkwsQ0FFVSxLQUFLQyxJQUZmLEVBR0tnQixNQUhMLEdBSUtFLElBSkwsQ0FJVSxnQkFBWTtBQUFBLG9CQUFWbkIsSUFBVSxRQUFWQSxJQUFVOztBQUNkLHNCQUFLSyxPQUFMLEdBQWUsS0FBZjs7QUFFQSxzQkFBS0csTUFBTCxDQUFZQyxNQUFaLENBQW1CLFlBQW5CLEVBQWlDVCxJQUFqQzs7QUFFQSxzQkFBS29CLE9BQUwsQ0FBYU4sSUFBYixDQUFrQixFQUFFTyxpQkFBZXJCLEtBQUtzQixFQUF0QixFQUFsQjtBQUNILGFBVkwsRUFXS0MsS0FYTCxDQVdXLHNDQVhYO0FBWUgsU0ExQ0k7OztBQTRDTDs7Ozs7QUFLQUMsY0FqREssb0JBaURLO0FBQUE7O0FBQ04saUNBQVlDLEdBQVosQ0FBZ0IsdUJBQWU7QUFDM0IsdUJBQUt4QixJQUFMLENBQVVHLE1BQVYsR0FBbUJzQixXQUFuQjtBQUNILGFBRkQ7QUFHSDtBQXJESSxLQXJCRTs7QUE2RVhDLFdBN0VXLHFCQTZFQTtBQUNQLGFBQUtILE1BQUw7QUFDSDtBQS9FVSxDIiwiZmlsZSI6ImNyZWF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXF1ZXN0IGZyb20gJy4uLy4uL2FwaSdcclxuaW1wb3J0IHsgRmluZ2VycHJpbnQsIHNob3VsZENhdGNoVGhyb3duRXJyb3IgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgdGVtcGxhdGU6ICcjcG9zdC1jcmVhdGUtdGVtcGxhdGUnLFxyXG5cclxuICAgIGRhdGEgKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZvcm06IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgdXNlcklkOiAnJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICB3YXRjaDoge1xyXG4gICAgICAgIFsnZm9ybS51c2VySWQnXSAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnbG9hZGluZy9kaXNhYmxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlciBvZiB0aGUgdXNlcidzIHJlcXVlc3QgdG8gY3JlYXRlIGEgcG9zdC5cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIHthdm9pZH0gXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9zdCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLCAnZXJyb3JzJywgW10pO1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5mb3JtLnRpdGxlLnRyaW0oKSA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaCgnVGhlIHRpdGxlIGlucHV0IGlzIHJlcXVpcmVkLicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLmZvcm0udGV4dC50cmltKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goJ1RoZSB0ZXh0IGlucHV0IGlzIHJlcXVpcmVkLicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZighdGhpcy5lcnJvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIGNyZWF0ZSBhIG5ldyBwb3N0LlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4ge2F2b2lkfSBcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXF1ZXN0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIFJlcXVlc3QuY3JlYXRlKClcclxuICAgICAgICAgICAgICAgIC5yZXNvdXJjZSgncG9zdHMnKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEodGhpcy5mb3JtKVxyXG4gICAgICAgICAgICAgICAgLmNyZWF0ZSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoe2RhdGF9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgncG9zdHMvcHVzaCcsIGRhdGEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsgcGF0aDogYC9wb3N0LyR7ZGF0YS5pZH1gIH0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKHNob3VsZENhdGNoVGhyb3duRXJyb3IoKSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWdpc3RlciBhIGZpbmdlcnByaW50IG9mIHRoZSB1c2VyJ3MgYnJvd3Nlci5cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIHthdm9pZH0gXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2lnblVwICgpIHtcclxuICAgICAgICAgICAgRmluZ2VycHJpbnQuZ2V0KGZpbmdlcnByaW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybS51c2VySWQgPSBmaW5nZXJwcmludDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlZCAoKSB7XHJcbiAgICAgICAgdGhpcy5zaWduVXAoKTtcclxuICAgIH0sXHJcbn0iXX0=
},{"../../api":34,"../../helpers":43}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _api = require('../../api');

var _api2 = _interopRequireDefault(_api);

var _comment = require('../comment');

var _comment2 = _interopRequireDefault(_comment);

var _create = require('../comment/create');

var _create2 = _interopRequireDefault(_create);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    template: '#post-template',

    data: function data() {
        return {
            post: {},

            mode: 'show',

            deleting: false,

            form: {
                title: '',
                text: '',
                errors: [],
                busy: false
            },

            userId: null,

            loadStatus: {
                fingerprint: false,
                rendered: false,
                data: false
            }
        };
    },


    computed: {
        /**
         * Determine whether the component is ready.
         * 
         * @return {Boolean}
         */
        loaded: function loaded() {
            return this.loadStatus.fingerprint && this.loadStatus.rendered && this.loadStatus.data;
        },


        /**
         * Determine if the post belongs to the user.
         * 
         * @return {Boolean} 
         */
        belongsToMe: function belongsToMe() {
            return this.post.userId == this.userId;
        },


        /**
         * Get the sorted comments.
         * 
         * @return {Array}
         */
        comments: function comments() {
            return this.post.comments.sort(function (a, b) {
                return b.id - a.id;
            });
        },


        /**
         * Determine if the post in the seeable mode.
         * 
         * @return {Boolean} 
         */
        seeable: function seeable() {
            return this.mode == 'show';
        },


        /**
         * Determine if the post in the editable mode.
         * 
         * @return {Boolean} 
         */
        editable: function editable() {
            return this.mode == 'edit';
        }
    },

    watch: {
        loaded: function loaded(_loaded) {
            if (_loaded) {
                this.$store.commit('loading/disable');
            }
        },
        post: function post(value) {
            this.form.title = value.title;
            this.form.text = value.text;
        }
    },

    created: function created() {
        this.getFingerPrint();

        this.getPost(this.$store.getters['posts/getPostById'](this.$route.params.id));
    },
    mounted: function mounted() {
        this.loadStatus.rendered = true;
    },


    methods: {
        /**
         * Handler of the user's requests to edit the post.
         * 
         * @return {avoid} 
         */
        edit: function edit() {
            this.form.errors = [];

            if (this.form.title.trim() == '') {
                this.form.errors.push('The title input is required.');
            }

            if (this.form.text.trim() == '') {
                this.form.errors.push('The text input is required.');
            }

            if (!this.form.errors.length) {
                this.update();
            }
        },


        /**
         * Make a request to update the post.
         * 
         * @return {avoid}
         */
        update: function update() {
            this.form.busy = true;

            _api2.default.create().resource('posts').id(this.post.id).data(_extends({}, this.post, {
                title: this.form.title,
                text: this.form.text
            })).edit().then(this.updated).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Called when the post has been updated.
         * 
         * @param  {Object} options.data 
         * @return {avoid}              
         */
        updated: function updated(_ref) {
            var data = _ref.data;

            this.post.title = data.title;
            this.post.text = data.text;

            this.busy = false;

            this.mode = 'show';
        },


        /**
         * Handler of the user's request to update the post.
         * 
         * @return {avoid} 
         */
        remove: function remove() {
            var _this = this;

            if (confirm('Are you sure?') === false) {
                return false;
            }

            _api2.default.create().resource('posts').id(this.post.id).delete().then(function (_ref2) {
                var data = _ref2.data;

                _this.$store.commit('posts/delete', _this.post.id);

                _this.$router.push({
                    path: '/'
                });
            });
        },


        /**
         * Get the post if it's not loaded yet, and get the comments.
         * 
         * @param  {Object|Boolean} post
         * @return {Promise}
         */
        getPost: function getPost() {
            var post = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (typeof post !== 'undefined' && post !== false) {
                this.post = post;

                return this.getOnlyComments();
            }

            return this.getFullPost();
        },


        /**
         * Get the post and the comments.
         * 
         * @return {Promise} 
         */
        getFullPost: function getFullPost() {
            var _this2 = this;

            return _api2.default.create().resource('posts').with('comments').id(this.$route.params.id).get().then(function (_ref3) {
                var data = _ref3.data;
                return _this2.post = data;
            }).then(function () {
                return _this2.loadStatus.data = true;
            }).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Get the comments of the post.
         * 
         * @return {Promise} 
         */
        getOnlyComments: function getOnlyComments() {
            var _this3 = this;

            return _api2.default.create().resource('comments').where('postId', this.post.id).get().then(function (_ref4) {
                var data = _ref4.data;
                return _this3.post.comments = data;
            }).then(function () {
                return _this3.loadStatus.data = true;
            }).catch((0, _helpers.shouldCatchThrownError)());
        },


        /**
         * Called when a comment has been changed.
         * 
         * @param  {Object} changedComment 
         * @return {avoid}                
         */
        commentChanged: function commentChanged(changedComment) {
            var comment = this.post.comments.find(function (e) {
                return e.id == changedComment.id;
            });

            comment.text = changedComment.text;
        },


        /**
         * Called when a comment has been deleted.
         * 
         * @param  {Object} deletedComment 
         * @return {avoid}                
         */
        commentDeleted: function commentDeleted(deletedComment) {
            this.post.comments.splice(this.post.comments.findIndex(function (e) {
                return e.id == deletedComment.id;
            }), 1);
        },


        /**
         * Called when a comment has been created.
         * 
         * @param  {Object} createdComment 
         * @return {avoid}                
         */
        commentCreated: function commentCreated(createdComment) {
            this.post.comments.push(createdComment);
        },


        /**
         * Get and register a fingerprint of the user's browser.
         * 
         * @return {avoid} 
         */
        getFingerPrint: function getFingerPrint() {
            var _this4 = this;

            _helpers.Fingerprint.get(function (fingerprint) {
                _this4.userId = fingerprint;

                _this4.loadStatus.fingerprint = true;
            });
        }
    },

    components: {
        'comment': _comment2.default,
        'comment-create-form': _create2.default
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../api":34,"../../helpers":43,"../comment":36,"../comment/create":35}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    database: {
        "server": "http://192.168.1.34:8585/"
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJkYXRhYmFzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQWU7QUFDWEEsY0FBVTtBQUNOLGtCQUFVO0FBREo7QUFEQyxDIiwiZmlsZSI6ImNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGRhdGFiYXNlOiB7XHJcbiAgICAgICAgXCJzZXJ2ZXJcIjogXCJodHRwOi8vMTkyLjE2OC4xLjM0Ojg1ODUvXCJcclxuICAgIH1cclxufSJdfQ==
},{}],42:[function(require,module,exports){
'use strict';

var _vue = require('vue/dist/vue.js');

var _vue2 = _interopRequireDefault(_vue);

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _logo = require('./components/logo');

var _logo2 = _interopRequireDefault(_logo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.config.productionTip = false;

new _vue2.default({
    el: '#app',
    router: _router2.default,
    store: _store2.default,
    watch: {
        '$route': function $route(to, from) {
            this.$store.commit('loading/enable');
        }
    },
    components: {
        logo: _logo2.default
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfMzNhYjExMzguanMiXSwibmFtZXMiOlsiY29uZmlnIiwicHJvZHVjdGlvblRpcCIsImVsIiwicm91dGVyIiwic3RvcmUiLCJ3YXRjaCIsInRvIiwiZnJvbSIsIiRzdG9yZSIsImNvbW1pdCIsImNvbXBvbmVudHMiLCJsb2dvIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7QUFFQSxjQUFJQSxNQUFKLENBQVdDLGFBQVgsR0FBMkIsS0FBM0I7O0FBRUEsa0JBQVE7QUFDSkMsUUFBSSxNQURBO0FBRUpDLDRCQUZJO0FBR0pDLDBCQUhJO0FBSUpDLFdBQU87QUFDSCxrQkFBVSxnQkFBVUMsRUFBVixFQUFjQyxJQUFkLEVBQW9CO0FBQzFCLGlCQUFLQyxNQUFMLENBQVlDLE1BQVosQ0FBbUIsZ0JBQW5CO0FBQ0g7QUFIRSxLQUpIO0FBU0pDLGdCQUFZO0FBQ1JDO0FBRFE7QUFUUixDQUFSIiwiZmlsZSI6ImZha2VfMzNhYjExMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuL3JvdXRlcidcclxuaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUnXHJcblxyXG5pbXBvcnQgTG9nbyBmcm9tICcuL2NvbXBvbmVudHMvbG9nbydcclxuXHJcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXHJcblxyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI2FwcCcsXHJcbiAgICByb3V0ZXIsXHJcbiAgICBzdG9yZSxcclxuICAgIHdhdGNoOiB7XHJcbiAgICAgICAgJyRyb3V0ZSc6IGZ1bmN0aW9uICh0bywgZnJvbSkge1xyXG4gICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2xvYWRpbmcvZW5hYmxlJylcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29tcG9uZW50czoge1xyXG4gICAgICAgIGxvZ286IExvZ28sXHJcbiAgICB9XHJcbn0pIl19
},{"./components/logo":38,"./router":44,"./store":45,"vue/dist/vue.js":32}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Queue = exports.cookies = exports.shouldCatchThrownError = exports.Fingerprint = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.isObjectEmpty = isObjectEmpty;
exports.isPromise = isPromise;

var _fingerprintjs = require('fingerprintjs2');

var _fingerprintjs2 = _interopRequireDefault(_fingerprintjs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Create a new FingerprintLibrary instance.
 * 
 * @type {FingerprintLibrary}
 */
var Fingerprint = exports.Fingerprint = new _fingerprintjs2.default({
    excludeScreenResolution: true,
    excludeAvailableScreenResolution: true
});

/**
 * Catch a thrown error and print it to the console, alert message.
 *  
 * @return {avoid} 
 */
var shouldCatchThrownError = exports.shouldCatchThrownError = function shouldCatchThrownError() {
    return function (err) {
        alert('Ooops! Something went wrong.');

        console.log(err);

        if (err.response) {
            console.log(err.response);
        }
    };
};

/**
 * Check whether object is empty.
 * 
 * @param  {Object}  object
 * @return {Boolean}
 */
function isObjectEmpty(object) {
    for (var item in object) {
        return false;
    }

    return true;
}

/**
 * Functions to work with cookies.
 * 
 * @type {Object}
 */
var cookies = exports.cookies = {
    /**
     * Get a cookie.
     * 
     * @param  {String} name 
     * @return {String}      
     */
    get: function get(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));

        return matches ? decodeURIComponent(matches[1]) : undefined;
    },


    /**
     * Set a cookie.
     * 
     * @param {String} name    
     * @param {mixed} value   
     * @param {Object} options 
     */
    set: function set(name, value, options) {
        options = options || {};

        var expires = options.expires;

        if (typeof expires == "number" && expires) {
            var d = new Date();
            d.setTime(d.getTime() + expires * 1000);
            expires = options.expires = d;
        }
        if (expires && expires.toUTCString) {
            options.expires = expires.toUTCString();
        }

        value = encodeURIComponent(value);

        var updatedCookie = name + "=" + value;

        for (var propName in options) {
            updatedCookie += "; " + propName;
            var propValue = options[propName];
            if (propValue !== true) {
                updatedCookie += "=" + propValue;
            }
        }

        document.cookie = updatedCookie;
    }
};

/**
 * Check whether a given function is promise.
 * 
 * @param  {Function|Promise}  object 
 * @return {Boolean}
 */
function isPromise(object) {
    return typeof object.then === 'function';
}

/**
 * Custom queue class.
 * 
 * @class
 */
var Queue = exports.Queue = function () {
    /**
     * Create a new instance.
     * 
     * @constructor
     */
    function Queue() {
        _classCallCheck(this, Queue);

        this.busy = false;

        this.queue = [];
    }

    /**
     * Create a new task in a queue.
     * 
     * @param {Function|Promise} task
     */


    _createClass(Queue, [{
        key: 'add',
        value: function add() {
            var task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (task === false) {
                throw new Error('The task should be a function.');
            }

            this.queue.push(task);

            this.added();

            return this;
        }

        /**
         * Triggered when a new task added.
         * 
         * @return {avoid} 
         */

    }, {
        key: 'added',
        value: function added() {
            if (!this.busy) {
                this.start();
            }
        }

        /**
         * Start queue.
         * 
         * @return {avoid}
         */

    }, {
        key: 'start',
        value: function start() {
            if (typeof this.queue[0] !== 'undefined') {
                this.busy = true;

                this.queue[0](this.shouldBeDone());
            }
        }

        /**
         * Called when the proceed function is done.
         *
         * @return {Callback}
         */

    }, {
        key: 'shouldBeDone',
        value: function shouldBeDone() {
            var _this = this;

            return function () {
                _this.queue.splice(0, 1);

                _this.busy = false;

                _this.start();
            };
        }
    }]);

    return Queue;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImlzT2JqZWN0RW1wdHkiLCJpc1Byb21pc2UiLCJGaW5nZXJwcmludCIsImV4Y2x1ZGVTY3JlZW5SZXNvbHV0aW9uIiwiZXhjbHVkZUF2YWlsYWJsZVNjcmVlblJlc29sdXRpb24iLCJzaG91bGRDYXRjaFRocm93bkVycm9yIiwiYWxlcnQiLCJjb25zb2xlIiwibG9nIiwiZXJyIiwicmVzcG9uc2UiLCJvYmplY3QiLCJpdGVtIiwiY29va2llcyIsImdldCIsIm5hbWUiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJjb29raWUiLCJtYXRjaCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ1bmRlZmluZWQiLCJzZXQiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJleHBpcmVzIiwiZCIsIkRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInRvVVRDU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidXBkYXRlZENvb2tpZSIsInByb3BOYW1lIiwicHJvcFZhbHVlIiwidGhlbiIsIlF1ZXVlIiwiYnVzeSIsInF1ZXVlIiwidGFzayIsIkVycm9yIiwicHVzaCIsImFkZGVkIiwic3RhcnQiLCJzaG91bGRCZURvbmUiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztRQWlDZ0JBLGEsR0FBQUEsYTtRQXVFQUMsUyxHQUFBQSxTOztBQXhHaEI7Ozs7Ozs7O0FBRUE7Ozs7O0FBS08sSUFBTUMsb0NBQWMsNEJBQXVCO0FBQzlDQyw2QkFBeUIsSUFEcUI7QUFFOUNDLHNDQUFrQztBQUZZLENBQXZCLENBQXBCOztBQUtQOzs7OztBQUtPLElBQU1DLDBEQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsV0FBTSxlQUFPO0FBQy9DQyxjQUFNLDhCQUFOOztBQUVBQyxnQkFBUUMsR0FBUixDQUFZQyxHQUFaOztBQUVBLFlBQUdBLElBQUlDLFFBQVAsRUFBaUI7QUFDYkgsb0JBQVFDLEdBQVIsQ0FBWUMsSUFBSUMsUUFBaEI7QUFDSDtBQUNKLEtBUnFDO0FBQUEsQ0FBL0I7O0FBVVA7Ozs7OztBQU1PLFNBQVNWLGFBQVQsQ0FBd0JXLE1BQXhCLEVBQWdDO0FBQ25DLFNBQUksSUFBSUMsSUFBUixJQUFnQkQsTUFBaEIsRUFBd0I7QUFDcEIsZUFBTyxLQUFQO0FBQ0g7O0FBRUQsV0FBTyxJQUFQO0FBQ0g7O0FBRUQ7Ozs7O0FBS08sSUFBTUUsNEJBQVU7QUFDbkI7Ozs7OztBQU1BQyxPQVBtQixlQU9kQyxJQVBjLEVBT1I7QUFDUCxZQUFJQyxVQUFVQyxTQUFTQyxNQUFULENBQWdCQyxLQUFoQixDQUFzQixJQUFJQyxNQUFKLENBQ2hDLGFBQWFMLEtBQUtNLE9BQUwsQ0FBYSw4QkFBYixFQUE2QyxNQUE3QyxDQUFiLEdBQW9FLFVBRHBDLENBQXRCLENBQWQ7O0FBSUEsZUFBT0wsVUFBVU0sbUJBQW1CTixRQUFRLENBQVIsQ0FBbkIsQ0FBVixHQUEyQ08sU0FBbEQ7QUFDSCxLQWJrQjs7O0FBZW5COzs7Ozs7O0FBT0FDLE9BdEJtQixlQXNCZFQsSUF0QmMsRUFzQlJVLEtBdEJRLEVBc0JEQyxPQXRCQyxFQXNCUTtBQUN2QkEsa0JBQVVBLFdBQVcsRUFBckI7O0FBRUEsWUFBSUMsVUFBVUQsUUFBUUMsT0FBdEI7O0FBRUEsWUFBSSxPQUFPQSxPQUFQLElBQWtCLFFBQWxCLElBQThCQSxPQUFsQyxFQUEyQztBQUN2QyxnQkFBSUMsSUFBSSxJQUFJQyxJQUFKLEVBQVI7QUFDQUQsY0FBRUUsT0FBRixDQUFVRixFQUFFRyxPQUFGLEtBQWNKLFVBQVUsSUFBbEM7QUFDQUEsc0JBQVVELFFBQVFDLE9BQVIsR0FBa0JDLENBQTVCO0FBQ0g7QUFDRCxZQUFJRCxXQUFXQSxRQUFRSyxXQUF2QixFQUFvQztBQUNoQ04sb0JBQVFDLE9BQVIsR0FBa0JBLFFBQVFLLFdBQVIsRUFBbEI7QUFDSDs7QUFFRFAsZ0JBQVFRLG1CQUFtQlIsS0FBbkIsQ0FBUjs7QUFFQSxZQUFJUyxnQkFBZ0JuQixPQUFPLEdBQVAsR0FBYVUsS0FBakM7O0FBRUEsYUFBSyxJQUFJVSxRQUFULElBQXFCVCxPQUFyQixFQUE4QjtBQUMxQlEsNkJBQWlCLE9BQU9DLFFBQXhCO0FBQ0EsZ0JBQUlDLFlBQVlWLFFBQVFTLFFBQVIsQ0FBaEI7QUFDQSxnQkFBSUMsY0FBYyxJQUFsQixFQUF3QjtBQUNwQkYsaUNBQWlCLE1BQU1FLFNBQXZCO0FBQ0g7QUFDSjs7QUFFRG5CLGlCQUFTQyxNQUFULEdBQWtCZ0IsYUFBbEI7QUFDSDtBQWpEa0IsQ0FBaEI7O0FBb0RQOzs7Ozs7QUFNTyxTQUFTakMsU0FBVCxDQUFvQlUsTUFBcEIsRUFBNEI7QUFDL0IsV0FBTyxPQUFPQSxPQUFPMEIsSUFBZCxLQUF1QixVQUE5QjtBQUNIOztBQUVEOzs7OztBQUtPLElBQU1DO0FBQ1Q7Ozs7O0FBS0EscUJBQWU7QUFBQTs7QUFDWCxhQUFLQyxJQUFMLEdBQVksS0FBWjs7QUFFQSxhQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNIOztBQUVEOzs7Ozs7O0FBWlM7QUFBQTtBQUFBLDhCQWlCVTtBQUFBLGdCQUFkQyxJQUFjLHVFQUFQLEtBQU87O0FBQ2YsZ0JBQUdBLFNBQVMsS0FBWixFQUFtQjtBQUNmLHNCQUFNLElBQUlDLEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0g7O0FBRUQsaUJBQUtGLEtBQUwsQ0FBV0csSUFBWCxDQUFnQkYsSUFBaEI7O0FBRUEsaUJBQUtHLEtBQUw7O0FBRUEsbUJBQU8sSUFBUDtBQUNIOztBQUVEOzs7Ozs7QUE3QlM7QUFBQTtBQUFBLGdDQWtDQTtBQUNMLGdCQUFHLENBQUMsS0FBS0wsSUFBVCxFQUFlO0FBQ1gscUJBQUtNLEtBQUw7QUFDSDtBQUNKOztBQUVEOzs7Ozs7QUF4Q1M7QUFBQTtBQUFBLGdDQTZDQTtBQUNMLGdCQUFHLE9BQU8sS0FBS0wsS0FBTCxDQUFXLENBQVgsQ0FBUCxLQUF5QixXQUE1QixFQUF5QztBQUNyQyxxQkFBS0QsSUFBTCxHQUFZLElBQVo7O0FBRUEscUJBQUtDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsS0FBS00sWUFBTCxFQUFkO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7O0FBckRTO0FBQUE7QUFBQSx1Q0EwRE87QUFBQTs7QUFDWixtQkFBTyxZQUFNO0FBQ1Qsc0JBQUtOLEtBQUwsQ0FBV08sTUFBWCxDQUFrQixDQUFsQixFQUFxQixDQUFyQjs7QUFFQSxzQkFBS1IsSUFBTCxHQUFZLEtBQVo7O0FBRUEsc0JBQUtNLEtBQUw7QUFDSCxhQU5EO0FBT0g7QUFsRVE7O0FBQUE7QUFBQSxHQUFOIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZpbmdlcnByaW50TGlicmFyeSBmcm9tICdmaW5nZXJwcmludGpzMidcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBuZXcgRmluZ2VycHJpbnRMaWJyYXJ5IGluc3RhbmNlLlxyXG4gKiBcclxuICogQHR5cGUge0ZpbmdlcnByaW50TGlicmFyeX1cclxuICovXHJcbmV4cG9ydCBjb25zdCBGaW5nZXJwcmludCA9IG5ldyBGaW5nZXJwcmludExpYnJhcnkoe1xyXG4gICAgZXhjbHVkZVNjcmVlblJlc29sdXRpb246IHRydWUsXHJcbiAgICBleGNsdWRlQXZhaWxhYmxlU2NyZWVuUmVzb2x1dGlvbjogdHJ1ZVxyXG59KVxyXG5cclxuLyoqXHJcbiAqIENhdGNoIGEgdGhyb3duIGVycm9yIGFuZCBwcmludCBpdCB0byB0aGUgY29uc29sZSwgYWxlcnQgbWVzc2FnZS5cclxuICogIFxyXG4gKiBAcmV0dXJuIHthdm9pZH0gXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2hvdWxkQ2F0Y2hUaHJvd25FcnJvciA9ICgpID0+IGVyciA9PiB7XHJcbiAgICBhbGVydCgnT29vcHMhIFNvbWV0aGluZyB3ZW50IHdyb25nLicpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcblxyXG4gICAgaWYoZXJyLnJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyLnJlc3BvbnNlKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIHdoZXRoZXIgb2JqZWN0IGlzIGVtcHR5LlxyXG4gKiBcclxuICogQHBhcmFtICB7T2JqZWN0fSAgb2JqZWN0XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RFbXB0eSAob2JqZWN0KSB7XHJcbiAgICBmb3IodmFyIGl0ZW0gaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb25zIHRvIHdvcmsgd2l0aCBjb29raWVzLlxyXG4gKiBcclxuICogQHR5cGUge09iamVjdH1cclxuICovXHJcbmV4cG9ydCBjb25zdCBjb29raWVzID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjb29raWUuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSBcclxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gICAgICBcclxuICAgICAqL1xyXG4gICAgZ2V0IChuYW1lKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cChcclxuICAgICAgICAgICAgXCIoPzpefDsgKVwiICsgbmFtZS5yZXBsYWNlKC8oW1xcLiQ/Knx7fVxcKFxcKVxcW1xcXVxcXFxcXC9cXCteXSkvZywgJ1xcXFwkMScpICsgXCI9KFteO10qKVwiXHJcbiAgICAgICAgKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtYXRjaGVzID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pIDogdW5kZWZpbmVkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIGNvb2tpZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgICAgXHJcbiAgICAgKiBAcGFyYW0ge21peGVkfSB2YWx1ZSAgIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgXHJcbiAgICAgKi9cclxuICAgIHNldCAobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICAgICAgdmFyIGV4cGlyZXMgPSBvcHRpb25zLmV4cGlyZXM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgZXhwaXJlcyA9PSBcIm51bWJlclwiICYmIGV4cGlyZXMpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICBkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyBleHBpcmVzICogMTAwMCk7XHJcbiAgICAgICAgICAgIGV4cGlyZXMgPSBvcHRpb25zLmV4cGlyZXMgPSBkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXhwaXJlcyAmJiBleHBpcmVzLnRvVVRDU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuZXhwaXJlcyA9IGV4cGlyZXMudG9VVENTdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuXHJcbiAgICAgICAgdmFyIHVwZGF0ZWRDb29raWUgPSBuYW1lICsgXCI9XCIgKyB2YWx1ZTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICB1cGRhdGVkQ29va2llICs9IFwiOyBcIiArIHByb3BOYW1lO1xyXG4gICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gb3B0aW9uc1twcm9wTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChwcm9wVmFsdWUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI9XCIgKyBwcm9wVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHVwZGF0ZWRDb29raWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayB3aGV0aGVyIGEgZ2l2ZW4gZnVuY3Rpb24gaXMgcHJvbWlzZS5cclxuICogXHJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufFByb21pc2V9ICBvYmplY3QgXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlIChvYmplY3QpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0LnRoZW4gPT09ICdmdW5jdGlvbic7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gcXVldWUgY2xhc3MuXHJcbiAqIFxyXG4gKiBAY2xhc3NcclxuICovXHJcbmV4cG9ydCBjb25zdCBRdWV1ZSA9IGNsYXNzIFF1ZXVlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlLlxyXG4gICAgICogXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgdGFzayBpbiBhIHF1ZXVlLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFByb21pc2V9IHRhc2tcclxuICAgICAqL1xyXG4gICAgYWRkICh0YXNrID0gZmFsc2UpIHtcclxuICAgICAgICBpZih0YXNrID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB0YXNrIHNob3VsZCBiZSBhIGZ1bmN0aW9uLicpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnF1ZXVlLnB1c2godGFzayk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkZWQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIG5ldyB0YXNrIGFkZGVkLlxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJuIHthdm9pZH0gXHJcbiAgICAgKi9cclxuICAgIGFkZGVkICgpIHtcclxuICAgICAgICBpZighdGhpcy5idXN5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydCBxdWV1ZS5cclxuICAgICAqIFxyXG4gICAgICogQHJldHVybiB7YXZvaWR9XHJcbiAgICAgKi9cclxuICAgIHN0YXJ0ICgpIHtcclxuICAgICAgICBpZih0eXBlb2YgdGhpcy5xdWV1ZVswXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucXVldWVbMF0odGhpcy5zaG91bGRCZURvbmUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHByb2NlZWQgZnVuY3Rpb24gaXMgZG9uZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtDYWxsYmFja31cclxuICAgICAqL1xyXG4gICAgc2hvdWxkQmVEb25lICgpIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZSgwLCAxKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==
},{"fingerprintjs2":27}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vue = require('vue/dist/vue.js');

var _vue2 = _interopRequireDefault(_vue);

var _vueRouter = require('vue-router');

var _vueRouter2 = _interopRequireDefault(_vueRouter);

var _feed = require('../components/feed');

var _feed2 = _interopRequireDefault(_feed);

var _post = require('../components/post');

var _post2 = _interopRequireDefault(_post);

var _create = require('../components/post/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.use(_vueRouter2.default);

exports.default = new _vueRouter2.default({
    routes: [{
        path: '/',
        component: _feed2.default
    }, {
        path: '/post/create',
        component: _create2.default
    }, {
        path: '/post/:id',
        component: _post2.default
    }]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInVzZSIsInJvdXRlcyIsInBhdGgiLCJjb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFJQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUpBLGNBQUlBLEdBQUo7O2tCQU1lLHdCQUFXO0FBQ3RCQyxZQUFRLENBQ0o7QUFDSUMsY0FBTSxHQURWO0FBRUlDO0FBRkosS0FESSxFQUtKO0FBQ0lELGNBQU0sY0FEVjtBQUVJQztBQUZKLEtBTEksRUFTSjtBQUNJRCxjQUFNLFdBRFY7QUFFSUM7QUFGSixLQVRJO0FBRGMsQ0FBWCxDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBSb3V0ZXIgZnJvbSAndnVlLXJvdXRlcidcclxuXHJcblZ1ZS51c2UoUm91dGVyKVxyXG5cclxuaW1wb3J0IEZlZWQgZnJvbSAnLi4vY29tcG9uZW50cy9mZWVkJ1xyXG5pbXBvcnQgUG9zdCBmcm9tICcuLi9jb21wb25lbnRzL3Bvc3QnXHJcbmltcG9ydCBDcmVhdGVQb3N0IGZyb20gJy4uL2NvbXBvbmVudHMvcG9zdC9jcmVhdGUnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgUm91dGVyKHtcclxuICAgIHJvdXRlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGF0aDogJy8nLFxyXG4gICAgICAgICAgICBjb21wb25lbnQ6IEZlZWRcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGF0aDogJy9wb3N0L2NyZWF0ZScsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudDogQ3JlYXRlUG9zdFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXRoOiAnL3Bvc3QvOmlkJyxcclxuICAgICAgICAgICAgY29tcG9uZW50OiBQb3N0XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgIF1cclxufSkiXX0=
},{"../components/feed":37,"../components/post":40,"../components/post/create":39,"vue-router":31,"vue/dist/vue.js":32}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vue = require('vue/dist/vue.js');

var _vue2 = _interopRequireDefault(_vue);

var _vuex = require('vuex');

var _vuex2 = _interopRequireDefault(_vuex);

var _posts = require('./modules/posts');

var _posts2 = _interopRequireDefault(_posts);

var _loading = require('./modules/loading');

var _loading2 = _interopRequireDefault(_loading);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.use(_vuex2.default);

exports.default = new _vuex2.default.Store({
    modules: {
        posts: _posts2.default,
        loading: _loading2.default
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInVzZSIsIlN0b3JlIiwibW9kdWxlcyIsInBvc3RzIiwibG9hZGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBLGNBQUlBLEdBQUo7O2tCQUVlLElBQUksZUFBS0MsS0FBVCxDQUFlO0FBQzFCQyxhQUFTO0FBQ0xDLDhCQURLO0FBRUxDO0FBRks7QUFEaUIsQ0FBZixDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXHJcblxyXG5pbXBvcnQgUG9zdHMgZnJvbSAnLi9tb2R1bGVzL3Bvc3RzJ1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tICcuL21vZHVsZXMvbG9hZGluZydcclxuXHJcblZ1ZS51c2UoVnVleClcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBWdWV4LlN0b3JlKHtcclxuICAgIG1vZHVsZXM6IHtcclxuICAgICAgICBwb3N0czogUG9zdHMsXHJcbiAgICAgICAgbG9hZGluZzogTG9hZGluZ1xyXG4gICAgfSxcclxufSkiXX0=
},{"./modules/loading":46,"./modules/posts":47,"vue/dist/vue.js":32,"vuex":33}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    namespaced: true,

    state: {
        busy: true
    },

    mutations: {
        enable: function enable(state) {
            state.busy = true;
        },
        disable: function disable(state) {
            state.busy = false;
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvYWRpbmcuanMiXSwibmFtZXMiOlsibmFtZXNwYWNlZCIsInN0YXRlIiwiYnVzeSIsIm11dGF0aW9ucyIsImVuYWJsZSIsImRpc2FibGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUFlO0FBQ1hBLGdCQUFZLElBREQ7O0FBR1hDLFdBQU87QUFDSEMsY0FBTTtBQURILEtBSEk7O0FBT1hDLGVBQVc7QUFDUEMsY0FETyxrQkFDQ0gsS0FERCxFQUNRO0FBQ1hBLGtCQUFNQyxJQUFOLEdBQWEsSUFBYjtBQUNILFNBSE07QUFLUEcsZUFMTyxtQkFLRUosS0FMRixFQUtTO0FBQ1pBLGtCQUFNQyxJQUFOLEdBQWEsS0FBYjtBQUNIO0FBUE07QUFQQSxDIiwiZmlsZSI6ImxvYWRpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxyXG4gICAgXHJcbiAgICBzdGF0ZToge1xyXG4gICAgICAgIGJ1c3k6IHRydWVcclxuICAgIH0sXHJcblxyXG4gICAgbXV0YXRpb25zOiB7XHJcbiAgICAgICAgZW5hYmxlIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5idXN5ID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkaXNhYmxlIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5idXN5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19
},{}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _api = require('../../api');

var _api2 = _interopRequireDefault(_api);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createNextPageRequest(from) {
    return _api2.default.create().resource('posts').limit(10).order('id', 'desc');
}

exports.default = {
    state: {
        posts: [],
        last_total_records: 0
    },

    mutations: {
        push: function push(state, post) {
            if (typeof post.title !== 'undefined' && typeof post.text !== 'undefined' && state.posts.findIndex(function (p) {
                return p.id == post.id;
            }) === -1) {
                state.posts.push(post);
            }
        },
        delete: function _delete(state, deletedPostId) {
            var indexDeletedPost = state.posts.findIndex(function (post) {
                return post.id == deletedPostId;
            });

            if (indexDeletedPost !== -1) {
                state.posts.splice(indexDeletedPost, 1);
            }
        },
        setLastTotalRecords: function setLastTotalRecords(state, records) {
            state.last_total_records = records;
        }
    },

    actions: {
        getNextPage: function getNextPage(context) {
            var request = createNextPageRequest();

            if (context.state.posts.length) {
                request.where('id', '<=', context.getters.last_post_id + 1);
            }

            return request.get().then(function (response) {
                context.commit('setLastTotalRecords', Number(response.headers['x-total-count']));

                response.data.forEach(function (post) {
                    return context.commit('push', post);
                });
            }).catch((0, _helpers.shouldCatchThrownError)());
        }
    },

    getters: {
        getPostById: function getPostById(state) {
            return function (id) {
                return state.posts.find(function (post) {
                    return post.id == id;
                });
            };
        },

        sorted: function sorted(state) {
            return state.posts.sort(function (a, b) {
                return b.id - a.id;
            });
        },
        last_post_id: function last_post_id(state) {
            return Math.min.apply(null, state.posts.map(function (post) {
                return post.id;
            })) || 0;
        }
    },

    namespaced: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5leHRQYWdlUmVxdWVzdCIsImZyb20iLCJjcmVhdGUiLCJyZXNvdXJjZSIsImxpbWl0Iiwib3JkZXIiLCJzdGF0ZSIsInBvc3RzIiwibGFzdF90b3RhbF9yZWNvcmRzIiwibXV0YXRpb25zIiwicHVzaCIsInBvc3QiLCJ0aXRsZSIsInRleHQiLCJmaW5kSW5kZXgiLCJwIiwiaWQiLCJkZWxldGUiLCJkZWxldGVkUG9zdElkIiwiaW5kZXhEZWxldGVkUG9zdCIsInNwbGljZSIsInNldExhc3RUb3RhbFJlY29yZHMiLCJyZWNvcmRzIiwiYWN0aW9ucyIsImdldE5leHRQYWdlIiwiY29udGV4dCIsInJlcXVlc3QiLCJsZW5ndGgiLCJ3aGVyZSIsImdldHRlcnMiLCJsYXN0X3Bvc3RfaWQiLCJnZXQiLCJ0aGVuIiwiY29tbWl0IiwiTnVtYmVyIiwicmVzcG9uc2UiLCJoZWFkZXJzIiwiZGF0YSIsImZvckVhY2giLCJjYXRjaCIsImdldFBvc3RCeUlkIiwiZmluZCIsInNvcnRlZCIsInNvcnQiLCJhIiwiYiIsIk1hdGgiLCJtaW4iLCJhcHBseSIsIm1hcCIsIm5hbWVzcGFjZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQSxTQUFTQSxxQkFBVCxDQUFnQ0MsSUFBaEMsRUFBc0M7QUFDbEMsV0FBTyxjQUFRQyxNQUFSLEdBQ1FDLFFBRFIsQ0FDaUIsT0FEakIsRUFFUUMsS0FGUixDQUVjLEVBRmQsRUFHUUMsS0FIUixDQUdjLElBSGQsRUFHb0IsTUFIcEIsQ0FBUDtBQUlIOztrQkFFYztBQUNYQyxXQUFPO0FBQ0hDLGVBQU8sRUFESjtBQUVIQyw0QkFBb0I7QUFGakIsS0FESTs7QUFNWEMsZUFBVztBQUNQQyxZQURPLGdCQUNESixLQURDLEVBQ01LLElBRE4sRUFDWTtBQUNmLGdCQUFHLE9BQU9BLEtBQUtDLEtBQVosS0FBc0IsV0FBdEIsSUFBcUMsT0FBT0QsS0FBS0UsSUFBWixLQUFxQixXQUExRCxJQUF5RVAsTUFBTUMsS0FBTixDQUFZTyxTQUFaLENBQXNCO0FBQUEsdUJBQUtDLEVBQUVDLEVBQUYsSUFBUUwsS0FBS0ssRUFBbEI7QUFBQSxhQUF0QixNQUFnRCxDQUFDLENBQTdILEVBQWdJO0FBQzVIVixzQkFBTUMsS0FBTixDQUFZRyxJQUFaLENBQWlCQyxJQUFqQjtBQUNIO0FBQ0osU0FMTTtBQU9QTSxjQVBPLG1CQU9DWCxLQVBELEVBT1FZLGFBUFIsRUFPdUI7QUFDMUIsZ0JBQUlDLG1CQUFtQmIsTUFBTUMsS0FBTixDQUFZTyxTQUFaLENBQXNCO0FBQUEsdUJBQVFILEtBQUtLLEVBQUwsSUFBV0UsYUFBbkI7QUFBQSxhQUF0QixDQUF2Qjs7QUFFQSxnQkFBR0MscUJBQXFCLENBQUMsQ0FBekIsRUFBNEI7QUFDeEJiLHNCQUFNQyxLQUFOLENBQVlhLE1BQVosQ0FBbUJELGdCQUFuQixFQUFxQyxDQUFyQztBQUNIO0FBQ0osU0FiTTtBQWVQRSwyQkFmTywrQkFlY2YsS0FmZCxFQWVxQmdCLE9BZnJCLEVBZThCO0FBQ2pDaEIsa0JBQU1FLGtCQUFOLEdBQTJCYyxPQUEzQjtBQUNIO0FBakJNLEtBTkE7O0FBMEJYQyxhQUFTO0FBQ0xDLG1CQURLLHVCQUNRQyxPQURSLEVBQ2lCO0FBQ2xCLGdCQUFJQyxVQUFVMUIsdUJBQWQ7O0FBRUEsZ0JBQUd5QixRQUFRbkIsS0FBUixDQUFjQyxLQUFkLENBQW9Cb0IsTUFBdkIsRUFBK0I7QUFDM0JELHdCQUFRRSxLQUFSLENBQWMsSUFBZCxFQUFvQixJQUFwQixFQUEwQkgsUUFBUUksT0FBUixDQUFnQkMsWUFBaEIsR0FBK0IsQ0FBekQ7QUFDSDs7QUFFRCxtQkFBT0osUUFBUUssR0FBUixHQUNGQyxJQURFLENBQ0csb0JBQVk7QUFDZFAsd0JBQVFRLE1BQVIsQ0FBZSxxQkFBZixFQUFzQ0MsT0FBT0MsU0FBU0MsT0FBVCxDQUFpQixlQUFqQixDQUFQLENBQXRDOztBQUVBRCx5QkFBU0UsSUFBVCxDQUFjQyxPQUFkLENBQXNCO0FBQUEsMkJBQVFiLFFBQVFRLE1BQVIsQ0FBZSxNQUFmLEVBQXVCdEIsSUFBdkIsQ0FBUjtBQUFBLGlCQUF0QjtBQUNILGFBTEUsRUFNRjRCLEtBTkUsQ0FNSSxzQ0FOSixDQUFQO0FBT0Y7QUFmRyxLQTFCRTs7QUE0Q1hWLGFBQVM7QUFDTFcscUJBQWE7QUFBQSxtQkFBUyxjQUFNO0FBQ3hCLHVCQUFPbEMsTUFBTUMsS0FBTixDQUFZa0MsSUFBWixDQUFpQjtBQUFBLDJCQUFROUIsS0FBS0ssRUFBTCxJQUFXQSxFQUFuQjtBQUFBLGlCQUFqQixDQUFQO0FBQ0gsYUFGWTtBQUFBLFNBRFI7O0FBS0wwQixjQUxLLGtCQUtHcEMsS0FMSCxFQUtVO0FBQ1gsbUJBQU9BLE1BQU1DLEtBQU4sQ0FBWW9DLElBQVosQ0FBaUIsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsdUJBQVVBLEVBQUU3QixFQUFGLEdBQU80QixFQUFFNUIsRUFBbkI7QUFBQSxhQUFqQixDQUFQO0FBQ0gsU0FQSTtBQVNMYyxvQkFUSyx3QkFTU3hCLEtBVFQsRUFTZ0I7QUFDakIsbUJBQU93QyxLQUFLQyxHQUFMLENBQVNDLEtBQVQsQ0FBZSxJQUFmLEVBQXFCMUMsTUFBTUMsS0FBTixDQUFZMEMsR0FBWixDQUFnQjtBQUFBLHVCQUFRdEMsS0FBS0ssRUFBYjtBQUFBLGFBQWhCLENBQXJCLEtBQTBELENBQWpFO0FBQ0g7QUFYSSxLQTVDRTs7QUEwRFhrQyxnQkFBWTtBQTFERCxDIiwiZmlsZSI6InBvc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlcXVlc3QgZnJvbSAnLi4vLi4vYXBpJ1xyXG5pbXBvcnQgeyBzaG91bGRDYXRjaFRocm93bkVycm9yIH0gZnJvbSAnLi4vLi4vaGVscGVycydcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU5leHRQYWdlUmVxdWVzdCAoZnJvbSkge1xyXG4gICAgcmV0dXJuIFJlcXVlc3QuY3JlYXRlKClcclxuICAgICAgICAgICAgICAgICAgLnJlc291cmNlKCdwb3N0cycpXHJcbiAgICAgICAgICAgICAgICAgIC5saW1pdCgxMClcclxuICAgICAgICAgICAgICAgICAgLm9yZGVyKCdpZCcsICdkZXNjJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHN0YXRlOiB7XHJcbiAgICAgICAgcG9zdHM6IFtdLFxyXG4gICAgICAgIGxhc3RfdG90YWxfcmVjb3JkczogMCxcclxuICAgIH0sXHJcblxyXG4gICAgbXV0YXRpb25zOiB7XHJcbiAgICAgICAgcHVzaCAoc3RhdGUsIHBvc3QpIHtcclxuICAgICAgICAgICAgaWYodHlwZW9mIHBvc3QudGl0bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwb3N0LnRleHQgIT09ICd1bmRlZmluZWQnICYmIHN0YXRlLnBvc3RzLmZpbmRJbmRleChwID0+IHAuaWQgPT0gcG9zdC5pZCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5wb3N0cy5wdXNoKHBvc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVsZXRlIChzdGF0ZSwgZGVsZXRlZFBvc3RJZCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXhEZWxldGVkUG9zdCA9IHN0YXRlLnBvc3RzLmZpbmRJbmRleChwb3N0ID0+IHBvc3QuaWQgPT0gZGVsZXRlZFBvc3RJZCk7XHJcblxyXG4gICAgICAgICAgICBpZihpbmRleERlbGV0ZWRQb3N0ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUucG9zdHMuc3BsaWNlKGluZGV4RGVsZXRlZFBvc3QsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0TGFzdFRvdGFsUmVjb3JkcyAoc3RhdGUsIHJlY29yZHMpIHtcclxuICAgICAgICAgICAgc3RhdGUubGFzdF90b3RhbF9yZWNvcmRzID0gcmVjb3JkcztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFjdGlvbnM6IHtcclxuICAgICAgICBnZXROZXh0UGFnZSAoY29udGV4dCkge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGNyZWF0ZU5leHRQYWdlUmVxdWVzdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoY29udGV4dC5zdGF0ZS5wb3N0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qud2hlcmUoJ2lkJywgJzw9JywgY29udGV4dC5nZXR0ZXJzLmxhc3RfcG9zdF9pZCArIDEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0LmdldCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ3NldExhc3RUb3RhbFJlY29yZHMnLCBOdW1iZXIocmVzcG9uc2UuaGVhZGVyc1sneC10b3RhbC1jb3VudCddKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChwb3N0ID0+IGNvbnRleHQuY29tbWl0KCdwdXNoJywgcG9zdCkpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChzaG91bGRDYXRjaFRocm93bkVycm9yKCkpXHJcbiAgICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZ2V0dGVyczoge1xyXG4gICAgICAgIGdldFBvc3RCeUlkOiBzdGF0ZSA9PiBpZCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5wb3N0cy5maW5kKHBvc3QgPT4gcG9zdC5pZCA9PSBpZCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc29ydGVkIChzdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUucG9zdHMuc29ydCgoYSwgYikgPT4gYi5pZCAtIGEuaWQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGxhc3RfcG9zdF9pZCAoc3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIHN0YXRlLnBvc3RzLm1hcChwb3N0ID0+IHBvc3QuaWQpKSB8fCAwO1xyXG4gICAgICAgIH0gXHJcbiAgICB9LFxyXG5cclxuICAgIG5hbWVzcGFjZWQ6IHRydWUsXHJcbn0iXX0=
},{"../../api":34,"../../helpers":43}]},{},[42])
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJhcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXInXHJcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJ1xyXG5cclxuaW1wb3J0IExvZ28gZnJvbSAnLi9jb21wb25lbnRzL2xvZ28nXHJcblxyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZVxyXG5cclxubmV3IFZ1ZSh7XHJcbiAgICBlbDogJyNhcHAnLFxyXG4gICAgcm91dGVyLFxyXG4gICAgc3RvcmUsXHJcbiAgICB3YXRjaDoge1xyXG4gICAgICAgICckcm91dGUnOiBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdsb2FkaW5nL2VuYWJsZScpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICBsb2dvOiBMb2dvLFxyXG4gICAgfVxyXG59KSJdLCJmaWxlIjoiYXBwLmpzIn0=
